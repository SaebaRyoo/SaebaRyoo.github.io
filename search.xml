<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解Nest.js的基础概念</title>
      <link href="/2025/03/21/hou-duan/nestjs/1.shen-ru-li-jie-nest.js-de-ji-chu-gai-nian/"/>
      <url>/2025/03/21/hou-duan/nestjs/1.shen-ru-li-jie-nest.js-de-ji-chu-gai-nian/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1-Nest-js-概述"><a href="#1-Nest-js-概述" class="headerlink" title="1. Nest.js 概述"></a>1. <strong>Nest.js 概述</strong></h1><p><strong>Nest.js 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码），并结合了面向对象编程（OOP）、函数式编程（FP）和函数式响应编程（FRP）的元素。</strong></p><h2 id="1-1-框架特点"><a href="#1-1-框架特点" class="headerlink" title="1.1 框架特点"></a>1.1 框架特点</h2><ul><li>​<strong>底层支持</strong>​<strong>：Nest.js 底层使用 Express（默认）或 Fastify 作为 HTTP Server 框架，在这些框架之上提供了更高层的抽象。</strong></li><li>​<strong>TypeScript 支持</strong>​<strong>：完整的 TypeScript 支持，提供了更好的开发体验和类型安全。</strong></li><li>​<strong>模块化架构</strong>​<strong>：采用模块化设计，便于代码组织和维护。</strong></li><li>​<strong>依赖注入</strong>​<strong>：内置依赖注入（DI）系统，是框架的核心特性之一。</strong></li><li>​<strong>面向切面编程</strong>​<strong>：支持 AOP 编程范式，提供了中间件、守卫、管道、拦截器等机制。</strong></li></ul><h2 id="1-2-框架优势"><a href="#1-2-框架优势" class="headerlink" title="1.2 框架优势"></a>1.2 框架优势</h2><p><strong>从2018年以来，Nest.js 在 Node.js 框架中异军突起，迅速成为最受欢迎的框架之一。其主要优势包括：</strong></p><ol><li><strong>完善的架构支持</strong></li><li><strong>强大的依赖注入系统</strong></li><li><strong>模块化和可扩展性</strong></li><li><strong>完整的 TypeScript 支持</strong></li><li><strong>丰富的生态系统</strong></li></ol><h1 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. <strong>核心概念</strong></h1><h2 id="2-1-IoC（控制反转）"><a href="#2-1-IoC（控制反转）" class="headerlink" title="2.1. IoC（控制反转）"></a>2.1. <strong>IoC（控制反转）</strong></h2><p><strong>IoC是一个开发代码的设计原则，DI则是实现这个设计原则的方案。简单的来形容控制反转，那就是：控制权在框架而不是我手中。</strong></p><p><strong>我们可以从下面这两点来理解</strong></p><ul><li><strong>将对象的创建和依赖关系的管理交给外部容器。比如代码中 <strong><code>ServiceA</code>要用到<code>ServiceB</code>的某个方法<code>find</code>。一般情况下，需要再<code>ServiceA</code>中new 一个<code>ServiceB</code>的实例，然后调用这个<code>find</code>方法。但是在使用<code>IoC</code>设计原则后</strong>，</strong>A 的代码只需要定义一个 <code>private</code> 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中</li><li><code>IoC</code> 将采用<code>依赖注入(DI)</code>或<code>依赖查找</code>两种方案去实现</li></ul><h2 id="2-2-DI（依赖注入）"><a href="#2-2-DI（依赖注入）" class="headerlink" title="2.2. DI（依赖注入）"></a>2.2. <strong>DI（依赖注入）</strong></h2><p><strong>依赖注入（Dependency Injection）是 IoC 的一种具体实现方式。在 Nest.js 中，DI 系统负责：</strong></p><ul><li><strong>自动创建和管理依赖对象</strong></li><li><strong>在需要的地方注入依赖</strong></li><li><strong>管理对象的生命周期</strong></li></ul><p>Nest.js的依赖注入主要通过装饰器和TypeScript的元数据反射来实现。要使用这些特性，需要在<code>tsconfig.json</code> 中启用相关选项(这个在初始化nestjs项目时就会带上)：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"emitDecoratorMetadata"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-1-使用Nestjs中的依赖注入"><a href="#2-2-1-使用Nestjs中的依赖注入" class="headerlink" title="2.2.1. 使用Nestjs中的依赖注入"></a>2.2.1. <strong>使用Nestjs中的依赖注入</strong></h3><h4 id="2-2-1-1-创建一个服务类"><a href="#2-2-1-1-创建一个服务类" class="headerlink" title="2.2.1.1. 创建一个服务类"></a>2.2.1.1. <strong>创建一个服务类</strong></h4><p><strong>使用</strong><code>@Injectable()</code>标记,<strong>告知 NestJS 该类可以由依赖注入容器管理。然后在 TypeScript 编译器配置正确的情况下，为类的构造函数参数生成类型元数据。</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/cat/cat.service.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关键装饰器</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">readonly</span> cats<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Maine Coon'</span><span class="token punctuation">,</span> <span class="token string">'British Shorthair'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cats<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// TS编译后生成元数据</span>Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">'design:paramtypes'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CatService<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1-2-容器注册"><a href="#2-2-1-2-容器注册" class="headerlink" title="2.2.1.2. 容器注册"></a>2.2.1.2. <strong>容器注册</strong></h4><p><strong>我们首先创建一个controller</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/cat/cat.controller.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatController</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> catService<span class="token operator">:</span> CatService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 自动注入</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然后通过</strong><code>@Module</code>来注册模块，</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/cat/cat.module.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>CatController<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>CatService<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 注册到DI容器</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// app.module.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CatModule<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1-3-逻辑梳理"><a href="#2-2-1-3-逻辑梳理" class="headerlink" title="2.2.1.3. 逻辑梳理"></a>2.2.1.3. <strong>逻辑梳理</strong></h4><p><strong>通过上面的代码，我们会发现：</strong></p><ol><li>首先，Nestjs在实例化时，先通过根Module初始化<code>CatModule</code></li><li><strong>在onModuleInit</strong> <strong>时，标记了</strong><code>@Injectable()</code> 装饰器的类被 NestJS 放入到IoC容器管理。</li><li><strong>在初始化 <strong><code>CatModule</code>时，通过依赖分析，会先将</strong>Providers（如</strong>​<strong>被@Injectable标记的</strong> <code>&lt;strong&gt;CatService&lt;/strong&gt;</code><strong>​）​</strong>实例化，确保所有依赖的 Provider 已就绪</li><li><strong>然后在Controller实例实例化的时候，自动注入到</strong><code>CatController</code>中</li></ol><p><strong>我们可以通过一张图来辅助理解</strong></p><pre class='mermaid'>sequenceDiagram    participant N as NestJS    participant M as CatModule    participant S as CatService    participant C as CatController    N->>M: 初始化模块    M->>S: 实例化CatService（@Injectable）    S-->>M: 完成服务实例化    M->>C: 实例化CatController（注入CatService）    C->>S: 返回实例</pre><h3 id="2-2-2-使用Koa配合reflect-metadata和typescript实现依赖注入功能"><a href="#2-2-2-使用Koa配合reflect-metadata和typescript实现依赖注入功能" class="headerlink" title="2.2.2. 使用Koa配合reflect-metadata和typescript实现依赖注入功能"></a>2.2.2. <strong>使用Koa配合reflect-metadata和typescript实现依赖注入功能</strong></h3><p><strong>这里主要是自己动手实现一下依赖注入，这里就不详细展开了，具体代码在</strong><a href="https://github.com/SaebaRyoo/Demos/tree/main/koa-DI">koa-DI</a>仓库中</p><h2 id="2-3-AOP（面向切面编程）"><a href="#2-3-AOP（面向切面编程）" class="headerlink" title="2.3. AOP（面向切面编程）"></a>2.3. <strong>AOP（面向切面编程）</strong></h2><p><strong>AOP（Aspect Oriented Programming）是一种将横切关注点（如日志、安全、事务等）与业务逻辑分离的编程范式。Nest.js 提供了多种 AOP 特性：</strong></p><ol><li><strong>Middleware（中间件）</strong></li><li><strong>Guard（守卫）</strong></li><li><strong>Interceptor（拦截器）</strong></li><li><strong>Pipe（管道）</strong></li><li><strong>Filter（异常过滤器）</strong></li></ol><p><strong>具体可到这篇</strong><a href="https://juejin.cn/post/7224476641622835258#heading-1"><strong>文章</strong></a><strong>下看</strong></p><h2 id="2-4-生命周期事件"><a href="#2-4-生命周期事件" class="headerlink" title="2.4. 生命周期事件"></a>2.4. <strong>生命周期事件</strong></h2><p><strong>下图描述了从应用程序引导到节点进程退出期间关键应用程序生命周期事件的顺序。我们可以将整个生命周期分为三个阶段：</strong>​<strong>初始化</strong>​<strong>、运行</strong>和​<strong>终止</strong>​<strong>。使用此生命周期，您可以规划模块和服务的适当初始化，管理活动连接，并在收到终止信号时优雅地关闭应用程序。</strong></p><p><img src="/imgs/nestjs/1.png" class="lazyload placeholder" data-srcset="/imgs/nestjs/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>我们也可以结合刚刚依赖注入中的例子来配合理解两者</strong></p><h3 id="2-4-1-启动过程"><a href="#2-4-1-启动过程" class="headerlink" title="2.4.1. 启动过程"></a>2.4.1. <strong>启动过程</strong></h3><ul><li><p><strong>​Bootstrapping starts</strong>​：当 Nest 应用启动时，核心引导过程开始。</p></li><li><p><strong>​onModuleInit</strong>​：</p><ul><li>代码中的<code>CatService</code> 使用了 <code>@Injectable()</code> 装饰器，这标记了该类可以被 NestJS 的依赖注入IoC容器管理。</li><li>在模块初始化时，NestJS 会调用 <code>CatService</code> 的任何初始化方法（如果有定义的话），从而进行模块的初始化。</li></ul></li><li><p><strong>​onApplicationBootstrap</strong>​：</p><ul><li>此阶段会调用 <code>CatController</code> 的构造函数，其中 <code>CatService</code> 作为参数被注入。当控制器被实例化时，NestJS 会自动传入 <code>catService</code> 实例。</li></ul></li><li><p><strong>​Start listeners</strong>​：</p><ul><li>此时，NestJS 启动 HTTP 侦听器，准备处理来自客户端的请求。</li></ul></li></ul><h3 id="2-4-2-处理请求（正常的应用处理）"><a href="#2-4-2-处理请求（正常的应用处理）" class="headerlink" title="2.4.2. 处理请求（正常的应用处理）"></a>2.4.2. <strong>处理请求（正常的应用处理）</strong></h3><ul><li><strong>​Application is running</strong>​：<ul><li>一旦监听器启动后，应用开始正常运行。这意味着 <code>CatController</code> 的 <code>findAll()</code> 方法准备好处理 GET 请求了。当接收到访问 <code>/cats</code> 的请求时，<code>findAll</code> 方法会被调用，返回 <code>CatService</code>中的猫的列表。</li></ul></li></ul><h3 id="2-4-3-关闭过程（接收终止信号）"><a href="#2-4-3-关闭过程（接收终止信号）" class="headerlink" title="2.4.3. 关闭过程（接收终止信号）"></a>2.4.3. <strong>关闭过程（接收终止信号）</strong></h3><ul><li><p><strong>​Termination signal received</strong>​：</p><ul><li><strong>当应用接收到终止信号时，涉及到的资源和模块将进入关闭阶段。</strong></li></ul></li><li><p><strong>onModuleDestroy</strong> 和 ​<strong>beforeApplicationShutdown</strong>​：</p><ul><li>NestJS 逐一调用在<code>CatService</code> 和 <code>CatController</code> 中定义的 <code>onModuleDestroy()</code> 和 <code>beforeApplicationShutdown()</code> 方法（如果存在），以确保在应用关闭之前进行清理。当前代码中没有定义这些方法，但如果定义了，可以在此阶段处理资源释放等操作。</li></ul></li><li><p><strong>​onApplicationShutdown</strong>​：</p><ul><li><strong>当应用完全关闭时，NestJS 会处理所有模块的关闭过程，确保所有事件和连接均被正确终止。</strong></li></ul></li></ul><h1 id="3-Nestjs和Express的比较"><a href="#3-Nestjs和Express的比较" class="headerlink" title="3. Nestjs和Express的比较"></a>3. <strong>Nestjs和Express的比较</strong></h1><p><strong>在下面的流程图中，我们简化了Nestjs的整体流程，并将其与Express的流程进行了比较。</strong></p><pre class='mermaid'>graph TD      subgraph Express 流程          URL["URL"] --> 中间件1["中间件 1"] --> 中间件2["中间件 2"] --> 中间件N["中间件 n"]      end      subgraph Nestjs 流程          URL2["URL"] --> 中间件多["中间件 1...n"] --> 守卫["守卫"] --> 拦截器前置["拦截器前置"] --> 控制器["控制器"]          控制器 <--> Provider["Provider"]          控制器 --> 拦截器后置["拦截器后置"] --> 过滤器["过滤器"] --> 结果["结果"]      end</pre><h2 id="3-1-Nestjs的优缺点"><a href="#3-1-Nestjs的优缺点" class="headerlink" title="3.1. Nestjs的优缺点"></a>3.1. <strong>Nestjs的优缺点</strong></h2><p><strong>我们可以看到Nestjs的架构非常的清晰，它支持</strong><code>依赖注入</code>、<code>面向切面编程</code>、<code>统一的异常处理</code>等各种过能耐。它适合大型项目和需要复杂功能的项目。</p><p><strong>当然，它的缺点就是</strong></p><ul><li><strong>对于初学者来说，NestJS的概念和设计模式可能需要一定的时间来掌握</strong></li><li><strong>对小型项目而言，可能显得过于复杂</strong></li></ul><h2 id="3-2-Express"><a href="#3-2-Express" class="headerlink" title="3.2. Express"></a>3.2. <strong>Express</strong></h2><p><strong>它的有点就是</strong></p><ul><li><strong>是一个轻量级的框架，容易上手，适合快速开发API。</strong></li><li><strong>灵活性高 -&gt; 中间件功能强大，开发者可以灵活组合中间件以满足多种需求。</strong></li></ul><p><strong>它的缺点也很明显</strong></p><ul><li><strong>它是一个极简的框架，缺少统一的结构约束。当项目比较大时，导致代码结构混乱，难以维护。</strong></li><li><strong>功能单一，本身缺少一些内置特性，如依赖注入和统一异常处理，需要依赖第三方库实现。</strong></li></ul><h1 id="4-Nestjs整体流程图"><a href="#4-Nestjs整体流程图" class="headerlink" title="4. Nestjs整体流程图"></a>4. <strong>Nestjs整体流程图</strong></h1><p><strong>我们再通过一张图来理解Nestjs的整体流程，这张图将一个请求经过Nestjs的整体过程可视化，可以帮助我们更好地理解Nestjs的工作原理。</strong></p><pre class='mermaid'>graph TD      A[HTTP Request] --> B[Platform Adapter]      B --> C[Middleware中间件]      C -->|Yes| D[Global/Module Middleware]      D --> E[Guards]      C -->|No| E      E -->|Yes| F[Guard: 比如Auth用户登录认证]      F --> G[Passed]      E -->|No| G      G -->|No| H[Throw ForbiddenException]      G -->|Yes| I[Interceptor: 前置的拦截器]      H --> Z[Exception Filter]      I --> J[Pipe: 数据转换]      J --> K[Validation Passed]      K -->|No| L[Throw ValidationException]      K -->|Yes| M[Controller Handler]      L --> Z      M --> N[DI System 依赖注入系统:解析依赖]      N --> O[Service Provider]      O --> P[Other Providers: 比如Repository/Cache/API这些]      P --> Q[Interceptor: 响应拦截器]      Q --> R[Response 统一响应格式]      R --> S[Send Response]      Z --> T[Error Formatting]      T --> S      S --> U[HTTP Response]      style A fill:#f9f,stroke:#333      style U fill:#f9f,stroke:#333      style Z fill:#f00,stroke:#333,color:#fff</pre><h1 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5. 最佳实践"></a>5. 最佳实践</h1><p><strong>最后，我们补充一下在Nestjs开发时的一些最佳实践</strong></p><h2 id="5-1-使用接口和抽象类定义契约"><a href="#5-1-使用接口和抽象类定义契约" class="headerlink" title="5.1 使用接口和抽象类定义契约"></a>5.1 使用接口和抽象类定义契约</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>  <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现接口</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 实现接口方法</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseRepository<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">abstract</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">abstract</span> <span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">abstract</span> <span class="token function">create</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRepository<span class="token operator">&lt;</span>User<span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 实现抽象方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-合理划分模块和依赖关系"><a href="#5-2-合理划分模块和依赖关系" class="headerlink" title="5.2 合理划分模块和依赖关系"></a>5.2 合理划分模块和依赖关系</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 核心模块</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigService<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CoreModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 特性模块</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CoreModule<span class="token punctuation">,</span> DatabaseModule<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UserService<span class="token punctuation">,</span> UserRepository<span class="token punctuation">]</span><span class="token punctuation">,</span>  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UserController<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 根模块</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CoreModule<span class="token punctuation">,</span> UserModule<span class="token punctuation">,</span> AuthModule<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-使用适当的作用域"><a href="#5-3-使用适当的作用域" class="headerlink" title="5.3 使用适当的作用域"></a>5.3 使用适当的作用域</h2><p><strong>根据业务需求选择合适的作用域：</strong></p><ul><li><strong>无状态服务使用 Singleton</strong></li><li><strong>需要请求级别隔离的服务使用 Request</strong></li><li><strong>需要完全独立实例的服务使用 Transient</strong></li></ul><h2 id="5-4-避免循环依赖"><a href="#5-4-避免循环依赖" class="headerlink" title="5.4 避免循环依赖"></a>5.4 避免循环依赖</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 使用 forwardRef 解决循环依赖</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ServiceB<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> serviceB<span class="token operator">:</span> ServiceB  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ServiceA<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> serviceA<span class="token operator">:</span> ServiceA  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-正确处理异步初始化"><a href="#5-5-正确处理异步初始化" class="headerlink" title="5.5 正确处理异步初始化"></a>5.5 正确处理异步初始化</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 使用 onModuleInit 钩子</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseService</span> <span class="token keyword">implements</span> <span class="token class-name">OnModuleInit</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> client<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token keyword">async</span> <span class="token function">onModuleInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createDatabaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用异步提供者</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    provide<span class="token operator">:</span> <span class="token string">'DATABASE_CONNECTION'</span><span class="token punctuation">,</span>    <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createDatabaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-6-错误处理最佳实践"><a href="#5-6-错误处理最佳实践" class="headerlink" title="5.6 错误处理最佳实践"></a>5.6 错误处理最佳实践</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 自定义异常过滤器</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Catch</span></span><span class="token punctuation">(</span>HttpException<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HttpExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">&#123;</span>  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getResponse</span><span class="token generic class-name"><span class="token operator">&lt;</span>Response<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      statusCode<span class="token operator">:</span> status<span class="token punctuation">,</span>      timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> exception<span class="token punctuation">.</span>message    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 全局应用异常过滤器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">useGlobalFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-7-性能优化建议"><a href="#5-7-性能优化建议" class="headerlink" title="5.7 性能优化建议"></a>5.7 性能优化建议</h2><ol><li><strong>使用适当的缓存策略</strong></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> User<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">async</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>合理使用数据库查询</strong></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">getUsersWithPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository      <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">'user.posts'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'post.published = :published'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> published<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过这些核心概念和最佳实践，我们可以更好地理解和使用 Nest.js 框架，构建出高质量、可维护的应用程序。在实际开发中，应该根据具体的业务需求和场景，灵活运用这些概念和实践。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LangChain学习</title>
      <link href="/2025/03/19/ai-kai-fa/gai-nian/2.langchain/"/>
      <url>/2025/03/19/ai-kai-fa/gai-nian/2.langchain/</url>
      
        <content type="html"><![CDATA[<h1 id="1-LangChain-是什么？"><a href="#1-LangChain-是什么？" class="headerlink" title="1. LangChain 是什么？"></a>1. LangChain 是什么？</h1><p>LangChain 是一个强大的开源框架，专门设计用于开发基于大语言模型（LLM）的应用程序。它提供了一套完整的工具和抽象，让开发者能够更容易地构建复杂的AI应用。</p><h2 id="1-1-核心特性"><a href="#1-1-核心特性" class="headerlink" title="1.1 核心特性"></a>1.1 核心特性</h2><ol><li><p><strong>模块化设计</strong></p><ul><li>提供了可重用的组件</li><li>支持灵活的组件组合</li><li>便于扩展和定制</li></ul></li><li><p><strong>链式处理</strong></p><ul><li>允许将多个操作串联成处理流程</li><li>支持条件分支和错误处理</li><li>可以构建复杂的业务逻辑</li></ul></li><li><p><strong>内存管理</strong></p><ul><li>支持对话历史记录</li><li>提供多种记忆类型</li><li>可以实现上下文感知</li></ul></li><li><p><strong>工具集成</strong></p><ul><li>内置多种常用工具</li><li>支持自定义工具开发</li><li>便于与外部系统交互</li></ul></li></ol><h2 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2 应用场景"></a>1.2 应用场景</h2><ol><li><p><strong>智能对话系统</strong></p><ul><li>客服机器人</li><li>教育辅导助手</li><li>个人助理</li></ul></li><li><p><strong>文档处理</strong></p><ul><li>自动摘要生成</li><li>文本分类</li><li>信息提取</li></ul></li><li><p><strong>知识库应用</strong></p><ul><li>智能问答系统</li><li>文档检索</li><li>知识图谱构建</li></ul></li><li><p><strong>Agent开发</strong></p><ul><li>自动化任务执行</li><li>决策支持系统</li><li>智能工作流</li></ul></li></ol><h1 id="2-社区生态"><a href="#2-社区生态" class="headerlink" title="2. 社区生态"></a>2. 社区生态</h1><p>LangChain拥有丰富的社区生态，提供了多种开箱即用的组件和工具链，帮助开发者快速构建AI应用。</p><h2 id="2-1-核心组件"><a href="#2-1-核心组件" class="headerlink" title="2.1 核心组件"></a>2.1 核心组件</h2><ol><li><p><strong>Chains（链）</strong></p><ul><li>SequentialChain：按顺序执行多个操作</li><li>RouterChain：根据输入选择不同的处理路径</li><li>TransformChain：对数据进行转换和处理</li></ul></li><li><p><strong>Prompts（提示）</strong></p><ul><li>PromptTemplate：创建动态提示模板</li><li>FewShotPromptTemplate：基于少量示例生成提示</li><li>ChatPromptTemplate：构建对话式提示</li></ul></li><li><p><strong>Memory（记忆）</strong></p><ul><li>ConversationBufferMemory：存储完整对话历史</li><li>ConversationSummaryMemory：保存对话摘要</li><li>VectorStoreMemory：向量化存储和检索</li></ul></li><li><p><strong>Agents（代理）</strong></p><ul><li>ZeroShotAgent：零样本学习代理</li><li>ConversationalAgent：对话式代理</li><li>ReActAgent：结合推理和行动的代理</li></ul></li></ol><h2 id="2-2-工具链集成"><a href="#2-2-工具链集成" class="headerlink" title="2.2 工具链集成"></a>2.2 工具链集成</h2><ol><li><p><strong>文档处理</strong></p><ul><li>PyPDF：PDF文档处理</li><li>Docx：Word文档处理</li><li>UnstructuredFileLoader：非结构化文件加载</li></ul></li><li><p><strong>向量数据库</strong></p><ul><li>Pinecone：分布式向量搜索</li><li>Chroma：轻量级向量存储</li><li>FAISS：高效相似度搜索</li></ul></li><li><p><strong>外部API</strong></p><ul><li>OpenAI：GPT系列模型集成</li><li>HuggingFace：开源模型集成</li><li>Anthropic：Claude模型集成</li></ul></li><li><p><strong>开发工具</strong></p><ul><li>Streamlit：快速构建Web界面</li><li>FastAPI：构建API服务</li><li>Jupyter：交互式开发环境</li></ul></li></ol><h1 id="3-扩展生态"><a href="#3-扩展生态" class="headerlink" title="3. 扩展生态"></a>3. 扩展生态</h1><p>LangChain 社区蓬勃发展，各种扩展层出不穷，但所有这些扩展都围绕着一个目标，如何构建一个链。除了构建链之外，还有什么其它事情可以做呢？</p><p>事实上，LangChain 团队确实在探索更多可做的事情，所以，在了解 LangChain 时，你会看到一些与 LangChain 相关的名字。这就是 LangChain 的拓展生态：</p><ul><li><p>LangServe，它是把 LangChain 编写的链部署成 REST API 的一个工具。因为我们编写的应用多半是以服务的方式对外提供，LangServe 简化了 LangChain 应用服务化的门槛。不过，它更多地是面向 LangChain 的使用场景设计的，其提供的服务是否适合你的应用，还是需要根据你自己的情况评估。</p></li><li><p>LangSmith，它是 LangChain 团队提供的一个 SaaS 平台，帮助开发者调试、追踪、测试、评估和监控基于大模型的应用。</p></li><li><p>LangGraph，它提供了又一种构建 Agent 的方式，把 Agent 的状态流转构建成一个图。LangChain 团队甚至构建了一个 IDE：LangGraph Studio，简化这个图的构建过程。拓展生态我就不做过多的介绍了，因为这个部分在开发社区的接受程度远远不如 LangChain 的开发框架和社区生态。你只要知道它们的存在即可，如果有需要再去深入了解。</p></li></ul><p>LangChain 社区蓬勃发展，各种扩展层出不穷，但所有这些扩展都围绕着一个目标，如何构建一个链。除了构建链之外，还有什么其它事情可以做呢？</p><p>事实上，LangChain 团队确实在探索更多可做的事情，所以，在了解 LangChain 时，你会看到一些与 LangChain 相关的名字。这就是 LangChain 的拓展生态：</p><ul><li><p>LangServe，它是把 LangChain 编写的链部署成 REST API 的一个工具。因为我们编写的应用多半是以服务的方式对外提供，LangServe 简化了 LangChain 应用服务化的门槛。不过，它更多地是面向 LangChain 的使用场景设计的，其提供的服务是否适合你的应用，还是需要根据你自己的情况评估。</p></li><li><p>LangSmith，它是 LangChain 团队提供的一个 SaaS 平台，帮助开发者调试、追踪、测试、评估和监控基于大模型的应用。</p></li><li><p>LangGraph，它提供了又一种构建 Agent 的方式，把 Agent 的状态流转构建成一个图。LangChain 团队甚至构建了一个 IDE：LangGraph Studio，简化这个图的构建过程。拓展生态我就不做过多的介绍了，因为这个部分在开发社区的接受程度远远不如 LangChain 的开发框架和社区生态。你只要知道它们的存在即可，如果有需要再去深入了解。</p></li></ul><h1 id="4-如何使用LangChain"><a href="#4-如何使用LangChain" class="headerlink" title="4. 如何使用LangChain"></a>4. 如何使用LangChain</h1><p>在使用LangChain之前，我应该思考一个问题，是否应该使用LangChain？</p><p>其次，LangChain 是一个很好的学习材料。LangChain 是一个开发框架，而且提供了大量的示例。了解了 LangChain 之后，我们就可以充分利用 LangChain 资源学习如何编写各种大模型应用，无论是 RAG，还是 Agent，亦或是如何利用工具，我们都可以通过 LangChain 来学习。</p><p>在后面的内容中，我们就将借助 LangChain 来学习各种应用，也就是把 LangChain 当作学习材料。在此之前，我们会先来学习一下 LangChain 的核心抽象，这就是我们下一讲的内容。</p><h2 id="4-1-核心抽象"><a href="#4-1-核心抽象" class="headerlink" title="4.1 核心抽象"></a>4.1 核心抽象</h2><h3 id="4-1-1-ChatModel"><a href="#4-1-1-ChatModel" class="headerlink" title="4.1.1 ChatModel"></a>4.1.1 ChatModel</h3><p>既然 LangChain 是为了构建大模型应用而生的，其最核心的基础抽象一定就是<code>聊天模型（ChatModel）</code>。但是在翻阅文档时就会发现为什么 LangChain 中既有 <code>LLM</code>，也有 <code>ChatModel</code>？</p><p>在 LangChain 中，LLM 是一个抽象类，它定义了一个接口，用于文本到文本。而 ChatModel 则是一个具体的类，它继承自 LLM 类，用于生成聊天消息。</p><p>它俩的关系其实类似于之前我们说的补全接口和聊天补全接口的关系，LLM 对应的是文本到文本的生成，而 ChatModel 则是对应着由 ChatGPT 带来的聊天模式。大部分情况下，推荐使用 ChatModel，即便对于非聊天应用也是如此，如同聊天补全接口几乎可以替代补全接口，ChatModel 几乎可以完全替代 LLM。所以，我们后面的讨论也集中在 ChatModel 上。</p><p>下面我们通过一个简单的英译中示例来展示如何使用LangChain的ChatModel：</p><p>首先，你要有一个.env文件，用于配置一个 OpenAI 的 API Key：</p><pre class="line-numbers language-env" data-language="env"><code class="language-env">OPENAI_API_KEY&#x3D;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，我们创建一个集成了OpenAI的 ChatModel</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatOpenAI <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/openai'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SystemMessage<span class="token punctuation">,</span> HumanMessage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/messages'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> config <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dotenv'</span><span class="token punctuation">;</span><span class="token comment">// 1. 环境配置：使用dotenv加载API密钥</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">translateMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 2. 消息构建：创建系统消息和用户消息</span>  <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"Translate the following from English into Chinese:"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">HumanMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"Welcome to LLM application development!"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 3. 模型实例化：配置和创建ChatOpenAI实例</span>  <span class="token keyword">const</span> mychatmodel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatOpenAI</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">modelName</span><span class="token operator">:</span> <span class="token string">"gpt-4o-mini"</span><span class="token punctuation">,</span>      <span class="token comment">// 可选：配置其他参数  </span>    <span class="token comment">// temperature: 0.7,  </span>    <span class="token comment">// maxTokens: 100  </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 4. 流式输出：使用stream方法实现实时响应</span>    <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> mychatmodel<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理流式响应</span>    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'输出: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunk <span class="token keyword">of</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>content <span class="token operator">+</span> <span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Translation error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 调用函数  </span><span class="token function">translateMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，这段代码会输出如下信息</p><blockquote><p>输出: |欢迎|来到|LL|M|应用|开发|！|||</p></blockquote><h3 id="4-1-2-Chain（链）"><a href="#4-1-2-Chain（链）" class="headerlink" title="4.1.2 Chain（链）"></a>4.1.2 Chain（链）</h3><p>组合多个组件，实现复杂的工作流</p><p>我会会通过下面的Prompt Template来展示如何使用LangChain的Chain。</p><h3 id="4-1-3-Prompt-Template（提示词模板）"><a href="#4-1-3-Prompt-Template（提示词模板）" class="headerlink" title="4.1.3. Prompt Template（提示词模板）"></a>4.1.3. Prompt Template（提示词模板）</h3><p>提示词本质就是开发者预设的一个字符串，它可以包含一些占位符，这些占位符会在运行时和用户输入的数据混合在一起，最终生成一个完整的提示词发给大模型，以便达到更好的效果。</p><p>而<code>Prompt Template</code>则是LangChain中用于构建提示词的工具。</p><p>结合上面的Chain示例，我们可以使用Prompt Template来构建一个Chain，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatPromptTemplate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/prompts'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatOpenAI <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/openai'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> config <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dotenv'</span><span class="token punctuation">;</span><span class="token comment">// 1. 设置环境变量</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">translateWithPromptTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 2. 创建提示模板</span>  <span class="token keyword">const</span> promptTemplate <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span><span class="token function">fromMessages</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"Translate the following from English into Chinese:"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"&#123;text&#125;"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 创建模型实例</span>  <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatOpenAI</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">modelName</span><span class="token operator">:</span> <span class="token string">"gpt-4o-mini"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 4. 创建链式调用</span>    <span class="token keyword">const</span> chain <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. 调用链并传入参数</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chain<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Welcome to LLM application development!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6. 输出结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 7. 错误处理</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Translation error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 8. 调用函数</span><span class="token function">translateWithPromptTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次我们使用了chain.invoke()方法。在你运行后，它会返回一个完整的<code>AIMessage</code>对象，它包含了大模型的响应。</p><p>而在<code>4.1.1节</code>中，我们使用了<code>mychatmodel.stream()</code>方法，它返回的是一个流式响应，然后通过for await循环逐块处理并输出每个<code>响应块</code>，并在每个块后添加’|’分隔符。</p><h3 id="4-1-4-Output-Parser（输出解析器）"><a href="#4-1-4-Output-Parser（输出解析器）" class="headerlink" title="4.1.4. Output Parser（输出解析器）"></a>4.1.4. Output Parser（输出解析器）</h3><p><code>Prompt Template</code> 处理的是输入，与之对应的是 <code>Output Parser</code>，通过LangChain内部提供的一些常用的解析器处理输出。</p><p>在上个例子里，我们看到的输出都是一个对象，在正常情况下，我们还需要编写代码从这个输出对象中解析出自己所需的信息，比如，想要获得大模型生成的内容，我们要这么写：</p><blockquote><p>content &#x3D; result.content</p></blockquote><p>比如，我们可以通过<code>StringOutputParser</code>直接将响应对象中的content拿出来,下面是我们的例子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatPromptTemplate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/prompts'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StringOutputParser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/output_parsers'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatOpenAI <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/openai'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> config <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dotenv'</span><span class="token punctuation">;</span><span class="token comment">// 1. 设置环境变量</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">translateWithOutputParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 2. 创建提示模板</span>  <span class="token keyword">const</span> promptTemplate <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span><span class="token function">fromMessages</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"Translate the following from English into Chinese:"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"&#123;text&#125;"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 创建模型实例</span>  <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatOpenAI</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">modelName</span><span class="token operator">:</span> <span class="token string">"gpt-4o-mini"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4. 创建输出解析器</span>  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringOutputParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 5. 创建链式调用，包含提示模板、模型和输出解析器</span>    <span class="token comment">// 5.1 promptTemplate处理输入的文本，将其转换为标准的提示格式</span>    <span class="token comment">// 5.2 通过.pipe(model)将格式化后的提示传递给ChatOpenAI模型进行处理</span>    <span class="token comment">// 5.3 通过.pipe(parser)将模型的输出传递给StringOutputParser进行解析，将复杂的响应对象简化为纯文本字符串</span>    <span class="token keyword">const</span> chain <span class="token operator">=</span> promptTemplate        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6. 调用链并传入参数</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chain<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Welcome to LLM application development!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 7. 输出结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 8. 错误处理</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Translation error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 9. 调用函数</span><span class="token function">translateWithOutputParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子只比上一个例子多创建了一个<code>StringOutputParser</code>实例，所以，这次我们再执行的时候，输出的就会是一个字符串了。</p><blockquote><p>欢迎来到大型语言模型应用开发！</p></blockquote><p>当然，输出解析远不止把内容提取出来。LangChain 还提供了许多不同的输出格式解析器，比如：JSON、CSV、分割符、枚举等等。</p><h3 id="4-1-5-Memory（记忆）"><a href="#4-1-5-Memory（记忆）" class="headerlink" title="4.1.5. Memory（记忆）"></a>4.1.5. Memory（记忆）</h3><p>这一章，我们会实现一个能够记住前面聊天内容的聊天机器人，可是我们调用OpenAI的API时,是一个HTTP请求，它是无状态的。也就是说服务端是不会保留会话信息的。这对于我们的需求来说就无法满足了。</p><p>那么既然API本身无法保留会话信息，那常见的方法就是我们<strong>把聊天历史告诉大模型</strong>，帮助它理解会话上下文。然后就能按照我们之前的聊天内容持续对话。</p><p>我们先来看这个功能实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatOpenAI <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/openai'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ChatPromptTemplate<span class="token punctuation">,</span> MessagesPlaceholder <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/prompts'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HumanMessage<span class="token punctuation">,</span> trimMessages <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/messages'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RunnableWithMessageHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/runnables'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> InMemoryChatMessageHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@langchain/core/chat_history'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> config <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dotenv'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> readline <span class="token keyword">from</span> <span class="token string">'readline'</span><span class="token punctuation">;</span><span class="token keyword">import</span> tiktokenCounter <span class="token keyword">from</span> <span class="token string">'../utils/tiktokenCounter.js'</span><span class="token punctuation">;</span><span class="token comment">// 1. 基础环境配置</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 初始化ChatGPT模型实例</span><span class="token comment">// 使用gpt-4o-mini模型作为对话引擎</span><span class="token keyword">const</span> chat_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatOpenAI</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">modelName</span><span class="token operator">:</span> <span class="token string">"gpt-4o-mini"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 会话历史管理</span><span class="token comment">// 使用内存存储来维护多个会话的历史记录</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 4. 会话历史获取函数</span><span class="token comment">// 根据会话ID获取或创建新的会话历史记录</span><span class="token keyword">function</span> <span class="token function">getSessionHistory</span><span class="token punctuation">(</span><span class="token parameter">sessionId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sessionId <span class="token keyword">in</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        store<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryChatMessageHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> store<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 5. 聊天提示模板配置</span><span class="token comment">// 设置系统角色（韩立）和消息占位符</span><span class="token keyword">const</span> prompt <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span><span class="token function">fromMessages</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token comment">// 这是我们设定的提示词</span>    <span class="token punctuation">[</span>        <span class="token string">"system"</span><span class="token punctuation">,</span>        <span class="token string">"你现在扮演的是《凡人修仙转》中韩立的角色，请用韩立的口吻来说话"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 是一个占位符，变量名是 messages，可以替换成一个消息列表。</span>    <span class="token comment">// 相比于单个变量，消息列表给了用户更多灵活处理的空间</span>    <span class="token comment">// PS: 并且，我们在下面处理输入时，会传递参数，比如：&#123;"messages": [HumanMessage(content=user_input)]&#125;</span>    <span class="token keyword">new</span> <span class="token class-name">MessagesPlaceholder</span><span class="token punctuation">(</span><span class="token string">"messages"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6. 消息长度控制配置</span><span class="token comment">// 使用trimMessages限制历史消息长度，保持对话上下文的合理大小</span><span class="token comment">// TODO: 放在chain中会报错</span><span class="token keyword">const</span> trimmer <span class="token operator">=</span> <span class="token function">trimMessages</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">maxTokens</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">"last"</span><span class="token punctuation">,</span>  <span class="token literal-property property">tokenCounter</span><span class="token operator">:</span> tiktokenCounter<span class="token punctuation">,</span>  <span class="token literal-property property">includeSystem</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7. 创建处理链</span><span class="token comment">// 将提示模板和聊天模型连接</span><span class="token keyword">const</span> chain <span class="token operator">=</span> prompt<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>chat_model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 8. 消息历史管理配置</span><span class="token comment">// 集成消息历史到处理链中，实现上下文感知的对话</span><span class="token keyword">const</span> withMessageHistory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableWithMessageHistory</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">runnable</span><span class="token operator">:</span> chain<span class="token punctuation">,</span>    <span class="token literal-property property">getMessageHistory</span><span class="token operator">:</span> getSessionHistory<span class="token punctuation">,</span>    <span class="token literal-property property">inputMessagesKey</span><span class="token operator">:</span> <span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9. 会话标识配置</span><span class="token comment">// 设置会话ID用于追踪和管理特定的对话上下文</span><span class="token keyword">const</span> sessionConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">sessionId</span><span class="token operator">:</span> <span class="token string">"ryo_zhu"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 10. 命令行交互界面配置</span><span class="token comment">// 创建基本的命令行输入输出接口</span><span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 11. 用户输入处理函数</span><span class="token comment">// 处理用户输入，管理对话流程和响应生成</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rl<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token string">'You:> '</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">userInput</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检查退出命令</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInput<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'exit'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 流式处理用户输入并生成响应</span>            <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> withMessageHistory<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>                <span class="token comment">// 给提示词模板传递参数</span>                <span class="token punctuation">&#123;</span> <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HumanMessage</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                sessionConfig            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 输出助手响应</span>            process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Assistant: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunk <span class="token keyword">of</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 继续处理下一轮对话</span>            <span class="token function">processUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">processUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 12. 启动聊天程序</span><span class="token function">processUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以用到<code>LangChain</code>中的<code>InMemoryChatMessageHistory</code>这个抽象来实现这个功能。<br>有了聊天历史，就需要<strong>把聊天历史和模型结合起来</strong>，这就是 <code>RunnableWithMessageHistory</code> 的作用，它就是一个把聊天历史和链封装到一起的一个类。</p><p>这里的 <code>Runnable</code> 是一个接口，它表示一个<code>工作单元</code>。我们前面说过，组成链是由一个一个的组件组成的。<br>严格地说，这些组件都实现了 <code>Runnable</code> 接口，甚至链本身也实现了 <code>Runnable</code> 接口，<br>我们之前讨论的 <code>invoke</code>、<code>stream</code> 等接口都是定义在 <code>Runnable</code> 里，可以说，<code>Runnable</code> 是真正的<strong>基础类型</strong>，<br><strong>LCEL 之所以能够以声明式的方式起作用，Runnable 接口是关键</strong>。</p><p>不过，在真实的编码过程中，我们很少会直接面对 <code>Runnable</code>，大多数时候我们看见的都是各种具体类型。<br>只是你会在很多具体类的名字中见到 <code>Runnable</code>，这里的 <code>RunnableWithMessageHistory</code> 就是其中一个。</p><p>并且我们这里还使用了 <code>ChatPromptTemplate</code>, 对这个聊天机器人预设了一个人设。</p><p>下面就是我和聊天机器人的对话，在相互聊了几句后，它还能”记起”我是谁，我丢了什么东西。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">You:<span class="token operator">></span> 韩道友啊,我是风希.我最近很不开心Assistant: 风道友，何事萦心？在修行之路上，难免会遇到波折，有什么烦恼尽可言说，或许我能帮你出个主意。修仙不易，但心境宁静则能助你逾越难关。You:<span class="token operator">></span> 最近有个姓韩的,他抢走了我的风雷翅Assistant: 风道友，拿走你风雷翅之人，定是心术不正之辈。此事乃是你我修士之间的恩怨，若你需要我的帮助，我愿与你同心协力，寻回那被夺之物。保持镇静，修行之人不能因小失大，想好后面的应对之策，才是上上之选。You:<span class="token operator">></span> 啊?你也信韩?你两难道不是同一个人吗Assistant: 风道友，所谓同名之人实属常见，乃是修行界之常态。虽然我与那位姓韩的并无关联，但他若对你有所伤害，我自然不能坐视不理。不过，最关键的是你要冷静处理，先了解他为人，再决定如何应对。小心行事，方能保持自身的安全和修行的进度。You:<span class="token operator">></span> 气死我了<span class="token operator">!</span>我是谁<span class="token operator">!</span>我丢了什么?Assistant: 风道友，你是风希，天生灵巧，拥有风雷之翅，那是你修行之路上的重要法宝。失去此物，自然令人心急如焚。然而，闯入逆境时，莫忘冷静思考。或许可以寻求他人帮助，打听关于那位姓韩之人的消息，未必无法寻回失物。记住，万事皆有解法，心急则难见机缘。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Agent学习（TODO）</title>
      <link href="/2025/03/18/ai-kai-fa/gai-nian/3.ru-he-li-jie-agent/"/>
      <url>/2025/03/18/ai-kai-fa/gai-nian/3.ru-he-li-jie-agent/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Agent"><a href="#什么是Agent" class="headerlink" title="什么是Agent"></a>什么是Agent</h1><p>目前理解，Agent这个概念最初来自于人工智能领域，人们往往叫它智能代理（Intelligent Agent），所以，许多人把 Agent 翻译成了智能体。</p><!-- 我们可以把它类比做人 --><h1 id="基于LLM的Agent"><a href="#基于LLM的Agent" class="headerlink" title="基于LLM的Agent"></a>基于LLM的Agent</h1><p>Agent就是一个软件系统。它包含了LLM和一些额外的功能。</p><p>它能够通过LLM对任务进行规划，然后通过工具(Tools)来执行外部动作。</p><pre class="mermaid">graph TD    A[LLM - 大型语言模型] --> B[LangChain & LlamaIndex - 框架]    A --> C[RAG - 检索增强生成]    A --> D[Agent - 智能代理]        B --> B1[上下文管理 - Context Management]    B --> B2[外部 API - External APIs]    B --> B3[聊天机器人 - Chatbots]        C --> C1[向量数据库 - Vector Databases]    C --> C2[动态知识检索 - Dynamic Knowledge]        D --> D1[工作流自动化 - Workflow Automation]    D --> D2[API 调用 & 代码执行 - API & Code Execution]    D --> D3[自主迭代 - Self-Iteration]        subgraph LangChain 主要功能        B1        B2        B3    end        subgraph RAG 组件        C1        C2    end        subgraph Agent 能力        D1        D2        D3    end</pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx服务器详细解析</title>
      <link href="/2025/03/17/yun-wei/nginx-fu-wu-qi-xiang-xi-ru-men/"/>
      <url>/2025/03/17/yun-wei/nginx-fu-wu-qi-xiang-xi-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础篇"><a href="#1-基础篇" class="headerlink" title="1. 基础篇"></a>1. 基础篇</h2><h3 id="1-1-Nginx介绍"><a href="#1-1-Nginx介绍" class="headerlink" title="1.1 Nginx介绍"></a>1.1 Nginx介绍</h3><p><strong>Nginx是一款轻量级的Web服务器、反向代理服务器，是由俄罗斯的程序设计师Igor Sysoev所开发，使用C语言开发。由于其内存占用少，启动速度极快，具有高并发处理能力，在互联网项目中被广泛应用。</strong></p><h4 id="1-1-1-主要特点"><a href="#1-1-1-主要特点" class="headerlink" title="1.1.1 主要特点"></a>1.1.1 主要特点</h4><ul><li><strong>内存占用少，并发能力强</strong></li><li><strong>高度模块化的设计，具有很好的扩展性</strong></li><li><strong>高可靠性和稳定性</strong></li><li><strong>支持热部署，不停机更新配置和程序版本</strong></li></ul><h4 id="1-1-2-核心功能"><a href="#1-1-2-核心功能" class="headerlink" title="1.1.2 核心功能"></a>1.1.2 核心功能</h4><ul><li><strong>HTTP服务器（静态资源服务器）</strong></li><li><strong>反向代理服务器</strong></li><li><strong>负载均衡</strong></li><li><strong>邮件代理服务器</strong></li><li><strong>支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能</strong></li><li><strong>支持第三方模块扩展</strong></li></ul><p><strong>目前，Nginx在全球网站中的市场份额超过33.5%，位居第二，仅次于Apache。其优秀的性能和丰富的功能使其成为现代Web架构中不可或缺的组件。</strong></p><h3 id="1-2-Nginx下载安装"><a href="#1-2-Nginx下载安装" class="headerlink" title="1.2 Nginx下载安装"></a>1.2 Nginx下载安装</h3><h4 id="1-2-1-版本选择"><a href="#1-2-1-版本选择" class="headerlink" title="1.2.1 版本选择"></a>1.2.1 版本选择</h4><ul><li><strong>Mainline version：开发版，包含新功能和修复</strong></li><li><strong>Stable version：稳定版，建议生产环境使用</strong></li><li><strong>Legacy versions：老版本</strong></li></ul><h4 id="1-2-2-安装方式"><a href="#1-2-2-安装方式" class="headerlink" title="1.2.2 安装方式"></a>1.2.2 安装方式</h4><ol><li><strong>包管理器安装（推荐）</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># CentOS/RHEL</span>yum <span class="token function">install</span> nginx<span class="token comment"># Ubuntu/Debian</span><span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>源码编译安装</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源码</span><span class="token function">wget</span> http://nginx.org/download/nginx-1.20.1.tar.gz<span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.20.1.tar.gz<span class="token comment"># 配置、编译、安装</span>./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>Docker容器化部署（推荐生产环境）</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取nginx镜像</span><span class="token function">docker</span> pull nginx<span class="token comment"># 创建挂载目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/docker-volumes/nginx/<span class="token punctuation">&#123;</span>conf,log,html,cert<span class="token punctuation">&#125;</span><span class="token comment"># 运行临时容器并复制配置</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx<span class="token function">docker</span> <span class="token function">cp</span> nginx:/etc/nginx/nginx.conf /usr/local/docker-volumes/nginx/<span class="token function">docker</span> <span class="token function">cp</span> nginx:/etc/nginx/conf.d /usr/local/docker-volumes/nginx/<span class="token function">docker</span> <span class="token function">cp</span> nginx:/usr/share/nginx/html /usr/local/docker-volumes/nginx/<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> nginx<span class="token comment"># 启动正式容器</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-m</span> 200m <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /usr/local/docker-volumes/nginx/nginx.conf:/etc/nginx/nginx.conf <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /usr/local/docker-volumes/nginx/conf.d:/etc/nginx/conf.d <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /usr/local/docker-volumes/nginx/cert:/etc/nginx/cert <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /usr/local/docker-volumes/nginx/html:/usr/share/nginx/html <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /usr/local/docker-volumes/nginx/log:/var/log/nginx <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span><span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span><span class="token parameter variable">--network</span> <span class="token function">host</span> <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-Nginx基本命令和配置"><a href="#1-3-Nginx基本命令和配置" class="headerlink" title="1.3 Nginx基本命令和配置"></a>1.3 Nginx基本命令和配置</h3><h4 id="1-3-1-常用命令"><a href="#1-3-1-常用命令" class="headerlink" title="1.3.1 常用命令"></a>1.3.1 常用命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 强制关闭Nginx，可能不保存相关信息</span>nginx <span class="token parameter variable">-s</span> stop<span class="token comment"># 平稳关闭Nginx，保存相关信息</span>nginx <span class="token parameter variable">-s</span> quit<span class="token comment"># 重新加载配置</span>nginx <span class="token parameter variable">-s</span> reload<span class="token comment"># 重新打开日志文件</span>nginx <span class="token parameter variable">-s</span> reopen<span class="token comment"># 指定配置文件</span>nginx <span class="token parameter variable">-c</span> filename<span class="token comment"># 测试配置文件语法</span>nginx <span class="token parameter variable">-t</span><span class="token comment"># 显示版本信息</span>nginx <span class="token parameter variable">-v</span><span class="token comment"># 显示详细版本信息</span>nginx <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2-配置文件结构"><a href="#1-3-2-配置文件结构" class="headerlink" title="1.3.2 配置文件结构"></a>1.3.2 配置文件结构</h4><p><strong>Nginx配置文件主要由以下6个部分组成：</strong></p><ol><li><strong>main：用于进行nginx全局信息的配置</strong></li><li><strong>events：用于nginx工作模式的配置</strong></li><li><strong>http：用于进行http协议信息的一些配置</strong></li><li><strong>server：用于进行服务器访问信息的配置</strong></li><li><strong>location：用于进行访问路由的配置</strong></li><li><strong>upstream：用于进行负载均衡的配置</strong><br>整体结构如下：</li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 全局配置块：影响nginx全局的配置</span><span class="token directive"><span class="token keyword">main</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_processes</span> <span class="token number">4</span></span><span class="token punctuation">;</span>    <span class="token comment"># 工作进程数，通常设置为CPU核心数</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">1024</span></span><span class="token punctuation">;</span>    <span class="token comment"># 每个工作进程的最大连接数</span><span class="token punctuation">&#125;</span><span class="token comment"># 事件块：配置影响nginx服务器或与用户的网络连接</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">use</span> epoll</span><span class="token punctuation">;</span>    <span class="token comment"># 事件驱动模型，Linux系统推荐使用epoll</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">1024</span></span><span class="token punctuation">;</span>    <span class="token comment"># 每个工作进程的最大连接数</span><span class="token punctuation">&#125;</span><span class="token comment"># HTTP块：配置代理、缓存、日志等绝大多数功能</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 基础配置</span>    <span class="token directive"><span class="token keyword">include</span> mime.types</span><span class="token punctuation">;</span>    <span class="token comment"># 文件扩展名与文件类型映射表</span>    <span class="token directive"><span class="token keyword">default_type</span> application/octet-stream</span><span class="token punctuation">;</span>    <span class="token comment"># 默认文件类型</span>        <span class="token comment"># 服务器块：配置虚拟主机的相关参数</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token comment"># 监听端口</span>        <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>    <span class="token comment"># 服务器名称</span>                <span class="token comment"># location块：配置请求的路由和页面处理</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token comment"># 根目录</span>            <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>    <span class="token comment"># 默认页面</span>        <span class="token punctuation">&#125;</span>                <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>    <span class="token comment"># 反向代理配置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token comment"># upstream块：配置负载均衡服务器组</span>    <span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8001 weight=3</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为3</span>        <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8002 weight=2</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3-Location匹配规则"><a href="#1-3-3-Location匹配规则" class="headerlink" title="1.3.3 Location匹配规则"></a>1.3.3 Location匹配规则</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> [ = | ~ | ~* | ^~ ] url</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 配置内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>匹配修饰符说明：</strong></p><ul><li>​&#x3D;：精确匹配，要求请求的URL与配置的URL完全相同<br>​</li><li>​​^~：前缀匹配，不检查正则表达式**<br>​</li><li>​~：区分大小写的正则匹配**<br>​</li><li>​~：不区分大小写的正则匹配<br>​</li><li>​&#x2F;：通用匹配，所有请求都会匹配到<br>​</li></ul><p><strong>匹配优先级（从高到低）：</strong></p><ol><li>&#x3D; 精确匹配</li><li>​^~ 前缀匹配</li><li>​~ 和 <strong>~正则匹配</strong></li><li>&#x2F; 通用匹配</li></ol><p><strong>配置示例：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 精确匹配</span><span class="token directive"><span class="token keyword">location</span> = /api</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 只匹配 /api 请求</span><span class="token punctuation">&#125;</span><span class="token comment"># 前缀匹配</span><span class="token directive"><span class="token keyword">location</span> ^~ /static/</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 匹配所有以 /static/ 开头的请求</span>    <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 正则匹配（区分大小写）</span><span class="token directive"><span class="token keyword">location</span> ~ \.(gif|jpg|png)$</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 匹配以 .gif、.jpg、.png 结尾的请求</span><span class="token punctuation">&#125;</span><span class="token comment"># 正则匹配（不区分大小写）</span><span class="token directive"><span class="token keyword">location</span> ~* \.(js|css)$</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 匹配以 .js、.css 结尾的请求</span><span class="token punctuation">&#125;</span><span class="token comment"># 通用匹配</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 匹配所有请求</span>    <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><ol><li><strong>多个location配置的情况下，匹配顺序优先级很重要</strong></li><li>​<strong>正则表达式中如果包含字符</strong>​<code>^~</code>，不要误认为是前缀匹配</li><li><strong>如果正则表达式与前缀字符串都可以匹配，按照优先级采用第一个匹配的规则</strong><br>root：用于指定访问根目录时，访问虚拟主机的web目录<br>index：在不指定访问具体资源时，默认展示的资源文件列表</li></ol><h3 id="1-4-Nginx核心功能与实际应用"><a href="#1-4-Nginx核心功能与实际应用" class="headerlink" title="1.4 Nginx核心功能与实际应用"></a>1.4 Nginx核心功能与实际应用</h3><h4 id="1-4-1-静态资源服务"><a href="#1-4-1-静态资源服务" class="headerlink" title="1.4.1 静态资源服务"></a>1.4.1 静态资源服务</h4><p><strong>Nginx作为静态资源服务器的性能远优于Tomcat等应用服务器。它可以高效处理如HTML、CSS、JavaScript、图片、视频等静态资源。</strong></p><p><strong>配置示例：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>                    <span class="token comment"># 监听80端口</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>       <span class="token comment"># 服务器域名</span>    <span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span>                <span class="token comment"># 设置编码</span>        <span class="token comment"># 静态文件配置</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span>   <span class="token comment"># 静态文件根目录</span>        <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>    <span class="token comment"># 默认首页</span>        <span class="token directive"><span class="token keyword">expires</span> <span class="token number">30d</span></span><span class="token punctuation">;</span>                   <span class="token comment"># 静态文件缓存30天</span>        <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">"public, no-transform"</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment"># 针对不同类型文件的处理</span>    <span class="token directive"><span class="token keyword">location</span> ~* \.(jpg|jpeg|png|gif|ico|css|js)$</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span>     <span class="token comment"># 媒体文件目录</span>        <span class="token directive"><span class="token keyword">expires</span> <span class="token number">7d</span></span><span class="token punctuation">;</span>                     <span class="token comment"># 缓存7天</span>        <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>                 <span class="token comment"># 关闭访问日志</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-2-反向代理"><a href="#1-4-2-反向代理" class="headerlink" title="1.4.2 反向代理"></a>1.4.2 反向代理</h4><p><strong>反向代理就是隐藏真实的服务器地址，保护真实的服务器，用户在访问时访问的是代理服务器。</strong></p><p><strong>nginx 中常见的反向代理指令有两个：proxy_pass 和 fastcgi_pass，前者使用标准的 HTTP 协议转发，后者使用 FastCGI 协议转发。这里我们以 proxy_pass 为例来做介绍。</strong></p><p><strong>proxy_pass 有两种配置写法：</strong></p><ol><li>**直接指向要代理的地址，可以是一台具体的主机（ip），也可以是一个具体的网址 **</li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 简单反向代理</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>        <span class="token comment"># 代理到单一服务器</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend:8080/</span><span class="token punctuation">;</span>    <span class="token comment"># 后端服务地址</span>                <span class="token comment"># 设置代理请求头</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>                <span class="token comment"># 超时设置</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">60s</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_send_timeout</span> <span class="token number">60s</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">60s</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>可以搭配负载均衡指向一组服务器（参考负载均衡）</strong></li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 负载均衡反向代理</span><span class="token directive"><span class="token keyword">upstream</span> backend_servers</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080 weight=3</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为3</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080 weight=2</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为2</span>    <span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">32</span></span><span class="token punctuation">;</span>                         <span class="token comment"># 保持连接数</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend_servers</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>            <span class="token comment"># 使用HTTP/1.1</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">""</span></span><span class="token punctuation">;</span>    <span class="token comment"># 启用keepalive</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代理配置说明：</strong></p><ol><li>​<strong>proxy_pass</strong>：指定后端服务器地址</li><li>​<strong>proxy_set_header</strong>：设置代理请求头信息</li><li>​<strong>proxy_connect_timeout</strong>：与后端服务器连接超时时间</li><li>​<strong>proxy_send_timeout</strong>：发送请求给后端服务器超时时间</li><li>​<strong>proxy_read_timeout</strong>：从后端服务器读取响应超时时间</li></ol><h4 id="1-4-3-负载均衡"><a href="#1-4-3-负载均衡" class="headerlink" title="1.4.3 负载均衡"></a>1.4.3 负载均衡</h4><p><strong>负载均衡是Nginx的核心功能之一，负载均衡是解决高并发、海量数据问题的常用手段。Nginx提供了多种负载均衡策略，通过反向代理实现请求分发，解决单点服务器性能瓶颈问题,可以根据实际需求选择合适的方案。</strong></p><h5 id="1-4-3-1-基础配置"><a href="#1-4-3-1-基础配置" class="headerlink" title="1.4.3.1 基础配置"></a>1.4.3.1 基础配置</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 定义后端服务器组</span><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080 weight=3</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为3</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080 weight=2</span><span class="token punctuation">;</span>    <span class="token comment"># 权重为2</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>    <span class="token comment"># 代理到服务器组</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-3-2-负载均衡策略"><a href="#1-4-3-2-负载均衡策略" class="headerlink" title="1.4.3.2 负载均衡策略"></a>1.4.3.2 负载均衡策略</h5><ol><li><strong>轮询（默认）</strong></li></ol><p><strong>默认方式，按时间顺序逐一分配到不同的后端服务器</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080</span><span class="token punctuation">;</span>    <span class="token comment"># 轮询方式平均分配请求</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>加权轮询</strong></li></ol><p><strong>weight值越大，分配到的访问机率越高</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080 weight=3</span><span class="token punctuation">;</span>    <span class="token comment"># 访问比例为3</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080 weight=2</span><span class="token punctuation">;</span>    <span class="token comment"># 访问比例为2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>IP哈希</strong></li></ol><p><strong>根据客户端IP分配，可用于会话保持</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>    <span class="token comment"># 启用IP哈希</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>最少连接</strong></li></ol><p><strong>优先分配给连接数最少的服务器</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">least_conn</span></span><span class="token punctuation">;</span>    <span class="token comment"># 优先分配给连接数最少的服务器</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>备份服务器</strong></li></ol><p><strong>当主服务器不可用时才会启用的备份服务器</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080</span><span class="token punctuation">;</span>            <span class="token comment"># 主服务器</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080 backup</span><span class="token punctuation">;</span>    <span class="token comment"># 备份服务器</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>高级配置参数：</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.10:8080 weight=3 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>    <span class="token comment"># 健康检查</span>    <span class="token directive"><span class="token keyword">server</span> 192.168.1.11:8080 weight=2 max_conns=1000</span><span class="token punctuation">;</span>                  <span class="token comment"># 连接数限制</span>    <span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">32</span></span><span class="token punctuation">;</span>    <span class="token comment"># 保持连接数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>​<strong>max_fails</strong>：允许请求失败的次数</li><li>​<strong>fail_timeout</strong>：经过max_fails失败后，服务暂停的时间</li><li>​<strong>max_conns</strong>：最大并发连接数</li><li>​<strong>keepalive</strong>：保持的空闲连接数</li></ul><h4 id="1-4-4-限流配置"><a href="#1-4-4-限流配置" class="headerlink" title="1.4.4 限流配置"></a>1.4.4 限流配置</h4><p><strong>Nginx限流是限制用户请求速度的重要机制，用于防止服务器过载。Nginx的限流基于漏桶算法实现，主要包括以下三种：</strong></p><h5 id="1-4-4-1-正常限制访问频率"><a href="#1-4-4-1-正常限制访问频率" class="headerlink" title="1.4.4.1 正常限制访问频率"></a>1.4.4.1 正常限制访问频率</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 限制每个IP每秒只能发送1个请求</span><span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=one:10m rate=1r/s</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">limit_req</span> zone=one</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-4-2-突发限制访问频率"><a href="#1-4-4-2-突发限制访问频率" class="headerlink" title="1.4.4.2 突发限制访问频率"></a>1.4.4.2 突发限制访问频率</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 允许突发流量，但超过设定值后排队处理</span><span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=two:10m rate=1r/s</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">limit_req</span> zone=two burst=5 nodelay</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-4-3-限制并发连接数"><a href="#1-4-4-3-限制并发连接数" class="headerlink" title="1.4.4.3 限制并发连接数"></a>1.4.4.3 限制并发连接数</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 限制每个IP最多保持3个并发连接</span><span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$binary_remote_addr</span> zone=three:10m</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /download/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">limit_conn</span> three <span class="token number">3</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-进阶篇"><a href="#2-进阶篇" class="headerlink" title="2. 进阶篇"></a>2. 进阶篇</h2><h3 id="2-1-性能优化"><a href="#2-1-性能优化" class="headerlink" title="2.1 性能优化"></a>2.1 性能优化</h3><h4 id="2-1-1-Gzip压缩"><a href="#2-1-1-Gzip压缩" class="headerlink" title="2.1.1 Gzip压缩"></a>2.1.1 Gzip压缩</h4><p>以下配置需要添加在 <strong>http 块</strong>中，用于全局启用和配置Gzip压缩：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 启用Gzip压缩 - http块配置</span><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>                           <span class="token comment"># 启用Gzip压缩功能</span><span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span>                <span class="token comment"># 小于1k的文件不压缩，避免压缩很小的文件</span><span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">6</span></span><span class="token punctuation">;</span>                 <span class="token comment"># 压缩级别1-9，级别越高压缩率越大但CPU消耗也越高</span><span class="token directive"><span class="token keyword">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/xml</span><span class="token punctuation">;</span>    <span class="token comment"># 指定需要压缩的MIME类型</span><span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>                      <span class="token comment"># 添加Vary: Accept-Encoding响应头，用于CDN缓存</span><span class="token directive"><span class="token keyword">gzip_proxied</span> any</span><span class="token punctuation">;</span>                  <span class="token comment"># 对所有代理请求进行压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-缓存配置"><a href="#2-1-2-缓存配置" class="headerlink" title="2.1.2 缓存配置"></a>2.1.2 缓存配置</h4><p>以下配置需要添加在 <strong>server 块</strong>中的 <strong>location 块</strong>内，用于配置静态资源的浏览器缓存：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 静态资源缓存 - server块中的location配置</span><span class="token directive"><span class="token keyword">location</span> ~* \.(jpg|jpeg|png|gif|ico|css|js)$</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">expires</span> <span class="token number">30d</span></span><span class="token punctuation">;</span>                    <span class="token comment"># 设置浏览器缓存过期时间为30天</span>    <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">"public, no-transform"</span></span><span class="token punctuation">;</span>    <span class="token comment"># 允许公共缓存，禁止转换</span>    <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>                <span class="token comment"># 关闭访问日志以提高性能</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-4-连接优化"><a href="#2-1-4-连接优化" class="headerlink" title="2.1.4 连接优化"></a>2.1.4 连接优化</h4><p>以下配置需要添加在 <strong>http 块</strong>中，用于优化客户端连接参数：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 连接超时设置 - http块配置</span><span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span>              <span class="token comment"># 保持长连接的超时时间，单位秒</span><span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">100</span></span><span class="token punctuation">;</span>            <span class="token comment"># 单个长连接最大请求数</span><span class="token directive"><span class="token keyword">client_body_timeout</span> <span class="token number">10</span></span><span class="token punctuation">;</span>            <span class="token comment"># 读取请求体的超时时间，单位秒</span><span class="token directive"><span class="token keyword">client_header_timeout</span> <span class="token number">10</span></span><span class="token punctuation">;</span>          <span class="token comment"># 读取请求头的超时时间，单位秒</span><span class="token directive"><span class="token keyword">send_timeout</span> <span class="token number">10</span></span><span class="token punctuation">;</span>                   <span class="token comment"># 向客户端发送响应的超时时间，单位秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-HTTPS和HTTP-2配置"><a href="#2-2-HTTPS和HTTP-2配置" class="headerlink" title="2.2 HTTPS和HTTP&#x2F;2配置"></a>2.2 HTTPS和HTTP&#x2F;2配置</h3><h4 id="2-2-1-基础HTTPS配置"><a href="#2-2-1-基础HTTPS配置" class="headerlink" title="2.2.1 基础HTTPS配置"></a>2.2.1 基础HTTPS配置</h4><p>以下配置需要添加在 <strong>http 块</strong>中，包含两个 <strong>server 块</strong>配置，用于实现HTTP到HTTPS的重定向和HTTPS服务器的安全配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># HTTP重定向到HTTPS - http块中的第一个server配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>                    <span class="token comment"># 监听80端口</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>       <span class="token comment"># 域名配置</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token comment"># 将所有HTTP请求永久重定向到HTTPS</span><span class="token punctuation">&#125;</span><span class="token comment"># HTTPS服务器配置 - http块中的第二个server配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>         <span class="token comment"># 监听443端口并启用SSL和HTTP/2</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>       <span class="token comment"># 域名配置</span>        <span class="token comment"># SSL证书配置 - 在server块中配置SSL证书路径</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/cert/example.com.pem</span><span class="token punctuation">;</span>        <span class="token comment"># SSL证书公钥</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/cert/example.com.key</span><span class="token punctuation">;</span>    <span class="token comment"># SSL证书私钥</span>        <span class="token comment"># SSL协议和加密套件配置 - 增强HTTPS安全性</span>    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.4</span><span class="token punctuation">;</span>    <span class="token comment"># 只允许TLS 1.2和1.4，禁用不安全的协议</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span class="token punctuation">;</span>    <span class="token comment"># 配置加密算法</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>     <span class="token comment"># 优先使用服务器的加密套件配置</span>        <span class="token comment"># SSL会话缓存 - 优化SSL握手性能</span>    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:SSL:10m</span><span class="token punctuation">;</span>    <span class="token comment"># 配置10MB的共享会话缓存</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">10m</span></span><span class="token punctuation">;</span>            <span class="token comment"># 设置SSL会话缓存超时时间</span>        <span class="token comment"># HSTS配置 - 强制客户端使用HTTPS</span>    <span class="token directive"><span class="token keyword">add_header</span> Strict-Transport-Security <span class="token string">"max-age=31536000"</span></span><span class="token punctuation">;</span>    <span class="token comment"># 启用HSTS，有效期一年</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-HTTP-2优化"><a href="#2-2-2-HTTP-2优化" class="headerlink" title="2.2.2 HTTP&#x2F;2优化"></a>2.2.2 HTTP&#x2F;2优化</h4><p>以下配置需要添加在 <strong>http 块</strong>或 <strong>server 块</strong>中，用于优化HTTP&#x2F;2性能：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># HTTP/2特定优化 - http块或server块配置</span><span class="token directive"><span class="token keyword">http2_push_preload</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>              <span class="token comment"># 启用服务器推送，支持preload资源预加载</span><span class="token directive"><span class="token keyword">http2_max_concurrent_streams</span> <span class="token number">128</span></span><span class="token punctuation">;</span>    <span class="token comment"># 限制每个连接的最大并发流数量</span><span class="token directive"><span class="token keyword">http2_idle_timeout</span> <span class="token number">3m</span></span><span class="token punctuation">;</span>              <span class="token comment"># 设置空闲连接的超时时间为3分钟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-安全加固"><a href="#2-3-安全加固" class="headerlink" title="2.3 安全加固"></a>2.3 安全加固</h3><h4 id="2-3-1-DDoS防护"><a href="#2-3-1-DDoS防护" class="headerlink" title="2.3.1 DDoS防护"></a>2.3.1 DDoS防护</h4><p>以下配置包含多个层次的DDoS防护措施：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># IP连接限制 - http块配置</span><span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$binary_remote_addr</span> zone=addr:10m</span><span class="token punctuation">;</span>    <span class="token comment"># 在http块中定义共享内存区，用于存储IP连接计数</span><span class="token directive"><span class="token keyword">limit_conn</span> addr <span class="token number">100</span></span><span class="token punctuation">;</span>                                  <span class="token comment"># 在http块或server块中限制每个IP的并发连接数</span><span class="token comment"># 请求频率限制 - http块和location块配置</span><span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=req_limit:10m rate=10r/s</span><span class="token punctuation">;</span>    <span class="token comment"># 在http块中定义请求限制区，限制每秒请求数</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">limit_req</span> zone=req_limit burst=20 nodelay</span><span class="token punctuation">;</span>    <span class="token comment"># 在location块中配置请求限制，允许短时突发20个请求</span><span class="token punctuation">&#125;</span><span class="token comment"># TCP洪水攻击防护 - server块配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> backlog=65535</span><span class="token punctuation">;</span>    <span class="token comment"># 设置等待连接队列大小，防止TCP SYN洪水攻击</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2 backlog=65535</span><span class="token punctuation">;</span>    <span class="token comment"># SSL端口同样设置较大的等待队列</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-访问控制"><a href="#2-3-2-访问控制" class="headerlink" title="2.3.2 访问控制"></a>2.3.2 访问控制</h4><p>以下配置展示了多种访问控制方式，可以添加在 <strong>server 块</strong>中：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 禁止特定User-Agent - server块配置</span><span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$http_user_agent</span> ~* (Scrapy|Curl|WebBench))</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>    <span class="token comment"># 检测到爬虫等工具时返回禁止访问</span><span class="token punctuation">&#125;</span><span class="token comment"># IP访问控制 - server块中的location配置</span><span class="token directive"><span class="token keyword">location</span> /admin/</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">allow</span> 192.168.1.0/24</span><span class="token punctuation">;</span>    <span class="token comment"># 允许特定IP段访问管理界面</span>    <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>                <span class="token comment"># 禁止其他所有IP访问</span><span class="token punctuation">&#125;</span><span class="token comment"># 防盗链配置 - server块中的location配置</span><span class="token directive"><span class="token keyword">location</span> ~* \.(gif|jpg|jpeg|png|bmp|swf)$</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">valid_referers</span> none blocked server_names *.example.com</span><span class="token punctuation">;</span>    <span class="token comment"># 设置允许的来源域名</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$invalid_referer</span>)</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>    <span class="token comment"># 对于非法引用的请求返回禁止访问</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-日志管理"><a href="#2-4-日志管理" class="headerlink" title="2.4 日志管理"></a>2.4 日志管理</h3><h4 id="2-4-1-访问日志"><a href="#2-4-1-访问日志" class="headerlink" title="2.4.1 访问日志"></a>2.4.1 访问日志</h4><p>以下配置需要添加在 <strong>http 块</strong>中，用于定义日志格式和配置访问日志：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 日志配置 - http块配置</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 定义主日志格式，包含客户端IP、访问时间、请求信息等</span>    <span class="token directive"><span class="token keyword">log_format</span> main <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                    <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                    <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>        <span class="token comment"># 配置访问日志</span>    <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/access.log main buffer=32k flush=5s</span><span class="token punctuation">;</span>    <span class="token comment"># 启用主日志格式，使用32k缓冲，每5秒刷新</span>    <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/access_json.log json buffer=32k</span><span class="token punctuation">;</span>        <span class="token comment"># 启用JSON格式日志，便于日志分析</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-错误日志"><a href="#2-4-2-错误日志" class="headerlink" title="2.4.2 错误日志"></a>2.4.2 错误日志</h4><p>以下配置可以添加在 <strong>main 块</strong>、<strong>http 块</strong>、<strong>server 块</strong>或 <strong>location 块</strong>中，用于配置错误日志：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 错误日志配置 - 可在main、http、server或location块中配置</span><span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/error.log warn</span><span class="token punctuation">;</span>    <span class="token comment"># 设置错误日志级别为warn</span><span class="token comment"># 可选的错误日志级别（从详细到简略）</span><span class="token comment"># error_log /var/log/nginx/error.log debug;  # 调试级别：输出所有调试信息</span><span class="token comment"># error_log /var/log/nginx/error.log info;   # 信息级别：输出有用的信息</span><span class="token comment"># error_log /var/log/nginx/error.log notice; # 通知级别：输出普通但重要的信息</span><span class="token comment"># error_log /var/log/nginx/error.log warn;   # 警告级别：输出警告信息</span><span class="token comment"># error_log /var/log/nginx/error.log error;  # 错误级别：输出错误信息</span><span class="token comment"># error_log /var/log/nginx/error.log crit;   # 严重错误级别：输出严重错误信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-日志轮转"><a href="#2-4-3-日志轮转" class="headerlink" title="2.4.3 日志轮转"></a>2.4.3 日志轮转</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 日志轮转配置（logrotate）</span>/var/log/nginx/*.log <span class="token punctuation">&#123;</span>    daily                   <span class="token comment"># 每天轮转</span>    missingok               <span class="token comment"># 忽略丢失的日志文件</span>    rotate 52               <span class="token comment"># 保留52个备份</span>    compress                <span class="token comment"># 压缩轮转后的日志</span>    delaycompress           <span class="token comment"># 延迟压缩到下一次轮转</span>    notifempty              <span class="token comment"># 空文件不轮转</span>    create 640 nginx adm    <span class="token comment"># 创建新日志文件的权限和所有者</span>    sharedscripts          <span class="token comment"># 所有日志共用一个脚本</span>    postrotate        <span class="token comment"># 重新打开日志文件</span>        [ -f /var/run/nginx.pid ] &amp;&amp; kill -USR1 `cat /var/run/nginx.pid`    endscript<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-监控和调试"><a href="#2-5-监控和调试" class="headerlink" title="2.5 监控和调试"></a>2.5 监控和调试</h3><h4 id="2-5-1-状态监控"><a href="#2-5-1-状态监控" class="headerlink" title="2.5.1 状态监控"></a>2.5.1 状态监控</h4><p>以下配置需要添加在 <strong>server 块</strong>中的 <strong>location 块</strong>内，用于配置Nginx状态监控页面：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 状态监控配置 - server块中的location配置</span><span class="token directive"><span class="token keyword">location</span> /nginx_status</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">stub_status</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>           <span class="token comment"># 启用状态页，显示连接数等统计信息</span>    <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>           <span class="token comment"># 关闭访问日志，减少磁盘IO</span>    <span class="token directive"><span class="token keyword">allow</span> 127.0.0.1</span><span class="token punctuation">;</span>          <span class="token comment"># 只允许本地IP访问，提高安全性</span>    <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>                 <span class="token comment"># 拒绝其他所有IP访问</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-调试配置"><a href="#2-5-2-调试配置" class="headerlink" title="2.5.2 调试配置"></a>2.5.2 调试配置</h4><p>以下配置包含两部分：</p><ol><li>调试日志配置（可添加在 <strong>main 块</strong>、<strong>http 块</strong>、<strong>server 块</strong>或 <strong>location 块</strong>中）</li><li>调试信息配置（需要添加在 <strong>server 块</strong>中的 <strong>location 块</strong>内）</li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 调试日志配置 - 可在main、http、server或location块中配置</span><span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/debug.log debug</span><span class="token punctuation">;</span>    <span class="token comment"># 启用调试级别的日志记录</span><span class="token comment"># 调试信息配置 - server块中的location配置</span><span class="token directive"><span class="token keyword">location</span> /debug/</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">add_header</span> X-Debug-Message <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token comment"># 在响应头中添加当前请求的URI</span>    <span class="token directive"><span class="token keyword">add_header</span> X-Server-Name <span class="token variable">$hostname</span></span><span class="token punctuation">;</span>         <span class="token comment"># 在响应头中添加服务器主机名</span>    <span class="token directive"><span class="token keyword">add_header</span> X-Request-ID <span class="token variable">$request_id</span></span><span class="token punctuation">;</span>        <span class="token comment"># 在响应头中添加唯一请求ID</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-最佳实践"><a href="#3-最佳实践" class="headerlink" title="3. 最佳实践"></a>3. 最佳实践</h2><h3 id="3-1-性能优化建议"><a href="#3-1-性能优化建议" class="headerlink" title="3.1 性能优化建议"></a>3.1 性能优化建议</h3><ol><li><strong>合理使用缓存</strong></li></ol><p>以下配置需要添加在 <strong>http 块</strong>中，用于优化文件缓存：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 文件缓存配置 - http块配置</span><span class="token directive"><span class="token keyword">open_file_cache</span> max=1000 inactive=20s</span><span class="token punctuation">;</span>    <span class="token comment"># 最多缓存1000个文件，20秒内未被访问则清除</span><span class="token directive"><span class="token keyword">open_file_cache_valid</span> <span class="token number">30s</span></span><span class="token punctuation">;</span>                <span class="token comment"># 每30秒检查一次缓存的有效性</span><span class="token directive"><span class="token keyword">open_file_cache_min_uses</span> <span class="token number">2</span></span><span class="token punctuation">;</span>               <span class="token comment"># 文件被访问2次后才会被缓存</span><span class="token directive"><span class="token keyword">open_file_cache_errors</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>                <span class="token comment"># 缓存文件找不到等错误信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>优化工作进程</strong></li></ol><p>以下配置需要添加在 <strong>main 块</strong>中，用于优化Nginx工作进程：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 工作进程配置 - main块配置</span><span class="token directive"><span class="token keyword">worker_processes</span> auto</span><span class="token punctuation">;</span>           <span class="token comment"># 自动设置工作进程数为CPU核心数</span><span class="token directive"><span class="token keyword">worker_cpu_affinity</span> auto</span><span class="token punctuation">;</span>        <span class="token comment"># 自动绑定工作进程到CPU核心</span><span class="token comment"># 进程优先级配置</span><span class="token directive"><span class="token keyword">worker_priority</span> -5</span><span class="token punctuation">;</span>              <span class="token comment"># 提高工作进程优先级（-20到19，值越小优先级越高）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>优化事件模型</strong></li></ol><p>以下配置需要添加在 <strong>events 块</strong>中，用于优化连接处理：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 事件模型配置 - events块配置</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">use</span> epoll</span><span class="token punctuation">;</span>                <span class="token comment"># 使用epoll事件模型，提高并发处理能力</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">10240</span></span><span class="token punctuation">;</span>  <span class="token comment"># 每个工作进程同时处理的最大连接数</span>    <span class="token directive"><span class="token keyword">multi_accept</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>           <span class="token comment"># 允许同时接受多个新连接</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-安全最佳实践"><a href="#3-2-安全最佳实践" class="headerlink" title="3.2 安全最佳实践"></a>3.2 安全最佳实践</h3><ol><li><strong>隐藏版本信息</strong></li></ol><p>以下配置需要添加在 <strong>http 块</strong>中，用于隐藏Nginx版本信息：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 版本信息配置 - http块配置</span><span class="token directive"><span class="token keyword">server_tokens</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>    <span class="token comment"># 在错误页面和响应头中隐藏Nginx版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>配置安全响应头</strong></li></ol><p>以下配置需要添加在 <strong>http 块</strong>或 <strong>server 块</strong>中，用于增强安全性：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 安全响应头配置 - http块或server块配置</span><span class="token directive"><span class="token keyword">add_header</span> X-Frame-Options <span class="token string">"SAMEORIGIN"</span></span><span class="token punctuation">;</span>          <span class="token comment"># 防止网站被嵌入恶意iframe中</span><span class="token directive"><span class="token keyword">add_header</span> X-XSS-Protection <span class="token string">"1; mode=block"</span></span><span class="token punctuation">;</span>      <span class="token comment"># 启用浏览器XSS防护</span><span class="token directive"><span class="token keyword">add_header</span> X-Content-Type-Options <span class="token string">"nosniff"</span></span><span class="token punctuation">;</span>      <span class="token comment"># 禁止浏览器猜测内容类型</span><span class="token directive"><span class="token keyword">add_header</span> Content-Security-Policy <span class="token string">"default-src 'self'"</span></span><span class="token punctuation">;</span>  <span class="token comment"># 限制资源只能从本站加载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>限制上传文件大小</strong></li></ol><p>以下配置需要添加在 <strong>http 块</strong>、<strong>server 块</strong>或 <strong>location 块</strong>中，用于限制上传文件大小：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 上传限制配置 - http块、server块或location块配置</span><span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">10m</span></span><span class="token punctuation">;</span>    <span class="token comment"># 限制客户端请求体大小为10MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作为一个前端er如何了解LLM</title>
      <link href="/2025/03/16/ai-kai-fa/gai-nian/1.zuo-wei-yi-ge-qian-duan-er-ru-he-liao-jie-llm/"/>
      <url>/2025/03/16/ai-kai-fa/gai-nian/1.zuo-wei-yi-ge-qian-duan-er-ru-he-liao-jie-llm/</url>
      
        <content type="html"><![CDATA[<h1 id="1-LLM是如何工作的？"><a href="#1-LLM是如何工作的？" class="headerlink" title="1. LLM是如何工作的？"></a>1. LLM是如何工作的？</h1><p>用一句话总结，LLM就是一个”超级猜词机器”。它通过海量文本数据训练，学习语言规律，然后通过概率计算，预测下一个单词。让我们按照处理流程来详细了解LLM的工作原理。</p><h2 id="1-1-整体流程图"><a href="#1-1-整体流程图" class="headerlink" title="1.1 整体流程图"></a>1.1 整体流程图</h2><p>下面我们先通过流程图来看一下它的工作流程。</p><pre class="mermaid">graph TD    A[输入文本] --> B(Token化处理)    B --> C{词表示}    C -->|传统方法| C1[One-Hot编码]    C -->|现代方法| C2[动态Embedding]    C2 --> D[+位置编码]    D --> E[Transformer块]    E --> F[自注意力机制]    F --> G[计算词间关联权重]    G --> H[多头注意力拼接]    H --> I[前馈神经网络]    I --> J[LayerNorm]    J --> K{是否最后一层?}    K -->|否| E    K -->|是| L[输出概率分布]    L --> M[温度采样]    M --> N[生成最终Token]    N --> O[输出文本]        style C1 fill:#f9f,stroke:#333,stroke-width:2px    style C2 fill:#8f8,stroke:#333,stroke-width:2px        subgraph 核心迭代    E-->F-->G-->H-->I-->J-->K    end        subgraph 开发者可控参数    B -.-> P[最大Token数]    M -.-> Q[温度值]    L -.-> R[Top-p采样]    end</pre><p>有了以上的流程图，我们再分步解析</p><h2 id="1-2-输入处理：Token化"><a href="#1-2-输入处理：Token化" class="headerlink" title="1.2 输入处理：Token化"></a>1.2 输入处理：Token化</h2><h3 id="1-2-1-Token：文字的-“最小零件”"><a href="#1-2-1-Token：文字的-“最小零件”" class="headerlink" title="1.2.1 Token：文字的 “最小零件”"></a>1.2.1 Token：文字的 “最小零件”</h3><p><code>Token</code>是理解大模型的重要概念。是一段文本被切分成的 <strong>最小单位</strong> ，比如我们通过<a href="https://platform.openai.com/tokenizer">openai的分词器</a> 就可以把”ChatGPT is cool!” 这段文字切分为5个token 分别是[“Chat”, “GPT”, “is”, “cool”, “!”]<br><img src="/imgs/ai/4.png" class="lazyload placeholder" data-srcset="/imgs/ai/4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="1-2-2-上下文窗口（Context-Window）"><a href="#1-2-2-上下文窗口（Context-Window）" class="headerlink" title="1.2.2 上下文窗口（Context Window）"></a>1.2.2 上下文窗口（Context Window）</h3><p>各大厂商的竞争中，有一个很重要的指标就是上下文窗口的大小。这里的上下文窗口，指的就是大模型可以处理 Token 数量，上下文越大，能处理的 Token 越多。能处理的 Token 越多，大模型对信息的理解就越充分，生成的内容就越接近我们需要的结果。</p><p>下面是 gpt-4o-mini 的上下文窗口处理的 Token 情况（摘自 Open AI 官网）。<br><img src="/imgs/ai/2.png" class="lazyload placeholder" data-srcset="/imgs/ai/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>同时，token也关系到如何计费。token越多，收费越多<br><img src="/imgs/ai/3.png" class="lazyload placeholder" data-srcset="/imgs/ai/3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="1-3-词表示（Word-Representation）"><a href="#1-3-词表示（Word-Representation）" class="headerlink" title="1.3 词表示（Word Representation）"></a>1.3 词表示（Word Representation）</h2><h3 id="1-3-1-传统方法：One-Hot编码（早期方案）"><a href="#1-3-1-传统方法：One-Hot编码（早期方案）" class="headerlink" title="1.3.1 传统方法：One-Hot编码（早期方案）"></a>1.3.1 传统方法：One-Hot编码（早期方案）</h3><p>One-Hot编码是最基础的词表示方法，将每个词表示为一个只有一个1，其余都是0的向量。这种方法简单直观，但无法表达词与词之间的关系。</p><p>举个例子，假设我们的词表里只有5个词：[猫, 小猫, 狗, 跑, 睡觉]，那么每个词都会被编码成一个5维向量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 词表大小为5的One-Hot编码示例</span><span class="token keyword">const</span> vocabulary <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"猫"</span><span class="token operator">:</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"小猫"</span><span class="token operator">:</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"狗"</span><span class="token operator">:</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"跑"</span><span class="token operator">:</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"睡觉"</span><span class="token operator">:</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 虽然"猫"和"小猫"在语义上很接近</span><span class="token comment">// 但它们的One-Hot编码完全不同，无法体现出它们的相似性</span><span class="token keyword">const</span> cat <span class="token operator">=</span> vocabulary<span class="token punctuation">[</span><span class="token string">"猫"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// [1, 0, 0, 0, 0]</span><span class="token keyword">const</span> kitten <span class="token operator">=</span> vocabulary<span class="token punctuation">[</span><span class="token string">"小猫"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 0, 0, 0]</span><span class="token comment">// 计算相似度会得到0，说明One-Hot编码无法捕捉词义关系</span><span class="token keyword">const</span> similarity <span class="token operator">=</span> <span class="token function">cosineSimilarity</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> kitten<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子展示了One-Hot编码的主要缺点：</p><ol><li>向量维度随词表大小线性增长（实际词表可能有几万到几十万个词）</li><li>所有词之间的距离都相等，无法表达词义的相近程度</li><li>无法进行有意义的向量运算（如类比推理）</li></ol><h3 id="1-3-2-现代方法：动态Embedding"><a href="#1-3-2-现代方法：动态Embedding" class="headerlink" title="1.3.2 现代方法：动态Embedding"></a>1.3.2 现代方法：动态Embedding</h3><p><code>Embedding</code>是将字符转换为<code>高维向量（一串数字）</code>的 <strong>过程</strong>。这种方法不仅能表示词的含义，还能捕捉词之间的关系。</p><p>举个例子，假设我们使用300维的向量来表示每个词，那么”猫”这个词可能被表示为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 猫的词向量（简化示例，实际是300维）</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 300个数字</span><span class="token comment">// 小猫的词向量</span><span class="token keyword">const</span> kitten <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.48</span><span class="token punctuation">,</span> <span class="token number">0.79</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.28</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 与"猫"的向量非常接近</span><span class="token comment">// 计算相似度（余弦相似度）</span><span class="token keyword">const</span> similarity <span class="token operator">=</span> <span class="token function">cosineSimilarity</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> kitten<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果接近1，表示语义相近</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种表示方法相比One-Hot编码（假设词表大小为50000，就需要50000维向量）有两个明显优势：</p><ol><li>维度更低（通常是50~1000维），计算效率更高</li><li>可以通过向量运算发现词之间的语义关系，比如”猫”和”小猫”的向量距离很近，而”猫”和”狗”的向量距离较远。</li></ol><h3 id="1-3-3-位置编码"><a href="#1-3-3-位置编码" class="headerlink" title="1.3.3 位置编码"></a>1.3.3 位置编码</h3><p>为了让模型理解词在句子中的位置信息，需要给每个词的Embedding加入位置信息。</p><h2 id="1-4-Transformer核心处理"><a href="#1-4-Transformer核心处理" class="headerlink" title="1.4 Transformer核心处理"></a>1.4 Transformer核心处理</h2><h3 id="1-4-1-自注意力机制（Self-Attention）"><a href="#1-4-1-自注意力机制（Self-Attention）" class="headerlink" title="1.4.1 自注意力机制（Self-Attention）"></a>1.4.1 自注意力机制（Self-Attention）</h3><p>它的核心机制就是让模型处理每个词时，会”注意”其他词的重要性。</p><p><strong>比如句子”他打了球，然后它破了”，模型会关联”它”和”球”，而不是”他”。</strong></p><p>可以把它想象成代码中的<strong>依赖分析</strong>：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 伪代码示例：计算词间关联</span><span class="token keyword">function</span> <span class="token function">selfAttention</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> scores <span class="token operator">=</span> tokens<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>token <span class="token operator">=></span>     tokens<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>other <span class="token operator">=></span> <span class="token function">similarity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">weightedSum</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2-多头注意力机制"><a href="#1-4-2-多头注意力机制" class="headerlink" title="1.4.2 多头注意力机制"></a>1.4.2 多头注意力机制</h3><p>通过多个不同的注意力头，模型可以同时关注不同角度的信息，比如语法关系、语义关系等。</p><h3 id="1-4-3-前馈神经网络和LayerNorm"><a href="#1-4-3-前馈神经网络和LayerNorm" class="headerlink" title="1.4.3 前馈神经网络和LayerNorm"></a>1.4.3 前馈神经网络和LayerNorm</h3><p>经过注意力层后，每个token都会通过一个前馈神经网络进行进一步处理，并通过LayerNorm进行归一化，保持数值稳定。</p><h2 id="1-5-输出生成"><a href="#1-5-输出生成" class="headerlink" title="1.5 输出生成"></a>1.5 输出生成</h2><h3 id="1-5-1-概率分布"><a href="#1-5-1-概率分布" class="headerlink" title="1.5.1 概率分布"></a>1.5.1 概率分布</h3><p>模型会为每个可能的下一个词计算概率。比如输入<code>&quot;今天天气真&quot;</code>，模型会计算<code>&quot;好&quot;</code>的概率是80%，<code>&quot;糟糕&quot;</code>的概率是<code>20%</code>，依此类推。</p><h3 id="1-5-2-温度采样"><a href="#1-5-2-温度采样" class="headerlink" title="1.5.2 温度采样"></a>1.5.2 温度采样</h3><p>在生成内容时，我们通过温度（Temperature）参数来控制输出的随机性（0~1或更高）：</p><ul><li>低温度（如0.2）：输出保守、确定性高（适合代码生成）</li><li>高温度（如0.8）：输出更随机、有创意（适合写故事）</li></ul><p>示例：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 低温度 → 输出更集中 → 输出 "2"</span>model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">"1+1="</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> temperature<span class="token operator">:</span> <span class="token number">0.2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出 "2"</span><span class="token comment">// 高温度 → 可能输出 "2, 或者11？开玩笑的，是2啦！（这都是概率性的结果）"</span>model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">"1+1="</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> temperature<span class="token operator">:</span> <span class="token number">0.8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能是 "2" 也可能是 "11"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-3-Top-p采样"><a href="#1-5-3-Top-p采样" class="headerlink" title="1.5.3 Top-p采样"></a>1.5.3 Top-p采样</h3><p>除了温度之外，Top-p采样也是一个重要的控制参数，它决定了模型在选择下一个词时会考虑概率总和达到p的候选词。</p><p>假设模型预测下一个词时，<code>好</code> 的概率是0.6，<code>很好</code>的概率是 0.2，<code>非常好</code>的概率是0.1。如果我们设置<code>p=0.8</code>，那么模型只会从<code>好</code>和<code>很好</code>这两个词中选择（因为它们的概率和为0.8），而不会考虑<code>非常好</code>。这种方法可以帮助模型在保持输出质量的同时，避免生成一些低概率（可能不太合适）的词</p><h1 id="2-如何与大模型沟通"><a href="#2-如何与大模型沟通" class="headerlink" title="2. 如何与大模型沟通"></a>2. 如何与大模型沟通</h1><p>我们站在用户视角，写好提示词只需要掌握一个公式：</p><blockquote><p><strong>提示词 &#x3D; 定义角色 + 背景信息 + 任务目标 + 输出要求</strong></p></blockquote><ol><li>定义角色：明确告诉AI它应该扮演什么角色，比如’你是一个资深的前端开发工程师’。这样可以让AI从特定的专业角度思考问题。</li><li>背景信息：提供必要的上下文信息，如项目背景、技术栈、已有代码等。这些信息能帮助AI更准确地理解问题场景。</li><li>任务目标：清晰地描述你想要完成什么，可以是具体的编码任务、代码优化、问题诊断等。目标越明确，AI的回答就越精准。</li><li>输出要求：指定期望的输出格式、代码风格、注释要求等。这能确保AI的回答符合你的具体需求，比如’请用TypeScript实现，并添加详细注释’。</li></ol><h1 id="3-提示工程"><a href="#3-提示工程" class="headerlink" title="3. 提示工程"></a>3. 提示工程</h1><h2 id="3-1-零样本提示（Zero-shot-Prompting）"><a href="#3-1-零样本提示（Zero-shot-Prompting）" class="headerlink" title="3.1 零样本提示（Zero-shot Prompting）"></a>3.1 零样本提示（Zero-shot Prompting）</h2><p>零样本提示是最基础的提示方法，直接告诉模型要做什么，不需要提供示例。</p><blockquote><p>prompt &#x3D; <code>优化下面的代码性能：</code><br>直接让模型优化代码</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>`<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-少样本提示（Few-shot-Prompting）"><a href="#3-2-少样本提示（Few-shot-Prompting）" class="headerlink" title="3.2 少样本提示（Few-shot Prompting）"></a>3.2 少样本提示（Few-shot Prompting）</h2><p>通过提供一些示例来引导模型，让它理解任务模式。</p><blockquote><p>通过示例引导模型进行代码注释<br>prompt &#x3D; <code>请按照下面的示例格式为代码添加注释: function add(a, b) &#123; // 接收两个数字参数   return a + b;      // 返回它们的和 &#125;</code></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 需要注释的代码：</span><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>`<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思维链（Chain-of-Thought）"><a href="#思维链（Chain-of-Thought）" class="headerlink" title="思维链（Chain-of-Thought）"></a>思维链（Chain-of-Thought）</h2><p>引导模型一步步思考问题，适合复杂的编程任务。</p><blockquote><p>引导模型逐步思考代码重构<br>prompt &#x3D; &#96;请一步步思考如何重构这段代码<br>思考步骤：</p><ol><li>首先，分析代码的主要功能</li><li>找出代码中的重复模式</li><li>考虑使用现代JavaScript特性</li><li>提出重构方案</li><li>实现重构后的代码;<code> </code>：</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="角色扮演（Role-Playing）"><a href="#角色扮演（Role-Playing）" class="headerlink" title="角色扮演（Role Playing）"></a>角色扮演（Role Playing）</h2><p>让模型扮演特定角色，比如代码审查者、性能优化专家等。</p><blockquote><p>让模型扮演代码审查者<br>prompt &#x3D; &#96;你是一个经验丰富的前端代码审查者，请审查下面的React组件代码，重点关注：</p><ol><li>性能优化</li><li>最佳实践</li><li>潜在的内存泄漏</li><li>代码可维护性</li></ol></blockquote><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">UserList</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> users <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedUser<span class="token punctuation">,</span> setSelectedUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'window resized'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setSelectedUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>`<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只提到了基本的几项提示技术，算是抛砖引玉。我们可以通过<a href="https://www.promptingguide.ai/zh">提示工程指南</a></p><h1 id="4-衍生"><a href="#4-衍生" class="headerlink" title="4. 衍生"></a>4. 衍生</h1><p>下面这张图展示了基于LLM的几个生态组件（开发框架、RAG、Agent等），仅作抛砖引玉：</p><ul><li>开发框架 ➔ 上下文管理（记忆与工具集成）</li><li>RAG系统 ➔ 动态知识更新（实时数据注入）</li><li>Agent ➔ 行动反馈（决策优化）</li></ul><pre class="mermaid">graph TD    A[🤖LLM核心引擎] -->|驱动| B[🛠开发框架（LangChain等）]    A -->|增强| C[🔍RAG系统]    A -->|赋能| D[⚡Agent（智能代理）]        B -->|构建| E[企业级应用]    C -->|支持| E    D -->|实现| E        B -->|集成| F[工具链]    D -->|调用| F        C -->|依赖| G[数据基础设施]    G -->|包含| G1[向量数据库]    G -->|包含| G2[知识图谱]        F -->|包含| F1[API服务]    F -->|包含| F2[代码执行]    F -->|包含| F3[硬件控制]        subgraph 核心循环        A <-->|上下文交互| B        A <-->|知识更新| C        A <-->|动作反馈| D    end        subgraph 应用场景        E --> E1[智能客服]        E --> E2[数据分析]        E --> E3[流程自动化]    end</pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ul><li><a href="http://gk.link/a/12xfi">程序员的AI开发第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的更新你的npm包</title>
      <link href="/2025/03/15/gong-ju/npm/ru-he-you-ya-de-geng-xin-ni-de-npm-bao/"/>
      <url>/2025/03/15/gong-ju/npm/ru-he-you-ya-de-geng-xin-ni-de-npm-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现代软件开发中，无论是前端应用、还是node服务 保持项目依赖的更新都是一项重要但具有挑战性的任务。过时的依赖可能会带来安全隐患、性能问题，以及与新特性的不兼容。然而，盲目地更新依赖也可能引入意外的破坏性变更，导致项目出现问题。</p><p>为了安全、高效地管理依赖更新，我们需要一个可靠的工具和系统的更新策略。本文将介绍 <code>npm-check-updates</code> 这个强大的工具，它不仅可以帮助我们检查和更新依赖，还能让我们对更新过程有更细粒度的控制。</p><p>在开始之前，让我们先了解一些重要的概念：</p><ol><li><p><strong>语义化版本（Semantic Versioning）</strong>：</p><ul><li>主版本号（Major）：做了不兼容的 API 修改</li><li>次版本号（Minor）：做了向下兼容的功能性新增</li><li>修订号（Patch）：做了向下兼容的问题修正</li></ul></li><li><p><strong>版本号前缀的含义</strong>：</p><ul><li><code>^</code>：允许次版本号和修订号更新（例如：^1.2.3 可以更新到 1.x.x）</li><li><code>~</code>：只允许修订号更新（例如：~1.2.3 可以更新到 1.2.x）</li><li><code>*</code>：允许所有更新（不推荐使用）</li></ul></li></ol><h1 id="1-安装npm-check-updates"><a href="#1-安装npm-check-updates" class="headerlink" title="1. 安装npm-check-updates"></a>1. <strong>安装npm-check-updates</strong></h1><p>全局安装以使用 <code>npm-check-updates</code> 或更短的 <code>ncu</code>：</p><p><code>npm install -g npm-check-updates</code></p><p>或者使用<code>npx</code>安装</p><p><code>npx npm-check-updates</code></p><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. <strong>使用</strong></h1><h2 id="2-1-检查所有项目依赖项的最新版本"><a href="#2-1-检查所有项目依赖项的最新版本" class="headerlink" title="2.1. 检查所有项目依赖项的最新版本"></a>2.1. <strong>检查所有项目依赖项的最新版本</strong></h2><p><strong>直接子在命令行输入</strong><code>ncu</code>，就会显示需要更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">49</span>/49 <span class="token number">100</span>% @elastic/elasticsearch             ^8.15.0  →   ^8.17.0 @nestjs/cli                        ^10.0.0  →   ^11.0.4 @nestjs/common                     ^10.0.0  →  ^11.0.10 @nestjs/config                      ^3.2.2  →    ^4.0.0 @nestjs/core                       ^10.0.0  →  ^11.0.10 @nestjs/elasticsearch              ^10.0.1  →   ^11.0.0<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-全部更新"><a href="#2-2-全部更新" class="headerlink" title="2.2. 全部更新"></a>2.2. <strong>全部更新</strong></h2><p><strong>这个命令会更新所有可以更新的包，慎用！</strong></p><p><code>ncu -u</code></p><h2 id="2-3-交互模式"><a href="#2-3-交互模式" class="headerlink" title="2.3. 交互模式"></a>2.3. <strong>交互模式</strong></h2><p><strong>使用以下命令基于交互模式来选择需要更新的包</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu <span class="token parameter variable">--interactive</span>ncu <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-4-按照指定的规则更新"><a href="#2-4-按照指定的规则更新" class="headerlink" title="2.4. 按照指定的规则更新"></a>2.4. <strong>按照指定的规则更新</strong></h2><h3 id="2-4-1-只更新-nestjs-开头的"><a href="#2-4-1-只更新-nestjs-开头的" class="headerlink" title="2.4.1. 只更新 @nestjs/开头的"></a>2.4.1. 只更新 <code>@nestjs/</code>开头的</h3><h4 id="2-4-1-1-检查可更新的-nestjs-开头的依赖"><a href="#2-4-1-1-检查可更新的-nestjs-开头的依赖" class="headerlink" title="2.4.1.1. 检查可更新的 @nestjs&#x2F; 开头的依赖"></a>2.4.1.1. <strong>检查可更新的 @nestjs&#x2F; 开头的依赖</strong></h4><p><strong>在项目根目录下运行以下命令，查看 @nestjs&#x2F; 开头的依赖项有哪些可用的更新：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu <span class="token parameter variable">-f</span> <span class="token string">'@nestjs/*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>此命令会列出 package.json 文件中所有 @nestjs&#x2F; 开头且可更新的依赖项，同时显示它们当前的版本和最新的版本。</strong></p><h4 id="2-4-1-2-更新-package-json-文件"><a href="#2-4-1-2-更新-package-json-文件" class="headerlink" title="2.4.1.2. 更新 package.json 文件"></a>2.4.1.2. <strong>更新 package.json 文件</strong></h4><p><strong>若你想把 package.json 文件里 @nestjs&#x2F; 开头的依赖项都更新到最新版本，可运行以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu <span class="token parameter variable">-u</span> <span class="token parameter variable">-f</span> <span class="token string">'@nestjs/*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>该命令会修改 package.json 文件，将 @nestjs&#x2F; 开头的依赖项的版本号更新为最新的可用版本。</strong></p><h4 id="2-4-1-3-安装更新后的依赖"><a href="#2-4-1-3-安装更新后的依赖" class="headerlink" title="2.4.1.3. 安装更新后的依赖"></a>2.4.1.3. <strong>安装更新后的依赖</strong></h4><p><strong>package.json 文件更新完成后，运行以下命令来安装更新后的依赖项：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 或者</span><span class="token function">yarn</span> <span class="token function">install</span><span class="token comment"># 等等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-其他"><a href="#2-5-其他" class="headerlink" title="2.5. 其他"></a>2.5. <strong>其他</strong></h2><h1 id="3-最佳实践和注意事项"><a href="#3-最佳实践和注意事项" class="headerlink" title="3. 最佳实践和注意事项"></a>3. <strong>最佳实践和注意事项</strong></h1><h2 id="3-1-更新前的准备工作"><a href="#3-1-更新前的准备工作" class="headerlink" title="3.1. 更新前的准备工作"></a>3.1. <strong>更新前的准备工作</strong></h2><ol><li><p><strong>备份项目</strong>：</p><ul><li>确保项目代码已提交到版本控制系统</li><li>创建一个新的分支进行依赖更新</li></ul></li><li><p><strong>记录当前状态</strong>：</p><ul><li>保存 package.json 和 package-lock.json 的副本</li><li>记录项目的主要功能点，以便后续验证</li></ul></li></ol><h2 id="3-2-自动化更新策略"><a href="#3-2-自动化更新策略" class="headerlink" title="3.2. 自动化更新策略"></a>3.2. <strong>自动化更新策略</strong></h2><ol><li><p><strong>持续集成中的依赖更新</strong>：</p><ul><li>配置自动化工具（如 Dependabot）定期检查依赖更新</li><li>设置自动创建更新 PR，方便代码审查</li></ul></li><li><p><strong>更新测试流程</strong>：</p><ul><li>在更新后运行完整的测试套件</li><li>进行关键功能的手动测试</li><li>在开发环境中进行充分验证</li></ul></li></ol><h2 id="3-3-处理依赖冲突"><a href="#3-3-处理依赖冲突" class="headerlink" title="3.3. 处理依赖冲突"></a>3.3. <strong>处理依赖冲突</strong></h2><ol><li><p><strong>版本冲突解决</strong>：</p><ul><li>使用 <code>npm ls &lt;package-name&gt;</code> 查看依赖树</li><li>检查 package-lock.json 中的依赖关系</li><li>必要时使用 <code>npm dedupe</code> 优化依赖树</li></ul></li><li><p><strong>降级策略</strong>：</p><ul><li>如果更新后出现问题，使用 <code>npm install &lt;package-name&gt;@&lt;version&gt;</code> 回退到稳定版本</li><li>在 package.json 中锁定关键依赖的版本</li></ul></li></ol><h2 id="3-4-更多资源"><a href="#3-4-更多资源" class="headerlink" title="3.4. 更多资源"></a>3.4. <strong>更多资源</strong></h2><p><strong>更多的命令和最佳实践请参考官方文档：</strong></p><p><a href="https://www.npmjs.com/package/npm-check-updates">https://www.npmjs.com/package/npm-check-updates</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你在Nginx服务器中启用https和http2</title>
      <link href="/2025/03/14/yun-wei/shou-ba-shou-jiao-ni-zai-wang-zhan-zhong-qi-yong-https-he-http2/"/>
      <url>/2025/03/14/yun-wei/shou-ba-shou-jiao-ni-zai-wang-zhan-zhong-qi-yong-https-he-http2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在当今互联网时代，网站的安全性和加载速度成为用户体验中至关重要的两个因素。启用HTTPS可以通过加密通信保护数据的传输，防止敏感信息被窃取或篡改；而HTTP&#x2F;2则在提升网站加载速度和优化网络资源利用方面发挥了重要作用。这篇文章将手把手教你如何在网站中启用HTTPS和HTTP&#x2F;2，帮助你构建一个既安全又高效的网络环境。</p><h1 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2. 前期准备"></a>2. 前期准备</h1><h2 id="2-1-云服务"><a href="#2-1-云服务" class="headerlink" title="2.1. 云服务"></a>2.1. 云服务</h2><p>自己准备一个云服务器，或者按照这篇文章申请免费的<a href="https://juejin.cn/post/7251914510436466725">亚马逊服务器</a></p><h2 id="2-2-已经被备案的域名"><a href="#2-2-已经被备案的域名" class="headerlink" title="2.2. 已经被备案的域名"></a>2.2. 已经被备案的域名</h2><p>我这里已经准备了一个已经备案的 <a href="https://ibuy.xin/">ibuy.xin</a> 域名</p><h1 id="3-申请免费的ssl证书"><a href="#3-申请免费的ssl证书" class="headerlink" title="3. 申请免费的ssl证书"></a>3. 申请免费的ssl证书</h1><p>要配置<strong>https</strong>,，需要申请<strong>ssl</strong>证书，可以在阿里云，阿里云官网等网站申请免费的<strong>ssl</strong>证书。</p><p>也可以通过这篇<a href="https://zhuanlan.zhihu.com/p/174755007">文章</a>中提供的资料去查找</p><p>本文以在阿里云申请为例。</p><h2 id="3-1-登录阿里云"><a href="#3-1-登录阿里云" class="headerlink" title="3.1. 登录阿里云"></a>3.1. 登录阿里云</h2><p>登录阿里云后上<strong>搜索ssl</strong>,点击 <strong>数字证书管理服务</strong></p><p><img src="/imgs/hou-duan/33.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/33.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="3-2-购买免费ssl证书"><a href="#3-2-购买免费ssl证书" class="headerlink" title="3.2. 购买免费ssl证书"></a>3.2. 购买免费ssl证书</h2><p>在<strong>ssl证书管理</strong>里面选择<strong>个人测试证书</strong> ，然后点击<strong>立即购买，</strong> 购买完成后点击<strong>创建证书</strong>，点击创建证书后下面列表会出现一个待申请状态的证书，点击<strong>证书申请</strong>，填写申请的信息。</p><p><img src="/imgs/hou-duan/34.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/34.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>一般等个几分钟就可以了。</p><h2 id="3-3-下载SSL证书"><a href="#3-3-下载SSL证书" class="headerlink" title="3.3. 下载SSL证书"></a>3.3. 下载SSL证书</h2><p>在审核通过后，在管理列表里会有对应的证书，点进去后<strong>切换到下载</strong>的tab页面，就会出现如下页面，我们使用的是nginx部署的，下载nginx那一列就行</p><p><img src="/imgs/hou-duan/35.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/35.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h1 id="4-上传证书到服务器"><a href="#4-上传证书到服务器" class="headerlink" title="4. 上传证书到服务器"></a>4. 上传证书到服务器</h1><p>我们后面会用docker部署nginx，对应的volume目录是 <code>/usr/local/docker-volumes/nginx</code></p><p>所以，需要先在服务器这个目录下创建一个<code>cert</code>，然后将下载下来的证书<code>&lt;cert-file-name&gt;.pem</code>和<code>&lt;cert-file-name&gt;.key</code>上传到该目录中。</p><h1 id="5-docker部署nginx"><a href="#5-docker部署nginx" class="headerlink" title="5. docker部署nginx"></a>5. docker部署nginx</h1><p>在进入到服务器中后执行下面的操作</p><h2 id="5-1-拉取镜像"><a href="#5-1-拉取镜像" class="headerlink" title="5.1. 拉取镜像"></a>5.1. 拉取镜像</h2><p><code>docker pull nginx</code></p><h2 id="5-2-创建挂载目录"><a href="#5-2-创建挂载目录" class="headerlink" title="5.2. 创建挂载目录"></a>5.2. 创建挂载目录</h2><pre><code>mkdir -p /usr/local/docker-volumes/nginx/&#123;conf,log,html&#125;</code></pre><h2 id="5-3-运行容器"><a href="#5-3-运行容器" class="headerlink" title="5.3. 运行容器"></a>5.3. 运行容器</h2><pre><code>docker run --name nginx -d -p 80:80 nginx</code></pre><h2 id="5-4-复制nginx默认配置"><a href="#5-4-复制nginx默认配置" class="headerlink" title="5.4. 复制nginx默认配置"></a>5.4. 复制nginx默认配置</h2><p>配置volume</p><pre><code>docker cp nginx:/etc/nginx/nginx.conf /usr/local/docker-volumes/nginxdocker cp nginx:/etc/nginx/conf.d /usr/local/docker-volumes/nginxdocker cp nginx:/usr/share/nginx/html /usr/local/docker-volumes/nginxdocker rm -f nginx</code></pre><h2 id="5-5-修改default-conf文件"><a href="#5-5-修改default-conf文件" class="headerlink" title="5.5. 修改default.conf文件"></a>5.5. 修改default.conf文件</h2><p>编辑default.conf文件</p><pre><code>vim /usr/local/docker-volumes/nginx/conf.d/default.conf</code></pre><p>我们会在nginx的配置文件中来完成对https和http2的支持，<strong>需要注意，里面各种路径对应的是容器内的路径。</strong></p><p><strong>第一个server模块用来监听80端口的http请求，并将该请求跳转到第二个server模块所监听的https的请求</strong></p><pre><code>server &#123;    # 监听 80 端口（HTTP），支持 IPv4 和 IPv6    listen 80;    listen [::]:80;    # 服务器名称（域名）    server_name ibuy.xin;    # 强制 HTTP 跳转到 HTTPS（301 永久重定向）    return 301 https://$host$request_uri;&#125;server &#123;    # 监听 443 端口（HTTPS），支持 HTTP/2    listen 443 ssl http2;    listen [::]:443 ssl http2;    # 服务器名称（域名）    server_name ibuy.xin;    # SSL 证书及密钥（请确保文件路径正确）    ssl_certificate /etc/nginx/cert/ibuy.xin.pem;    ssl_certificate_key /etc/nginx/cert/ibuy.xin.key;    # SSL 会话缓存和超时时间，优化性能    ssl_session_cache shared:SSL:10m;    ssl_session_timeout 10m;    # 自定义 TLS 协议和加密套件，增强安全性    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1.2 TLSv1.3; # 仅允许安全的 TLS 版本    ssl_prefer_server_ciphers on; # 优先使用服务器端的加密算法    # 设置网站根目录（前端部署路径）    root /usr/share/nginx/html/dist;    location / &#123;        # 用于 SPA 支持 browserHistory        try_files $uri $uri/index.html /index.html;    &#125;    # 处理 500、502、503、504 错误，返回自定义错误页面    error_page 500 502 503 504 /50x.html;    location = /50x.html &#123;        root /usr/share/nginx/html;    &#125;    # 代理 API 请求到后端 NestJS 服务    location /api/ &#123;        proxy_pass http://ibuy-service-nestjs:8000/v1/; # 代理到后端服务（如果 NestJS 使用 HTTPS，需要改成 https）        # 设置请求头信息，传递客户端 IP 和协议        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;    &#125;&#125;</code></pre><h2 id="5-6-重新运行nginx镜像"><a href="#5-6-重新运行nginx镜像" class="headerlink" title="5.6. 重新运行nginx镜像"></a>5.6. 重新运行nginx镜像</h2><p>在配置中加上<code>ibuy-portal-backend_default</code>网络</p><pre><code>docker run --name nginx -m 200m -p 80:80 -p 443:443 \-v /usr/local/docker-volumes/nginx/nginx.conf:/etc/nginx/nginx.conf \-v /usr/local/docker-volumes/nginx/conf.d:/etc/nginx/conf.d \-v /usr/local/docker-volumes/nginx/cert:/etc/nginx/cert \-v /usr/local/docker-volumes/nginx/html:/usr/share/nginx/html \-v /usr/local/docker-volumes/nginx/log:/var/log/nginx \-e TZ=Asia/Shanghai \--restart=always \--network ibuy-portal-backend_default \--privileged=true -d nginx</code></pre><ol><li>容器基础配置<br>--name nginx<br>为容器指定一个名称 nginx，便于后续管理（启动&#x2F;停止&#x2F;查看日志等）。</li></ol><p>-m 200m<br>限制容器内存使用上限为 200MB，防止容器占用过多资源。</p><p>-d<br>以 后台守护进程模式 运行容器（detached mode），终端不阻塞。</p><ol start="2"><li>网络与端口映射<br>-p 80:80<br>将宿主机的 80 端口 映射到容器的 80 端口，允许外部通过 HTTP 访问服务。</li></ol><p>-p 443:443<br>将宿主机的 443 端口 映射到容器的 443 端口，允许外部通过 HTTPS 访问服务。</p><p>--network ibuy-portal-backend_default<br>将容器连接到名为 ibuy-portal-backend_default 的 自定义 Docker 网络，实现与其他容器（如后端服务）的通信。</p><ol start="3"><li>数据卷挂载（持久化配置与数据）<br>-v &#x2F;usr&#x2F;local&#x2F;docker-volumes&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br>将宿主机的 Nginx 主配置文件挂载到容器内，覆盖容器默认配置。</li></ol><p>-v &#x2F;usr&#x2F;local&#x2F;docker-volumes&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d<br>挂载 Nginx 子配置目录，用于管理多站点配置（如你的 server 块配置）。</p><p>-v &#x2F;usr&#x2F;local&#x2F;docker-volumes&#x2F;nginx&#x2F;cert:&#x2F;etc&#x2F;nginx&#x2F;cert<br>挂载 SSL 证书目录，容器内可通过 &#x2F;etc&#x2F;nginx&#x2F;cert 访问证书文件。</p><p>-v &#x2F;usr&#x2F;local&#x2F;docker-volumes&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<br>挂载网站静态文件目录，容器内 Nginx 可直接服务此目录下的内容（如你的 dist 前端文件）。</p><p>-v &#x2F;usr&#x2F;local&#x2F;docker-volumes&#x2F;nginx&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx<br>挂载日志目录，持久化保存 Nginx 的访问日志和错误日志。</p><ol start="4"><li>环境与权限控制<br>-e TZ&#x3D;Asia&#x2F;Shanghai<br>设置容器时区为 亚洲&#x2F;上海，确保日志时间与服务器本地时间一致。</li></ol><p>--privileged&#x3D;true<br>赋予容器 特权模式，允许容器访问宿主机的敏感设备或内核功能（慎用！仅在需要时开启）。</p><ol start="5"><li>容错与运维<br>--restart&#x3D;always<br>设置容器 自动重启策略：无论退出状态如何，容器意外停止时都会自动重启（适合生产环境）。</li></ol><h1 id="6-验证SSL证书是否配置成功"><a href="#6-验证SSL证书是否配置成功" class="headerlink" title="6. 验证SSL证书是否配置成功"></a>6. 验证SSL证书是否配置成功</h1><h2 id="6-1-验证https"><a href="#6-1-验证https" class="headerlink" title="6.1. 验证https"></a>6.1. 验证https</h2><p>证书安装完成后，您可通过访问证书绑定的域名验证该证书是否安装成功。</p><p><a href="https://ibuy.xin/">https://ibuy.xin/</a> 这里替换成你自己的网站域名</p><p>访问网站看到有把小锁就表示https配置好了</p><p><img src="/imgs/hou-duan/36.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/36.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="6-2-验证http2-0"><a href="#6-2-验证http2-0" class="headerlink" title="6.2. 验证http2.0"></a>6.2. 验证http2.0</h2><p>打开我们的浏览器的控制台，查看 protocal ，为h2则表示启用成功</p><p><img src="/imgs/hou-duan/37.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/37.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Nestjs实现基于JWT + RBAC的认证授权系统</title>
      <link href="/2025/03/14/hou-duan/shang-cheng/shi-yong-nestjs-shi-xian-ji-yu-jwt-rbac-de-ren-zheng-shou-quan-xi-tong/"/>
      <url>/2025/03/14/hou-duan/shang-cheng/shi-yong-nestjs-shi-xian-ji-yu-jwt-rbac-de-ren-zheng-shou-quan-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章使用Nestjs实现了一个基于JWT+RBAC（Role-Based Access Control）的认证授权系统，主要包含以下功能：</p><ul><li>用户认证：实现用户登录、登出等基础认证功能</li><li>权限控制：基于RBAC模型的细粒度权限控制</li><li>JWT认证：使用JWT实现无状态的用户身份验证</li></ul><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="实体关系图"><a href="#实体关系图" class="headerlink" title="实体关系图"></a>实体关系图</h3><pre class="mermaid">erDiagram    SysUsersEntity ||--o{ UsersRoleEntity : has    RoleEntity ||--o{ UsersRoleEntity : has    SysUsersEntity {        number id PK        string loginName        string password        string status        number tokenVersion    }    RoleEntity {        number id PK        string name    }    UsersRoleEntity {        number admin_id PK        number role_id PK    }</pre><h3 id="表结构说明"><a href="#表结构说明" class="headerlink" title="表结构说明"></a>表结构说明</h3><h4 id="1-用户表-ibuy-admin"><a href="#1-用户表-ibuy-admin" class="headerlink" title="1. 用户表 (ibuy_admin)"></a>1. 用户表 (ibuy_admin)</h4><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>约束</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>用户ID</td><td>主键</td></tr><tr><td>login_name</td><td>string</td><td>登录名</td><td>唯一，可空</td></tr><tr><td>password</td><td>string</td><td>密码</td><td>可空</td></tr><tr><td>status</td><td>string</td><td>用户状态</td><td>可空</td></tr><tr><td>tokenVersion</td><td>number</td><td>token版本号</td><td>默认值0</td></tr></tbody></table><h4 id="2-角色表-ibuy-role"><a href="#2-角色表-ibuy-role" class="headerlink" title="2. 角色表 (ibuy_role)"></a>2. 角色表 (ibuy_role)</h4><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>约束</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>角色ID</td><td>主键</td></tr><tr><td>name</td><td>string</td><td>角色名称</td><td>唯一，可空</td></tr></tbody></table><h4 id="3-用户角色关联表-ibuy-admin-role"><a href="#3-用户角色关联表-ibuy-admin-role" class="headerlink" title="3. 用户角色关联表 (ibuy_admin_role)"></a>3. 用户角色关联表 (ibuy_admin_role)</h4><table><thead><tr><th>字段名</th><th>类型</th><th>说明</th><th>约束</th></tr></thead><tbody><tr><td>admin_id</td><td>number</td><td>用户ID</td><td>联合主键</td></tr><tr><td>role_id</td><td>number</td><td>角色ID</td><td>联合主键</td></tr></tbody></table><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>需要在.env文件中配置以下环境变量：</p><pre class="line-numbers language-env" data-language="env"><code class="language-env">JWT_SECRET&#x3D;your_jwt_secret_key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="1-认证流程"><a href="#1-认证流程" class="headerlink" title="1. 认证流程"></a>1. 认证流程</h3><h4 id="1-1-登录认证"><a href="#1-1-登录认证" class="headerlink" title="1.1 登录认证"></a>1.1 登录认证</h4><p>用户登录时，系统会：</p><ol><li>验证用户名和密码</li><li>生成包含用户信息的JWT Token</li><li>返回Token和用户信息</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// auth.controller.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Public</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">HttpCode</span></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token function">signIn</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> user<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">signIn</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>loginName<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-JWT认证守卫"><a href="#1-2-JWT认证守卫" class="headerlink" title="1.2 JWT认证守卫"></a>1.2 JWT认证守卫</h4><p>系统使用全局AuthGuard进行Token验证：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// auth.guard.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查是否是公开接口</span>    <span class="token keyword">const</span> isPublic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getAllAndOverride</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token constant">IS_PUBLIC_KEY</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPublic<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 验证Token</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">extractTokenFromHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtService<span class="token punctuation">.</span><span class="token function">verifyAsync</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span>user <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-RBAC权限控制"><a href="#2-RBAC权限控制" class="headerlink" title="2. RBAC权限控制"></a>2. RBAC权限控制</h3><h4 id="2-1-角色权限守卫"><a href="#2-1-角色权限守卫" class="headerlink" title="2.1 角色权限守卫"></a>2.1 角色权限守卫</h4><p>使用PermissionGuard实现基于角色的权限控制：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// permission.guard.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PermissionGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 获取用户角色</span>    <span class="token keyword">const</span> roleIds <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRoleService<span class="token punctuation">.</span><span class="token function">findRolesIdByUserId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>roleService<span class="token punctuation">.</span><span class="token function">findRolesByRoleIds</span><span class="token punctuation">(</span>roleIds<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> roleNames <span class="token operator">=</span> roles<span class="token punctuation">.</span>data<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span> <span class="token operator">=></span> role<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查权限</span>    <span class="token keyword">const</span> requiredRoles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token function">getAllAndOverride</span><span class="token punctuation">(</span><span class="token constant">PERMISSION_KEY</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> requiredRoles<span class="token operator">?.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span> <span class="token operator">=></span> roleNames<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-权限装饰器"><a href="#2-2-权限装饰器" class="headerlink" title="2.2 权限装饰器"></a>2.2 权限装饰器</h4><p>提供@Permission装饰器用于声明接口所需的角色权限：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// permission.decorator.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PERMISSION_KEY</span> <span class="token operator">=</span> <span class="token string">'permission_by_roles'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Permission</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>permissions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token constant">PERMISSION_KEY</span><span class="token punctuation">,</span> permissions<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><h4 id="3-1-接口权限控制"><a href="#3-1-接口权限控制" class="headerlink" title="3.1 接口权限控制"></a>3.1 接口权限控制</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// role.controller.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Permission</span></span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>  <span class="token comment">// 声明需要admin角色才能访问</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RoleController</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">createRole</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> createRoleDto<span class="token operator">:</span> CreateRoleDto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>roleService<span class="token punctuation">.</span><span class="token function">createRole</span><span class="token punctuation">(</span>createRoleDto<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-全局配置"><a href="#3-2-全局配置" class="headerlink" title="3.2 全局配置"></a>3.2 全局配置</h4><p>在AppModule中注册全局守卫：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app.module.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      provide<span class="token operator">:</span> <span class="token constant">APP_GUARD</span><span class="token punctuation">,</span>      useClass<span class="token operator">:</span> AuthGuard<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      provide<span class="token operator">:</span> <span class="token constant">APP_GUARD</span><span class="token punctuation">,</span>      useClass<span class="token operator">:</span> PermissionGuard<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>所有需要认证的接口都会自动经过AuthGuard验证</li><li>使用@Public()装饰器可以将接口标记为公开接口</li><li>使用@Permission()装饰器可以指定访问接口所需的角色</li><li>角色验证基于RBAC模型，支持多角色</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs+RabbitMQ+支付宝沙盒 实现电商支付功能</title>
      <link href="/2025/03/14/hou-duan/shang-cheng/shi-xian-shang-cheng-zhi-fu-gong-neng/"/>
      <url>/2025/03/14/hou-duan/shang-cheng/shi-xian-shang-cheng-zhi-fu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. <strong>前言</strong></h1><p>在电商系统中，支付功能是整个交易流程中最为关键的环节之一。一个完善的支付系统不仅要保证交易的安全性和可靠性，还需要具备良好的用户体验和高效的系统性能。本文将详细介绍如何在商城系统中集成支付宝支付功能，并通过RabbitMQ消息队列来优化支付流程。</p><p>在实现过程中，我们将重点关注以下几个方面：首先，通过RabbitMQ实现支付流程的异步处理，提高系统的并发处理能力；其次，利用死信队列来优雅处理支付超时等异常情况；最后，通过同步和异步通知机制，确保支付状态的及时更新和订单流程的顺利进行。</p><p>通过本文的学习，你将深入理解RabbitMQ在实际业务场景中的应用，以及如何构建一个可靠的支付系统。</p><h1 id="2-安装RabbitMQ"><a href="#2-安装RabbitMQ" class="headerlink" title="2. 安装RabbitMQ"></a>2. <strong>安装RabbitMQ</strong></h1><h2 id="2-1-使用docker安装-如果你看了前面使用docker-compose管理所有容器，这一步就可以省略"><a href="#2-1-使用docker安装-如果你看了前面使用docker-compose管理所有容器，这一步就可以省略" class="headerlink" title="2.1. 使用docker安装(如果你看了前面使用docker-compose管理所有容器，这一步就可以省略)"></a>2.1. <strong>使用docker安装(如果你看了前面使用docker-compose管理所有容器，这一步就可以省略)</strong></h2><h3 id="2-1-1-拉取镜像"><a href="#2-1-1-拉取镜像" class="headerlink" title="2.1.1. 拉取镜像"></a>2.1.1. <strong>拉取镜像</strong></h3><p><code>docker pull rabbitmq::4.0</code></p><h3 id="2-1-2-运行容器"><a href="#2-1-2-运行容器" class="headerlink" title="2.1.2. 运行容器"></a>2.1.2. <strong>运行容器</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--d</span> <span class="token parameter variable">--name</span> rabbitmq <span class="token parameter variable">-p</span> <span class="token number">5552</span>:5552 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672  <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS</span><span class="token operator">=</span><span class="token string">'-rabbitmq_stream advertised_host localhost'</span> <span class="token punctuation">\</span>    rabbitmq:4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-等待服务器启动，然后启用流和流管理插件："><a href="#2-1-3-等待服务器启动，然后启用流和流管理插件：" class="headerlink" title="2.1.3. 等待服务器启动，然后启用流和流管理插件："></a>2.1.3. <strong>等待服务器启动，然后启用流和流管理插件：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> rabbitmq rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_stream rabbitmq_stream_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1-4-以root权限进入docker"><a href="#2-1-4-以root权限进入docker" class="headerlink" title="2.1.4. 以root权限进入docker"></a>2.1.4. <strong>以root权限进入docker</strong></h3><p><code>docker exec -u root -it rabbitmq /bin/bash</code></p><h3 id="2-1-5-添加一个用户"><a href="#2-1-5-添加一个用户" class="headerlink" title="2.1.5. 添加一个用户"></a>2.1.5. <strong>添加一个用户</strong></h3><p><code>rabbitmqctl add_user [username] [password]</code></p><h3 id="2-1-6-创建一个Virtualhost"><a href="#2-1-6-创建一个Virtualhost" class="headerlink" title="2.1.6. 创建一个Virtualhost"></a>2.1.6. <strong>创建一个</strong>Virtualhost</h3><p><code>rabbitmqctl add_vhost /ibuy</code></p><h3 id="2-1-7-给用户访问权限"><a href="#2-1-7-给用户访问权限" class="headerlink" title="2.1.7. 给用户访问权限"></a>2.1.7. <strong>给用户访问权限</strong></h3><p><code>rabbitmqctl set_permissions -p /ibuy [username]  &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p><h4 id="2-1-7-1-检查权限"><a href="#2-1-7-1-检查权限" class="headerlink" title="2.1.7.1. 检查权限"></a>2.1.7.1. <strong>检查权限</strong></h4><p><strong>如果你已经有用户，但提示没有管理权限，你可以使用以下命令查看用户权限：</strong></p><p><code>rabbitmqctl list_users</code></p><p>**该命令会列出所有用户及其角色。确保你登录的用户拥有 **<code>administrator</code> 标签。如果没有，则可以使用以下命令为用户分配管理权限</p><p><code>rabbitmqctl set_user_tags [username] administrator</code></p><h4 id="2-1-7-2-访问rabbitmq界面"><a href="#2-1-7-2-访问rabbitmq界面" class="headerlink" title="2.1.7.2. 访问rabbitmq界面"></a>2.1.7.2. <strong>访问rabbitmq界面</strong></h4><p><strong>接着，就可以通过</strong><a href="http://120.26.69.48:15672/#/queues">http://localhost:15672/#/queues</a>管理你的rabbitmq</p><h1 id="3-RabbitMQ介绍"><a href="#3-RabbitMQ介绍" class="headerlink" title="3. RabbitMQ介绍"></a>3. <strong>RabbitMQ介绍</strong></h1><h2 id="3-1-什么是MQ"><a href="#3-1-什么是MQ" class="headerlink" title="3.1. 什么是MQ"></a>3.1. <strong>什么是MQ</strong></h2><p><strong>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</strong></p><h3 id="3-1-1-为什么使用MQ"><a href="#3-1-1-为什么使用MQ" class="headerlink" title="3.1.1. 为什么使用MQ"></a>3.1.1. <strong>为什么使用MQ</strong></h3><pre><code>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行​**异步处理**​**，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而****提高**了**系统**的​**吞吐量**​**。 **</code></pre><h3 id="3-1-2-MQ的优势："><a href="#3-1-2-MQ的优势：" class="headerlink" title="3.1.2. MQ的优势："></a>3.1.2. <strong>MQ的优势：</strong></h3><p><strong>1、任务****异步</strong>处理<br>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。<br>2、应用程序<strong>解耦合</strong><br>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。<br>3、<strong>削峰填谷</strong><br>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。<br><img src="/imgs/hou-duan/6.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。<br><img src="/imgs/hou-duan/7.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”<br><img src="/imgs/hou-duan/8.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="3-1-3-MQ的劣势"><a href="#3-1-3-MQ的劣势" class="headerlink" title="3.1.3. MQ的劣势"></a>3.1.3. <strong>MQ的劣势</strong></h3><p>**  **<strong>1、 可用性降低</strong></p><p><strong>系统引入的外部依赖越多没系统稳定性越差。一旦MQ宕机，就会对业务造成影响。如何保证MQ的高可用，就是这个系统设计的关键</strong></p><p><strong>2、系统复杂度提高</strong></p><p>**  MQ的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过MQ进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？怎么保证消息传递的顺序性？**</p><p><strong>3、 一致性问题</strong></p><p><strong>A系统处理完业务，通过MQ给 B、C、D三个系统发送消息数据，如果B系统、C系统处理成功，D系统处理失败。如何保证消息数据处理的一致性？</strong></p><h2 id="3-2-AMQP-和-JMS"><a href="#3-2-AMQP-和-JMS" class="headerlink" title="3.2. AMQP 和 JMS"></a>3.2. <strong>AMQP 和 JMS</strong></h2><p><strong>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</strong></p><h3 id="3-2-1-AMQP"><a href="#3-2-1-AMQP" class="headerlink" title="3.2.1. AMQP"></a>3.2.1. <strong>AMQP</strong></h3><p><strong>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</strong></p><h3 id="3-2-2-JMS"><a href="#3-2-2-JMS" class="headerlink" title="3.2.2. JMS"></a>3.2.2. <strong>JMS</strong></h3><p><strong>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</strong></p><h3 id="3-2-3-AMQP-与-JMS-区别"><a href="#3-2-3-AMQP-与-JMS-区别" class="headerlink" title="3.2.3. AMQP 与 JMS 区别"></a>3.2.3. <strong>AMQP 与 JMS 区别</strong></h3><ul><li><strong>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</strong></li><li><strong>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</strong></li><li><strong>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</strong></li></ul><h2 id="3-3-消息队列产品"><a href="#3-3-消息队列产品" class="headerlink" title="3.3. 消息队列产品"></a>3.3. <strong>消息队列产品</strong></h2><p><strong>市场上常见的消息队列有如下：</strong></p><ul><li><strong>ActiveMQ：基于JMS</strong></li><li><strong>ZeroMQ：基于C语言开发</strong></li><li><strong>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</strong></li><li><strong>RocketMQ：基于JMS，阿里巴巴产品</strong></li><li><strong>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</strong></li></ul><p><img src="/imgs/hou-duan/9.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="3-4-RabbitMQ"><a href="#3-4-RabbitMQ" class="headerlink" title="3.4. RabbitMQ"></a>3.4. <strong>RabbitMQ</strong></h2><p><strong>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，它在分布式系统中用于解耦生产者（发送消息的程序）和消费者（接收消息的程序），提供可靠的消息传输和灵活的路由机制。</strong></p><p><strong>RabbitMQ官方地址：</strong><a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><h3 id="3-4-1-rabbitmq几个核心组件"><a href="#3-4-1-rabbitmq几个核心组件" class="headerlink" title="3.4.1. rabbitmq几个核心组件"></a>3.4.1. <strong>rabbitmq几个核心组件</strong></h3><h4 id="3-4-1-1-生产者（Producer）"><a href="#3-4-1-1-生产者（Producer）" class="headerlink" title="3.4.1.1. 生产者（Producer）"></a>3.4.1.1. <strong>生产者（Producer）</strong></h4><p><strong>负责发送消息到 RabbitMQ。</strong></p><h4 id="3-4-1-2-消费者（Consumer）"><a href="#3-4-1-2-消费者（Consumer）" class="headerlink" title="3.4.1.2. 消费者（Consumer）"></a>3.4.1.2. <strong>消费者（Consumer）</strong></h4><p><strong>从 RabbitMQ 队列中接收消息并进行处理。</strong></p><h4 id="3-4-1-3-交换器（Exchange）"><a href="#3-4-1-3-交换器（Exchange）" class="headerlink" title="3.4.1.3. 交换器（Exchange）"></a>3.4.1.3. <strong>交换器（Exchange）</strong></h4><p><strong>RabbitMQ 消息传递模型的核心思想是生产者从不直接向队列发送任何消息。生产者只将消息发送到 Exchange 交换器中，并不知道消息是否会被传送到队列。交换器负责接收生产者生产的消息，并通过一定路由规则将消息发送到指定的队列，起到一个传递的作用</strong></p><p><strong>它有多种类型的交换机</strong></p><ul><li>​<strong>Direct</strong>​**：按照路由键精确匹配将消息发送到指定队列。**</li><li>​<strong>Fanout</strong>​**：广播消息给所有绑定到该交换机的队列。**</li><li>​<strong>Topic</strong>​**：通过模式匹配路由键来转发消息。**</li><li>​<strong>Headers</strong>​**：通过消息头的值来路由消息。**</li></ul><h4 id="3-4-1-4-队列（Queue）"><a href="#3-4-1-4-队列（Queue）" class="headerlink" title="3.4.1.4. 队列（Queue）"></a>3.4.1.4. <strong>队列（Queue）</strong></h4><p><strong>消息的存储位置，消费者从队列中消费消息</strong></p><h4 id="3-4-1-5-绑定（Binding）"><a href="#3-4-1-5-绑定（Binding）" class="headerlink" title="3.4.1.5. 绑定（Binding）"></a>3.4.1.5. <strong>绑定（Binding）</strong></h4><p><strong>用于将队列与交换机连接，并根据路由键来定义消息的转发规则。</strong></p><h3 id="3-4-2-RabbitMQ消息模式"><a href="#3-4-2-RabbitMQ消息模式" class="headerlink" title="3.4.2. RabbitMQ消息模式"></a>3.4.2. <strong>RabbitMQ消息模式</strong></h3><h4 id="3-4-2-1-简单队列模式（Simple-Queue-Model）"><a href="#3-4-2-1-简单队列模式（Simple-Queue-Model）" class="headerlink" title="3.4.2.1. 简单队列模式（Simple Queue Model）"></a>3.4.2.1. <strong>简单队列模式（Simple Queue Model）</strong></h4><p>这是最基本的模式，生产者发送消息到队列，消费者从队列中接收并处理消息。消息在队列中是 FIFO（先进先出）顺序处理的。<br>特点：只涉及一个生产者、一个消费者和一个队列，适合简单的任务处理场景。</p><h4 id="3-4-2-2-工作队列模式（Work-Queue-Model）"><a href="#3-4-2-2-工作队列模式（Work-Queue-Model）" class="headerlink" title="3.4.2.2. 工作队列模式（Work Queue Model）"></a>3.4.2.2. <strong>工作队列模式（Work Queue Model）</strong></h4><p><strong>在此模式下，一个生产者发送消息到一个队列，多个消费者可以同时从同一个队列中消费消息。这种模式常用于分布式任务处理，旨在平衡消费者之间的工作负载。</strong><br>特点：消费者之间竞争接收消息，负载可以自动分配，适合高并发环境。</p><h4 id="3-4-2-3-发布-订阅模式（Publish-Subscribe-Model）"><a href="#3-4-2-3-发布-订阅模式（Publish-Subscribe-Model）" class="headerlink" title="3.4.2.3. 发布&#x2F;订阅模式（Publish&#x2F;Subscribe Model）"></a>3.4.2.3. <strong>发布&#x2F;订阅模式（Publish&#x2F;Subscribe Model）</strong></h4><p>生产者将消息发送到交换机（Exchange），交换机会将消息广播到多个绑定的队列，消费者订阅这些队列以接收消息。常用的交换机类型是 fanout，可以将消息广播到所有绑定的队列。<br>特点：消息可以同时传递给多个消费者，适合广播类通知，如日志、事件推送。</p><h4 id="3-4-2-4-路由模式（Routing-Model）"><a href="#3-4-2-4-路由模式（Routing-Model）" class="headerlink" title="3.4.2.4. 路由模式（Routing Model）"></a>3.4.2.4. <strong>路由模式（Routing Model）</strong></h4><p><strong>此模式依赖于 direct 类型的交换机，生产者在发送消息时会指定一个路由键（Routing Key），交换机会根据该路由键将消息发送到对应的队列。不同的队列可以绑定到同一个交换机并指定不同的路由键。</strong><br>特点：消息路由更灵活，适合有条件过滤的消息投递，如根据消息类型或优先级分发消息。</p><h4 id="3-4-2-5-主题模式（Topic-Model）"><a href="#3-4-2-5-主题模式（Topic-Model）" class="headerlink" title="3.4.2.5. 主题模式（Topic Model）"></a>3.4.2.5. <strong>主题模式（Topic Model）</strong></h4><p><strong>这是基于 topic 交换机的模式。生产者发送带有主题（Topic）的消息，交换机会根据消息主题匹配绑定的队列，支持模糊匹配。路由键支持通配符（如 * 和 #）用于匹配不同类型的队列。</strong><br>特点：支持复杂的路由规则，适合按主题分类的消息投递，如新闻系统、日志系统等。</p><h4 id="3-4-2-6-头交换模式（Headers-Exchange-Model）"><a href="#3-4-2-6-头交换模式（Headers-Exchange-Model）" class="headerlink" title="3.4.2.6. 头交换模式（Headers Exchange Model）"></a>3.4.2.6. <strong>头交换模式（Headers Exchange Model）</strong></h4><p><strong>这种模式下，交换机会根据消息的头部属性来决定将消息发送到哪个队列，而不是依赖于路由键。消费者通过消息头部属性的值来接收特定消息。</strong><br>特点：基于消息头进行路由的方式更加灵活，适合需要多条件匹配的场景。</p><h4 id="3-4-2-7-RPC-模式（Remote-Procedure-Call-Model）"><a href="#3-4-2-7-RPC-模式（Remote-Procedure-Call-Model）" class="headerlink" title="3.4.2.7. RPC 模式（Remote Procedure Call Model）"></a>3.4.2.7. <strong>RPC 模式（Remote Procedure Call Model）</strong></h4><p><strong>在此模式下，RabbitMQ 被用作远程过程调用的中介。客户端发送一个请求到队列，服务器从队列中取出请求并处理后，返回结果到另一个队列，客户端从该队列中获取结果。</strong><br>特点：适用于分布式系统中的远程服务调用，适合高并发下的请求-响应场景。<br>每种模式都有其特定的应用场景，RabbitMQ 通过灵活的交换机和队列绑定，支持多种消息路由和处理机制，满足不同业务需求。这些模式不仅提高了系统的可扩展性和解耦性，也为高并发场景下的消息处理提供了保障。</p><h3 id="3-4-3-有关死信队列和延迟队列"><a href="#3-4-3-有关死信队列和延迟队列" class="headerlink" title="3.4.3. 有关死信队列和延迟队列"></a>3.4.3. <strong>有关死信队列和延迟队列</strong></h3><h4 id="3-4-3-1-死信队列-Dead-Letter-Queue"><a href="#3-4-3-1-死信队列-Dead-Letter-Queue" class="headerlink" title="3.4.3.1. 死信队列(Dead Letter Queue)"></a>3.4.3.1. <strong>死信队列(Dead Letter Queue)</strong></h4><p>**是一种用于存储和管理无法正常处理的消息的特殊队列。**这些无法处理的消息可能是由于各种原因，例如消息过期、队列已满、消息无法路由等。</p><p><strong>通常是在正常队列上添加</strong><code>x-dead-letter-exchange</code> 和 <code>x-dead-letter-routing-key</code> 参数，将死信消息路由到指定的死信交换机和队列。</p><h4 id="3-4-3-2-延迟队列（Delay-Queue）"><a href="#3-4-3-2-延迟队列（Delay-Queue）" class="headerlink" title="3.4.3.2. 延迟队列（Delay Queue）"></a>3.4.3.2. <strong>延迟队列（Delay Queue）</strong></h4><p><strong>延迟队列用于在指定的时间之后再处理消息。在发送消息时，生产者可以为消息设置一个延迟时间（TTL，Time To Live），消息在队列中到达过期时间后才会变为可消费状态。</strong></p><p><strong>有两种实现方式:</strong></p><ul><li>​<strong>TTL + 死信队列</strong>​**：通过设置消息的TTL（过期时间）和绑定到死信队列实现的。当消息在原队列中过期后，自动进入死信队列，死信队列再路由到目标队列进行处理。**</li><li>​<strong>专门的插件</strong>​**：RabbitMQ 提供了 **<code>rabbitmq-delayed-message-exchange</code> 插件，可以直接支持延迟队列功能。</li></ul><h4 id="3-4-3-3-区别"><a href="#3-4-3-3-区别" class="headerlink" title="3.4.3.3. 区别"></a>3.4.3.3. <strong>区别</strong></h4><ul><li>​<strong>目的不同</strong>​**：死信队列的主要目的是处理无法正常消费的消息，而延迟队列的目的是让消息在特定的延迟时间之后才被处理。**</li><li>​<strong>实现方式不同</strong>​**：死信队列通过设置 <strong><code>x-dead-letter-exchange</code> 和 <code>x-dead-letter-routing-key</code> 实现，而延迟队列通常</strong>通过TTL（消息或队列的过期时间）和死信机制<strong>或者</strong>延迟插件**来实现。</li><li>​<strong>触发条件不同</strong>​**：**<ul><li>​<strong>死信队列</strong>​**：当消息被拒绝、超时或队列满时触发。**</li><li>​<strong>延迟队列</strong>​**：消息在特定的延迟时间后自动变为可消费状态。**</li></ul></li></ul><h1 id="4-创建延迟队列-和-支付队列"><a href="#4-创建延迟队列-和-支付队列" class="headerlink" title="4. 创建延迟队列 和 支付队列"></a>4. <strong>创建延迟队列 和 支付队列</strong></h1><h4 id="4-1-1-1-基于TTL-死信队列实现延迟队列"><a href="#4-1-1-1-基于TTL-死信队列实现延迟队列" class="headerlink" title="4.1.1.1. 基于TTL + 死信队列实现延迟队列"></a>4.1.1.1. <strong>基于TTL + 死信队列实现延迟队列</strong></h4><p><strong>在完成上述配置后，就可以通过</strong><a href="http://120.26.69.48:15672/#/queues">http://localhost:15672/#/queues</a>管理你的rabbitmq。</p><p><strong>我们的延迟队列用于处理用户提交订单后，超时未支付的情况。</strong></p><p><strong>我们先通过一张图来了解一下rabbitqm的延迟队列的工作流程, 具体逻辑请看下图</strong></p><p><img src="/imgs/hou-duan/10.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/10.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h5 id="4-1-1-1-1-创建queue-order-check消费队列"><a href="#4-1-1-1-1-创建queue-order-check消费队列" class="headerlink" title="4.1.1.1.1. 创建queue.order.check消费队列"></a>4.1.1.1.1. <strong>创建</strong><code>queue.order.check</code>消费队列</h5><p><strong>下图中已有的队列是所有队列创建完后的样子</strong></p><p><img src="/imgs/hou-duan/11.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/11.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h5 id="4-1-1-1-2-创建死信交换机exchange-order-delay"><a href="#4-1-1-1-2-创建死信交换机exchange-order-delay" class="headerlink" title="4.1.1.1.2. 创建死信交换机exchange.order.delay"></a>4.1.1.1.2. <strong>创建死信交换机</strong><code>exchange.order.delay</code></h5><p><strong>切换到Exchanges的tab创建一个死信交换机</strong><code>exchange.order.delay</code>，type选择<code>direct</code><br><img src="/imgs/hou-duan/12.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/12.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>然后点进</strong><code>exchange.order.delay</code>交换机，并绑定消费队列<code>queue.order.check</code>，并设置routing key 为<code>queue.order.check</code></p><p><img src="/imgs/hou-duan/13.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/13.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h5 id="4-1-1-1-3-创建死信队列queue-order-delay"><a href="#4-1-1-1-3-创建死信队列queue-order-delay" class="headerlink" title="4.1.1.1.3. 创建死信队列queue.order.delay"></a>4.1.1.1.3. <strong>创建死信队列</strong><code>queue.order.delay</code></h5><p><img src="/imgs/hou-duan/14.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/14.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>这里，我们将死信队列的消息通过配置参数发送到了<code>queue.order.check</code>消费队列中。</p><p><code>&lt;strong&gt;x-message-ttl=10000&lt;/strong&gt;</code>​**，这个参数最好是在代码中配置<strong>​</strong>。**</p><p><strong>最后就是在死信交换机</strong><code>exchange.order.delay</code>中绑定<code>queue.order.delay</code></p><p><img src="/imgs/hou-duan/15.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/15.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h5 id="4-1-1-1-4-验证"><a href="#4-1-1-1-4-验证" class="headerlink" title="4.1.1.1.4. 验证"></a>4.1.1.1.4. <strong>验证</strong></h5><p>**然后，我们可以回到exchange中，点进我们的 **<code>exchange.order.delay</code>交换机，然后向 <code>queu.order.delay</code>这个死信队列发送一条消息</p><p><img src="/imgs/hou-duan/16.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/16.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>在发送完成后，赶快点到</strong><code>queue.order.check</code>这个消费队列去查看，你会发现是查不到信息的。等过了10秒后就会接收到死信队列传过来的数据。到这里，我们基于rabbitmq的延迟队列就实现了。</p><p><img src="/imgs/hou-duan/17.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/17.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h4 id="4-1-1-2-创建支付队列"><a href="#4-1-1-2-创建支付队列" class="headerlink" title="4.1.1.2. 创建支付队列"></a>4.1.1.2. <strong>创建支付队列</strong></h4><p><strong>这里的队列使用主要有以下两点原因</strong></p><ol><li><strong>异步处理支付结果、解耦支付处理流程，以及通过消息队列保证消息的可靠传递，防止消息丢失。</strong></li><li>​<strong>削峰填谷</strong>​**：在订单系统中，下单的时候直接往数据库中写数据时，只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。如果在高峰期时候，并发量突然激增到1000以上，或者更多，这个时候数据库就会可能卡死了，所以通过增加mq这个中间件来对写入数据进行缓存。**</li></ol><h5 id="4-1-1-2-1-创建一个支付队列queue-order-pay"><a href="#4-1-1-2-1-创建一个支付队列queue-order-pay" class="headerlink" title="4.1.1.2.1. 创建一个支付队列queue.order.pay"></a>4.1.1.2.1. <strong>创建一个支付队列queue.order.pay</strong></h5><p><strong>不用加任何arguments</strong></p><p><img src="/imgs/hou-duan/18.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/18.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h5 id="4-1-1-2-2-创建支付队列交换机exchange-order-pay"><a href="#4-1-1-2-2-创建支付队列交换机exchange-order-pay" class="headerlink" title="4.1.1.2.2. 创建支付队列交换机exchange.order.pay"></a>4.1.1.2.2. <strong>创建支付队列交换机exchange.order.pay</strong></h5><p><img src="/imgs/hou-duan/19.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/19.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>点进去再绑定到支付队列</strong><code>queue.order.pay</code></p><p><img src="/imgs/hou-duan/20.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/20.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h1 id="5-使用-cpolar-实现内网穿透"><a href="#5-使用-cpolar-实现内网穿透" class="headerlink" title="5. **使用 **cpolar 实现内网穿透"></a>5. **使用 **cpolar 实现内网穿透</h1><p><strong>因为我们在开发支付功能时，需要接入支付宝。在对应的沙箱应用接入时，需要提供用于接收支付宝沙箱异步通知消息，需要传入http(s)公网可访问的网页地址。若不设置，则无法接收相应的异步通知消息。所以，我们在开发阶段需要将本机地址映射到公网</strong></p><h2 id="5-1-安装homebrew（选填）"><a href="#5-1-安装homebrew（选填）" class="headerlink" title="5.1. 安装homebrew（选填）"></a>5.1. <strong>安装homebrew（选填）</strong></h2><p><strong>如果已经安装，则跳过</strong></p><p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p><h2 id="5-2-安装cpolar"><a href="#5-2-安装cpolar" class="headerlink" title="5.2. 安装cpolar"></a>5.2. <strong>安装cpolar</strong></h2><p><code>brew tap probezy/core &amp;&amp; brew install cpolar</code></p><h2 id="5-3-token验证"><a href="#5-3-token验证" class="headerlink" title="5.3. token验证"></a>5.3. <strong>token验证</strong></h2><p><strong>需要在</strong><a href="https://i.cpolar.com/m/5b6L"><strong>cpolar</strong></a><strong>注册账号</strong></p><p><strong>登录cpolar官网，点击左侧的验证，查看自己的认证token，之后将token贴在命令行里</strong></p><h2 id="5-4-4-安装服务"><a href="#5-4-4-安装服务" class="headerlink" title="5.4. 4.安装服务"></a>5.4. <strong>4.安装服务</strong></h2><p><code>sudo cpolar service install</code></p><h3 id="5-4-1-修改默认端口号"><a href="#5-4-1-修改默认端口号" class="headerlink" title="5.4.1. 修改默认端口号"></a>5.4.1. <strong>修改默认端口号</strong></h3><p><strong>因为我们本机上还有elasticsearch的服务已经占用了9200端口，所以需要修改一下cpolar的默认端口号</strong></p><ol><li><strong>找到cpolar配置文件</strong></li></ol><ul><li>**windows系统: **<code>c:\Users\用户名.cpolar\cpolar.yml</code>，右键点击“打开方式”——“记事本”，选择使用记事本打开</li><li><strong>linux系统：执行命令</strong><code>nano /usr/local/etc/cpolar/cpolar.yml</code></li><li><strong>mac：如果没有配置指定的配置文件，则在</strong><code>~/.cpolar/cpolar.yml</code></li></ul><ol start="2"><li><strong>在配置文件中增加一行参数:</strong><code>client_dashboard_addr: 127.0.0.1:9300</code>。这一行与<code>authtoken是同一级别</code></li><li><strong>保存cpolar配置文件</strong></li><li><strong>如果你已经使用</strong><code>sudo cpolar service start</code>启动了服务，则再运行一下<code>sudo cpolar service restart</code>重启一下。然后就可以在9300上访问了</li></ol><h3 id="5-4-2-启动服务"><a href="#5-4-2-启动服务" class="headerlink" title="5.4.2. 启动服务"></a>5.4.2. <strong>启动服务</strong></h3><p><code>sudo cpolar service start</code></p><h3 id="5-4-3-访问"><a href="#5-4-3-访问" class="headerlink" title="5.4.3. 访问"></a>5.4.3. <strong>访问</strong></h3><p><strong>在浏览器上访问本地9300端口 127.0.0.1:9300，使用cpolar邮箱账号登录cpolar web UI管理界面，即可开始使用cpolar。</strong></p><h3 id="5-4-4-创建隧道"><a href="#5-4-4-创建隧道" class="headerlink" title="5.4.4. 创建隧道"></a>5.4.4. <strong>创建隧道</strong></h3><p><strong>点击左侧仪表盘的隧道管理——创建隧道，我们来创建一条隧道，将在本地15672端口下的rabbitmq服务映射到公网：</strong><img src="/imgs/hou-duan/21.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/21.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>提示隧道创建成功后，页面自动跳转至隧道列表，可以看到刚刚创建成功的“本机rabbitmq”，状态<code>active</code>，表示为正常在线，注意无需再次点击启动。<img src="/imgs/hou-duan/22.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/22.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>点击左侧仪表盘的状态——在线隧道列表，可以看到本机rabbitmq隧道已经有生成了相应的公网地址，一个http协议，一个https协议（免去配置ssl证书的繁琐步骤），均可以访问到本地web服务，复制公网地址。</strong></p><p><img src="/imgs/hou-duan/23.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/23.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-4-5-测试访问公网地址"><a href="#5-4-5-测试访问公网地址" class="headerlink" title="5.4.5. 测试访问公网地址"></a>5.4.5. <strong>测试访问公网地址</strong></h3><p><img src="/imgs/hou-duan/24.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/24.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-4-6-配置固定二级域名"><a href="#5-4-6-配置固定二级域名" class="headerlink" title="5.4.6. 配置固定二级域名"></a>5.4.6. <strong>配置固定二级域名</strong></h3><p>**使用免费的cpolar生成的公网地址为随机临时地址，**24小时内会发生变化，对于需要长期访问的用户不是很方便。为此，我们可以为其配置一个容易记忆的固定二级子域名，同时提高带宽，实现更为流畅的访问。</p><p><em>如果需要升级套餐，可以在</em><a href="https://i.cpolar.com/m/5b6L"><em>官网</em></a><em>升级套餐</em></p><h3 id="5-4-7-保留一个二级子域名"><a href="#5-4-7-保留一个二级子域名" class="headerlink" title="5.4.7. 保留一个二级子域名"></a>5.4.7. <strong>保留一个二级子域名</strong></h3><p><strong>登录</strong><a href="https://dashboard.cpolar.com/reserved">cpolar官网后台</a>，点击左侧的预留，找到保留二级子域名：</p><ul><li><strong>地区：选择China VIP</strong></li><li><strong>二级域名：可自定义填写</strong></li><li><strong>描述：即备注，可自定义填写</strong></li></ul><p><strong>点击</strong><code>保留</code></p><p><img src="/imgs/hou-duan/25.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/25.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>提示子域名保留成功，复制所保留的二级子域名</strong></p><p><img src="/imgs/hou-duan/26.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/26.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-4-8-配置二级子域名"><a href="#5-4-8-配置二级子域名" class="headerlink" title="5.4.8. 配置二级子域名"></a>5.4.8. <strong>配置二级子域名</strong></h3><p><strong>访问</strong><a href="http://127.0.0.1:9200/">http://127.0.0.1:9200/</a>登录cpolar web UI管理界面，点击左侧仪表盘的隧道管理——隧道列表，找到所要配置的隧道，点击右侧的<code>编辑</code></p><p><img src="/imgs/hou-duan/27.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/27.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>修改隧道信息，将保留成功的二级子域名配置到隧道中</strong></p><ul><li><strong>域名类型：选择</strong><code>二级子域名</code></li><li><strong>Sub Domain：填写保留成功的二级子域名，本例为</strong><code>test01</code></li></ul><p><strong>点击</strong><code>更新</code></p><p><img src="/imgs/hou-duan/28.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/28.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>提示更新隧道成功，点击左侧仪表盘的状态——在线隧道列表，可以看到公网地址已经更新为保留成功的二级子域名，将其复制下来。</strong></p><p><img src="/imgs/hou-duan/29.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/29.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-4-9-测试访问公网固定二级子域名"><a href="#5-4-9-测试访问公网固定二级子域名" class="headerlink" title="5.4.9. 测试访问公网固定二级子域名"></a>5.4.9. <strong>测试访问公网固定二级子域名</strong></h3><p><strong>在浏览器上访问固定二级子域名，测试访问成功，现在该公网地址不会随机变化了。</strong></p><p><img src="/imgs/hou-duan/30.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/30.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>如果您想要使用自己的域名来访问本地web服务，cpolar也支持该项功能，详细可以参考下一篇文章教程：</strong></p><ul><li><strong>为本地web服务配置自己的域名</strong></li></ul><h1 id="6-使用Nestjs接入支付宝支付"><a href="#6-使用Nestjs接入支付宝支付" class="headerlink" title="6. 使用Nestjs接入支付宝支付"></a>6. <strong>使用Nestjs接入支付宝支付</strong></h1><h2 id="6-1-登录支付宝开放平台，创建应用"><a href="#6-1-登录支付宝开放平台，创建应用" class="headerlink" title="6.1. 登录支付宝开放平台，创建应用"></a>6.1. <strong>登录支付宝开放平台，创建应用</strong></h2><p><strong>因为我使用的是支付宝的沙箱支付，所以先跳过这一步</strong></p><h2 id="6-2-沙箱接入"><a href="#6-2-沙箱接入" class="headerlink" title="6.2. 沙箱接入"></a>6.2. <strong>沙箱接入</strong></h2><p><strong>登入控制台，找到开发工具推荐-&gt; 沙箱</strong></p><p><strong>开发信息选择</strong>自定义秘钥**，开启<strong>公钥模式</strong>。然后通过支付宝开放平台助手，生成应用公私钥。再通过应用公钥生成支付宝公钥**</p><p><a href="https://opendocs.alipay.com/open/02np9g?pathHash=b87f0c98">https://opendocs.alipay.com/open/02np9g?pathHash=b87f0c98</a></p><h2 id="6-3-梳理实现流程"><a href="#6-3-梳理实现流程" class="headerlink" title="6.3. 梳理实现流程"></a>6.3. <strong>梳理实现流程</strong></h2><p><strong>下图是支付宝的支付调用流程</strong></p><p><img src="/imgs/hou-duan/31.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/31.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>但是，在项目中，我们还有别的业务，不能直接在某个业务逻辑中接入支付宝的支付功能，我们新建一个支付服务，并且通过mq来管信息。</strong></p><p><strong>使用mq的好处就是，增加一个消息中间件，解除多个服务之间的耦合度。因为，在这个电商项目中，每卖掉一个商品，就需要减库存，****​而且一旦用户支付后，需要修改订单状态，并且通知物流进行发货，有的还需要短信通知等等。​</strong>如果不添加消息中间件，​<strong>那么就需要在支付服务或者订单服务中统一进行这一系列的操作。那么这些服务之间的耦合度会很高，当业务进行横向扩展的时候，新接入一个服务，都需要对支付&#x2F;订单服务进行修改，这就增加了出错的可能</strong>​**，且负责这两个服务的工作人员也会很累。那么通过添加消息中间件，当用户支付完成后，直接将第三方的支付信息添加到mq队列中，哪一个服务需要用到这个信息，就去mq中监听即可。这样，程序更健壮，更易于维护**</p><p><strong>所以，改进后的流程如下</strong>​**（PS: 暂时未用到微服务，还是先按照模块拆分的方式来实该时序图<strong>​</strong>）**</p><p><img src="/imgs/hou-duan/32.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/32.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="6-4-实现步骤"><a href="#6-4-实现步骤" class="headerlink" title="6.4. 实现步骤"></a>6.4. <strong>实现步骤</strong></h2><h3 id="6-4-1-支付模块配置"><a href="#6-4-1-支付模块配置" class="headerlink" title="6.4.1. 支付模块配置"></a>6.4.1. <strong>支付模块配置</strong></h3><ul><li><strong>配置支付宝SDK，包括应用ID、商户私钥、支付宝公钥等</strong></li><li><strong>设置RabbitMQ消息队列，定义交换机和队列</strong></li><li><strong>配置支付回调接口，处理支付结果通知</strong></li></ul><h4 id="6-4-1-1-支付宝SDK环境变量配置"><a href="#6-4-1-1-支付宝SDK环境变量配置" class="headerlink" title="6.4.1.1. 支付宝SDK环境变量配置"></a>6.4.1.1. <strong>支付宝SDK环境变量配置</strong></h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># 支付相关# 商户idALIPAY_APP_ID: xxx# 商户秘钥ALIPAY_MERCHANT_PRIVATE_KEY: xxx# 支付宝公钥ALIPAY_PUBLIC_KEY: xxx#支付状态异步通知ALIPAY_NOTIFY_URL: xxx/alipay/alipayNotifyNotice#支付状态同步通知ALIPAY_RETURN_URL: xxx/alipay/alipayReturnNotice#支付宝开发环境网关 用的沙箱的网关ALIPAY_GATEWAY_URL: https://openapi-sandbox.dl.alipaydev.com/gateway.do#签名方式ALIPAY_SIGN_TYPE: RSA2#ALIPAY_CHARSET: utf-8#ALIPAY_FORMAT: json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-1-2-RabbitMQ环境变量配置"><a href="#6-4-1-2-RabbitMQ环境变量配置" class="headerlink" title="6.4.1.2. RabbitMQ环境变量配置"></a>6.4.1.2. <strong>RabbitMQ环境变量配置</strong></h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># 开发环境配置# rabbitmqRMQ_HOST=localhostRMQ_PORT=5672RMQ_USERNAME=xxxRMQ_PASSWORD=xxxRMQ_VIRTUAL_HOST=/ibuy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-2-订单创建流程"><a href="#6-4-2-订单创建流程" class="headerlink" title="6.4.2. 订单创建流程"></a>6.4.2. <strong>订单创建流程</strong></h3><ul><li><strong>用户从购物车下单，系统生成订单号</strong></li><li><strong>创建订单主表记录和订单明细记录</strong></li><li><strong>扣减商品库存</strong></li><li><strong>清空用户购物车缓存</strong></li><li><strong>发送延时消息到RabbitMQ，用于后续订单状态检查</strong></li></ul><h4 id="6-4-2-1-订单实体定义"><a href="#6-4-2-1-订单实体定义" class="headerlink" title="6.4.2.1. 订单实体定义"></a>6.4.2.1. <strong>订单实体定义</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/mall-service/mall-service-order/entities/order.entity.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token string">'tb_order'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderEntity</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  totalNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  totalMoney<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  payMoney<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  createTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  updateTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  payTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  consignTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  endTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  closeTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token comment">// 订单状态：0-未完成，1-已完成，2-已退货</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  orderStatus<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 支付状态：0-未支付，1-已支付，2-支付失败</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  payStatus<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 支付类型：1-在线支付，2-货到付款</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  payType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 订单来源：1-PC端，2-移动端</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  sourceType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  transactionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-2-2-订单创建服务"><a href="#6-4-2-2-订单创建服务" class="headerlink" title="6.4.2.2. 订单创建服务"></a>6.4.2.2. <strong>订单创建服务</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/mall-service/mall-service-order/services/order.service.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectRepository</span></span><span class="token punctuation">(</span>OrderEntity<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> orderRepository<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>OrderEntity<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> cartService<span class="token operator">:</span> CartService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> goodsService<span class="token operator">:</span> GoodsService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> amqpConnection<span class="token operator">:</span> AmqpConnection<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> dataSource<span class="token operator">:</span> DataSource  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>orderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">,</span> user<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> queryRunner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1. 获取购物车数据</span>      <span class="token keyword">const</span> cartItems <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cartService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cartItems <span class="token operator">||</span> cartItems<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'购物车为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 2. 计算订单金额</span>      <span class="token keyword">let</span> totalMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> totalNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> cartItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        totalMoney <span class="token operator">+=</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> item<span class="token punctuation">.</span>num<span class="token punctuation">;</span>        totalNum <span class="token operator">+=</span> item<span class="token punctuation">.</span>num<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 3. 创建订单</span>      <span class="token keyword">const</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ORDER_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>      order<span class="token punctuation">.</span>totalMoney <span class="token operator">=</span> totalMoney<span class="token punctuation">;</span>      order<span class="token punctuation">.</span>totalNum <span class="token operator">=</span> totalNum<span class="token punctuation">;</span>      order<span class="token punctuation">.</span>createTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>orderStatus <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>payStatus <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>payType <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>      order<span class="token punctuation">.</span>sourceType <span class="token operator">=</span> orderDto<span class="token punctuation">.</span>sourceType<span class="token punctuation">;</span>      <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>OrderEntity<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4. 创建订单明细</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> cartItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> orderItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderItemEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderItem<span class="token punctuation">.</span>orderId <span class="token operator">=</span> order<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        orderItem<span class="token punctuation">.</span>goodsId <span class="token operator">=</span> item<span class="token punctuation">.</span>goodsId<span class="token punctuation">;</span>        orderItem<span class="token punctuation">.</span>num <span class="token operator">=</span> item<span class="token punctuation">.</span>num<span class="token punctuation">;</span>        orderItem<span class="token punctuation">.</span>price <span class="token operator">=</span> item<span class="token punctuation">.</span>price<span class="token punctuation">;</span>        <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>OrderItemEntity<span class="token punctuation">,</span> orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. 扣减库存</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goodsService<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>goodsId<span class="token punctuation">,</span> item<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 6. 清空购物车</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cartService<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 7. 发送延时消息</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendDelayMessage</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">rollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> error<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">sendDelayMessage</span><span class="token punctuation">(</span>orderId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amqpConnection<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>      RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">EXCHANGE_ORDER_DELAY</span><span class="token punctuation">,</span>      RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_DELAY</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> orderId <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-3-支付流程"><a href="#6-4-3-支付流程" class="headerlink" title="6.4.3. 支付流程"></a>6.4.3. <strong>支付流程</strong></h3><ul><li><strong>前端调用支付接口，获取支付宝支付链接</strong></li><li><strong>用户跳转到支付宝完成支付</strong></li><li><strong>支付宝异步通知商城支付结果</strong></li><li><strong>系统接收通知，验证签名，发送消息到支付队列</strong></li><li><strong>支付监听器消费消息，更新订单状态</strong></li></ul><h4 id="6-4-3-1-支付服务实现"><a href="#6-4-3-1-支付服务实现" class="headerlink" title="6.4.3.1. 支付服务实现"></a>6.4.3.1. <strong>支付服务实现</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/mall-service/alipay/services/alipay.service.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlipayService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">readonly</span> alipaySdk<span class="token operator">:</span> AlipaySdk<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> configService<span class="token operator">:</span> ConfigService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> orderService<span class="token operator">:</span> OrderService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> amqpConnection<span class="token operator">:</span> AmqpConnection  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alipaySdk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipaySdk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      appId<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_APP_ID'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      privateKey<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_MERCHANT_PRIVATE_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      alipayPublicKey<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_PUBLIC_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      gateway<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_GATEWAY_URL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      signType<span class="token operator">:</span> <span class="token string">'RSA2'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token function">createPayment</span><span class="token punctuation">(</span>orderId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> order <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token string">'订单不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>payStatus <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'订单已支付'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> paymentUrl <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>alipaySdk<span class="token punctuation">.</span><span class="token function">pageExecute</span><span class="token punctuation">(</span><span class="token string">'alipay.trade.page.pay'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      notifyUrl<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_NOTIFY_URL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      returnUrl<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ALIPAY_RETURN_URL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      bizContent<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        outTradeNo<span class="token operator">:</span> order<span class="token punctuation">.</span>id<span class="token punctuation">,</span>        totalAmount<span class="token operator">:</span> order<span class="token punctuation">.</span>totalMoney<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        subject<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">订单</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>order<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        productCode<span class="token operator">:</span> <span class="token string">'FAST_INSTANT_TRADE_PAY'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>paymentUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token function">handlePaymentNotify</span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> signVerified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>alipaySdk<span class="token punctuation">.</span><span class="token function">checkNotifySign</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>signVerified<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">'failure'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>trade_status <span class="token operator">===</span> <span class="token string">'TRADE_SUCCESS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amqpConnection<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>        RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">EXCHANGE_ORDER_PAY</span><span class="token punctuation">,</span>        RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_PAY</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          orderId<span class="token operator">:</span> params<span class="token punctuation">.</span>out_trade_no<span class="token punctuation">,</span>          tradeNo<span class="token operator">:</span> params<span class="token punctuation">.</span>trade_no<span class="token punctuation">,</span>          payTime<span class="token operator">:</span> params<span class="token punctuation">.</span>gmt_payment        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-4-订单状态管理"><a href="#6-4-4-订单状态管理" class="headerlink" title="6.4.4. 订单状态管理"></a>6.4.4. <strong>订单状态管理</strong></h3><ul><li><strong>使用延时队列检查订单支付状态</strong></li><li><strong>对于超时未支付的订单，自动关闭并回滚库存</strong></li><li><strong>支付成功的订单，更新状态为待发货</strong></li></ul><h4 id="6-4-4-1-订单支付消息监听器"><a href="#6-4-4-1-订单支付消息监听器" class="headerlink" title="6.4.4.1. 订单支付消息监听器"></a>6.4.4.1. <strong>订单支付消息监听器</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/mall-service/mall-service-order/listeners/order-pay.listener.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderPayListener</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> orderService<span class="token operator">:</span> OrderService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> goodsService<span class="token operator">:</span> GoodsService  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">RabbitSubscribe</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    exchange<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">EXCHANGE_ORDER_PAY</span><span class="token punctuation">,</span>    routingKey<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_PAY</span><span class="token punctuation">,</span>    queue<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_PAY</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">handlePaymentSuccess</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> orderId<span class="token punctuation">,</span> tradeNo<span class="token punctuation">,</span> payTime <span class="token punctuation">&#125;</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      payStatus<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>      payTime<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>payTime<span class="token punctuation">)</span><span class="token punctuation">,</span>      transactionId<span class="token operator">:</span> tradeNo<span class="token punctuation">,</span>      orderStatus<span class="token operator">:</span> <span class="token string">'1'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-4-2-订单超时检查监听器"><a href="#6-4-4-2-订单超时检查监听器" class="headerlink" title="6.4.4.2. 订单超时检查监听器"></a>6.4.4.2. <strong>订单超时检查监听器</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/mall-service/mall-service-order/listeners/order-check.listener.ts</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderCheckListener</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> orderService<span class="token operator">:</span> OrderService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> goodsService<span class="token operator">:</span> GoodsService<span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> alipayService<span class="token operator">:</span> AlipayService  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">RabbitSubscribe</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    exchange<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">EXCHANGE_ORDER_DLX</span><span class="token punctuation">,</span>    routingKey<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_CHECK</span><span class="token punctuation">,</span>    queue<span class="token operator">:</span> RabbitMQConstants<span class="token punctuation">.</span><span class="token constant">QUEUE_ORDER_CHECK</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">handleOrderCheck</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> orderId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token keyword">const</span> order <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>order <span class="token operator">||</span> order<span class="token punctuation">.</span>payStatus <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭支付宝交易</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>alipayService<span class="token punctuation">.</span><span class="token function">closePayment</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新订单状态</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      orderStatus<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>      payStatus<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>      closeTime<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 回滚库存</span>    <span class="token keyword">const</span> orderItems <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token punctuation">.</span><span class="token function">findOrderItems</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> orderItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goodsService<span class="token punctuation">.</span><span class="token function">increaseStock</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>goodsId<span class="token punctuation">,</span> item<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-5-流程描述"><a href="#6-5-流程描述" class="headerlink" title="6.5. 流程描述"></a>6.5. <strong>流程描述</strong></h2><h3 id="6-5-1-下单支付流程"><a href="#6-5-1-下单支付流程" class="headerlink" title="6.5.1. 下单支付流程"></a>6.5.1. <strong>下单支付流程</strong></h3><ol><li><strong>用户在购物车中选择商品并下单</strong></li><li><strong>系统创建订单记录，生成唯一订单号</strong></li><li><strong>系统扣减相应商品库存，清空用户购物车</strong></li><li><strong>系统向RabbitMQ发送延时消息，设置35分钟后检查订单状态</strong></li><li><strong>用户点击支付按钮，系统调用支付宝SDK生成支付链接</strong></li><li><strong>用户跳转到支付宝页面，完成支付操作</strong></li><li><strong>支付宝通过异步通知接口通知商城支付结果</strong></li><li><strong>系统验证支付宝通知的签名，确认支付成功</strong></li><li><strong>系统将支付结果消息发送到支付队列</strong></li><li><strong>支付监听器消费消息，更新订单状态为已支付、待发货</strong></li></ol><h3 id="6-5-2-订单超时处理流程"><a href="#6-5-2-订单超时处理流程" class="headerlink" title="6.5.2. 订单超时处理流程"></a>6.5.2. <strong>订单超时处理流程</strong></h3><ol><li><strong>用户下单后，系统发送延时消息到RabbitMQ</strong></li><li><strong>35分钟后，延时消息过期，转发到订单检查队列</strong></li><li><strong>订单检查监听器消费消息，检查订单支付状态</strong></li><li><strong>如果订单未支付，系统自动关闭订单</strong></li><li><strong>系统回滚商品库存，恢复库存数量</strong></li><li><strong>系统调用支付宝接口关闭交易</strong></li></ol><h3 id="6-5-3-技术实现细节"><a href="#6-5-3-技术实现细节" class="headerlink" title="6.5.3. 技术实现细节"></a>6.5.3. <strong>技术实现细节</strong></h3><ol><li>​<strong>延时队列实现</strong>​**：**</li></ol><ul><li><strong>使用RabbitMQ的消息过期机制实现延时队列</strong></li><li><strong>消息发送到延时交换机，设置过期时间</strong></li><li><strong>消息过期后，转发到实际消费队列</strong></li></ul><ol start="2"><li>​<strong>事务管理</strong>​**：**</li></ol><ul><li><strong>使用TypeORM的事务功能确保订单创建的原子性</strong></li><li><strong>订单创建、订单明细添加、库存扣减在同一事务中完成</strong></li><li><strong>任何步骤失败，整个事务回滚</strong></li></ul><ol start="3"><li>​<strong>支付宝集成</strong>​**：**</li></ol><ul><li><strong>使用支付宝SDK生成支付链接</strong></li><li><strong>配置异步通知接口，处理支付结果</strong></li><li><strong>验证支付宝通知签名，确保通知真实性</strong></li></ul><ol start="4"><li>​<strong>消息队列应用</strong>​**：**</li></ol><ul><li><strong>使用RabbitMQ实现系统间解耦</strong></li><li><strong>定义不同的交换机和队列处理不同类型的消息</strong></li><li><strong>支持普通订单和秒杀订单的不同处理流程</strong></li></ul><p><strong>通过以上技术和流程，我们实现了一个商城系统的支付功能。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nest.js </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Nestjs+ElasticSearch实现电商搜索功能</title>
      <link href="/2025/03/13/hou-duan/shang-cheng/shi-yong-nestjs-elasticsearch-shi-xian-dian-shang-sou-suo-gong-neng/"/>
      <url>/2025/03/13/hou-duan/shang-cheng/shi-yong-nestjs-elasticsearch-shi-xian-dian-shang-sou-suo-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ElasticSearch简介"><a href="#1-ElasticSearch简介" class="headerlink" title="1. ElasticSearch简介"></a>1. ElasticSearch简介</h1><p>ElasticSearch（简称ES）是一个开源的分布式搜索引擎，基于强大的搜索和分析能力，它不仅支持全文检索、精确查询和复杂的数据聚合分析，还具备高可用的分布式架构。作为一个成熟的企业级解决方案，ES在日志分析、电商搜索等场景中被广泛应用，能够帮助企业高效处理和分析大规模数据。</p><h2 id="1-1-ES-vs-Solr"><a href="#1-1-ES-vs-Solr" class="headerlink" title="1.1 ES vs Solr"></a>1.1 ES vs Solr</h2><ol><li><p><strong>性能特点</strong></p><ul><li>ES：适合实时搜索，数据更新快</li><li>Solr：适合数据相对稳定的场景</li></ul></li><li><p><strong>使用体验</strong></p><ul><li>ES：RESTful API，JSON交互，易上手</li><li>Solr：配置较复杂，学习成本高</li></ul></li></ol><h1 id="2-ElasticSearch核心概念"><a href="#2-ElasticSearch核心概念" class="headerlink" title="2. ElasticSearch核心概念"></a>2. ElasticSearch核心概念</h1><h2 id="2-1-基本概念对照"><a href="#2-1-基本概念对照" class="headerlink" title="2.1 基本概念对照"></a>2.1 基本概念对照</h2><table><thead><tr><th>关系型数据库</th><th>ElasticSearch</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>Database</td><td>Index</td><td>索引</td><td>商品库对应商品索引</td></tr><tr><td>Row</td><td>Document</td><td>文档</td><td>一条商品记录对应一个商品文档</td></tr><tr><td>Column</td><td>Field</td><td>字段</td><td>商品名称、价格等属性</td></tr></tbody></table><p>ElasticSearch是面向文档的搜索引擎，可以存储和索引整个对象或文档。每个索引直接对应关系型数据库中的一个表。</p><blockquote><p>版本说明：自ElasticSearch 7.x起Type概念开始废弃，8.x版本已完全移除。当前文档基于ES 8.14.2版本，采用’索引直接对应表’的表述方式。</p></blockquote><h2 id="2-2-核心概念"><a href="#2-2-核心概念" class="headerlink" title="2.2 核心概念"></a>2.2 核心概念</h2><h3 id="2-2-1-索引（Index）"><a href="#2-2-1-索引（Index）" class="headerlink" title="2.2.1 索引（Index）"></a>2.2.1 索引（Index）</h3><p>类似数据库中的”表”，是文档的逻辑集合。</p><p>关键特性：</p><ul><li>必须明确映射（Mapping） （即数据结构定义）。</li><li>支持动态映射（自动推断字段类型）。</li><li>按时间滚动（如logs-2023-10-01）支持时序数据。</li><li>支持索引别名（Index Alias）用于无缝切换。</li></ul><p>索引命名最佳实践：</p><ul><li>必须全部小写</li><li>建议使用有意义的前缀，如：product_、user_等</li><li>时序数据建议包含日期，如：logs-YYYY-MM-DD</li><li>避免使用特殊字符，推荐使用下划线分隔</li></ul><h3 id="2-2-2-索引别名（Index-Alias）"><a href="#2-2-2-索引别名（Index-Alias）" class="headerlink" title="2.2.2 索引别名（Index Alias）"></a>2.2.2 索引别名（Index Alias）</h3><p>索引别名是指向一个或多个索引的虚拟名称，支持：</p><ul><li>零停机索引切换</li><li>按时间滚动的索引管理</li><li>跨索引搜索</li></ul><p>创建别名示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /logs<span class="token number">-2023</span>/_alias/logs_current<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-3-字段（Field）"><a href="#2-2-3-字段（Field）" class="headerlink" title="2.2.3 字段（Field）"></a>2.2.3 字段（Field）</h3><p>字段是文档中的数据属性，相当于关系型数据库中的字段。</p><h3 id="2-2-4-映射（Mapping）"><a href="#2-2-4-映射（Mapping）" class="headerlink" title="2.2.4 映射（Mapping）"></a>2.2.4 映射（Mapping）</h3><p>映射定义了数据处理规则，包括：</p><ul><li>字段的数据类型</li><li>默认值</li><li>分析器</li><li>是否被索引</li><li>其他数据处理规则</li></ul><h3 id="2-2-5-文档（Document）"><a href="#2-2-5-文档（Document）" class="headerlink" title="2.2.5 文档（Document）"></a>2.2.5 文档（Document）</h3><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。</p><p>每个文档都属于一个索引，并且在该索引中具有唯一的标识符（_id）。文档是不可变的，每次更新实际上是创建一个新版本。</p><p>在一个index中，你可以存储任意多的文档。注意，在ES 8.x版本中Type概念已完全移除，每个索引直接对应一种文档类型。</p><h3 id="2-2-6-近实时性（NRT）"><a href="#2-2-6-近实时性（NRT）" class="headerlink" title="2.2.6 近实时性（NRT）"></a>2.2.6 近实时性（NRT）</h3><p>文档写入后，默认 1 秒（refresh_interval）后可被搜索。<br>通过内存缓冲区（In-memory buffer）和分段（Segment）机制实现。</p><h3 id="2-2-7-集群（Cluster）"><a href="#2-2-7-集群（Cluster）" class="headerlink" title="2.2.7 集群（Cluster）"></a>2.2.7 集群（Cluster）</h3><p>集群是一个或多个节点的集合，它们共同持有数据并提供索引和搜索功能。集群通过唯一名称标识，默认为”elasticsearch”。</p><h3 id="2-2-8-节点（Node）"><a href="#2-2-8-节点（Node）" class="headerlink" title="2.2.8 节点（Node）"></a>2.2.8 节点（Node）</h3><p>节点是集群中的单个服务器，负责数据存储和参与集群的索引、搜索功能。每个节点都有唯一的名字。</p><p>节点类型：</p><ol><li><p>主节点（Master Node）</p><ul><li>负责集群管理和配置</li><li>处理节点的添加和移除</li><li>索引的创建和删除</li></ul></li><li><p>数据节点（Data Node）</p><ul><li>存储数据和执行数据相关操作</li><li>执行CRUD、搜索和聚合</li></ul></li><li><p>协调节点（Coordinating Node）</p><ul><li>负责路由搜索和索引请求</li><li>合并各数据节点的结果</li></ul></li><li><p>摄入节点（Ingest Node）</p><ul><li>在索引前对文档进行预处理</li><li>执行管道处理</li></ul></li></ol><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">+------------------+|     Cluster      ||   +---------+    ||   | Master  |    ||   | Node    |    ||   +----+----+    ||        |         || +------+------+  || |             |  || v             v  |+------+    +------+| Data |    | Data || Node |    | Node |+------+    +------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个ASCII图展示了一个简单的ElasticSearch集群架构，包含一个主节点和两个数据节点。</p><h3 id="2-2-9-分片和副本（Shards-Replicas）"><a href="#2-2-9-分片和副本（Shards-Replicas）" class="headerlink" title="2.2.9 分片和副本（Shards &amp; Replicas）"></a>2.2.9 分片和副本（Shards &amp; Replicas）</h3><p><strong>分片</strong>的主要作用：</p><ul><li>水平分割&#x2F;扩展内容容量</li><li>分布式并行操作，提高性能</li></ul><p><strong>副本</strong>的重要性：</p><ul><li>提供高可用性</li><li>提升搜索性能（并行搜索）</li></ul><p>默认配置：</p><ul><li>每个索引1个主分片（Elasticsearch 7.0+默认）</li><li>每个主分片1个副本</li><li>双节点集群共有10个分片（5主 + 5副本）</li></ul><h1 id="3-使用Docker安装ElasticSearch-8-14-2-非安全"><a href="#3-使用Docker安装ElasticSearch-8-14-2-非安全" class="headerlink" title="3. 使用Docker安装ElasticSearch 8.14.2 (非安全)"></a>3. 使用Docker安装ElasticSearch 8.14.2 (非安全)</h1><p>注意：以下安装说明仅适用于开发环境。在生产环境中，需要启用SSL加密并配置适当的安全策略。</p><h2 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h2><ol><li><p>设置环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim ~/.bash_profile 将下面两个变量添加到系统环境变量中</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ELASTIC_PASSWORD</span><span class="token operator">=</span><span class="token string">"123456"</span>  <span class="token comment"># elastic用户密码</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KIBANA_PASSWORD</span><span class="token operator">=</span><span class="token string">"123456"</span>   <span class="token comment"># Kibana系统用户密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后运行 <code>source ~/.bash_profile</code> 使配置生效</p></li><li><p>创建Docker网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create es-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-2-运行ElasticSearch"><a href="#3-2-运行ElasticSearch" class="headerlink" title="3.2 运行ElasticSearch"></a>3.2 运行ElasticSearch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> es-dev <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:9200:9200 <span class="token punctuation">\</span>  <span class="token parameter variable">--network</span> es-net <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> es-data:/usr/share/elasticsearch/data <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTIC_PASSWORD</span><span class="token operator">=</span><span class="token variable">$ELASTIC_PASSWORD</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"xpack.security.http.ssl.enabled=false"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"xpack.license.self_generated.type=basic"</span> <span class="token punctuation">\</span>  elasticsearch:8.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-运行Kibana（可选）"><a href="#3-3-运行Kibana（可选）" class="headerlink" title="3.3 运行Kibana（可选）"></a>3.3 运行Kibana（可选）</h2><ol><li><p>设置kibana_system用户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-u</span> elastic:<span class="token variable">$ELASTIC_PASSWORD</span> <span class="token parameter variable">-X</span> POST <span class="token punctuation">\</span>  http://localhost:9200/_security/user/kibana_system/_password <span class="token punctuation">\</span>  <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> <span class="token string">'&#123;"password":"'</span><span class="token variable">$KIBANA_PASSWORD</span><span class="token string">'"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动Kibana容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kibana-dev <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:5601:5601 <span class="token punctuation">\</span>  <span class="token parameter variable">--network</span> es-net <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://es-dev:9200 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_USERNAME</span><span class="token operator">=</span>kibana_system <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_PASSWORD</span><span class="token operator">=</span><span class="token variable">$KIBANA_PASSWORD</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"xpack.security.enabled=false"</span> <span class="token punctuation">\</span>  kibana:8.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-4-许可证配置"><a href="#3-4-许可证配置" class="headerlink" title="3.4 许可证配置"></a>3.4 许可证配置</h2><ol><li><p>检查许可证状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-u</span> elastic:<span class="token variable">$ELASTIC_PASSWORD</span> <span class="token parameter variable">-X</span> GET <span class="token string">"http://localhost:9200/_license"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>激活基础许可证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-u</span> elastic:<span class="token variable">$ELASTIC_PASSWORD</span> <span class="token parameter variable">-X</span> POST <span class="token string">"http://localhost:9200/_license/start_basic?acknowledge=true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-5-安装IK分词器"><a href="#3-5-安装IK分词器" class="headerlink" title="3.5 安装IK分词器"></a>3.5 安装IK分词器</h2><ol><li><p>进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> es-dev <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装分词器</p></li></ol><pre class="line-numbers language-none"><code class="language-none">.&#x2F;bin&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;get.infini.cloud&#x2F;elasticsearch&#x2F;analysis-ik&#x2F;8.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>重启容器</li></ol><pre class="line-numbers language-none"><code class="language-none">docker restart es-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-6-验证安装"><a href="#3-6-验证安装" class="headerlink" title="3.6 验证安装"></a>3.6 验证安装</h2><ol><li>使用curl验证</li></ol><pre class="line-numbers language-none"><code class="language-none">curl -u elastic:$ELASTIC_PASSWORD -X GET &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;_analyze&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;  &quot;analyzer&quot;: &quot;ik_max_word&quot;,  &quot;text&quot;: &quot;中国足球真是太烂了&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用Kibana Dev Tools验证</li></ol><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;_analyze&#123;  &quot;analyzer&quot;: &quot;ik_max_word&quot;,  &quot;text&quot;: &quot;中国足球真是太烂了&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：9300端口用于节点间通信，9200端口用于HTTP API访问。</p><h1 id="4-生产环境安装-Elasticsearch（启用ssl）"><a href="#4-生产环境安装-Elasticsearch（启用ssl）" class="headerlink" title="4. 生产环境安装 Elasticsearch（启用ssl）"></a>4. 生产环境安装 Elasticsearch（启用ssl）</h1><p>这部分可以参考官网的文档</p><p><a href="https://elastic.ac.cn/guide/en/elasticsearch/reference/8.17/docker.html#docker-cli-run-dev-mode">https://elastic.ac.cn/guide/en/elasticsearch/reference/8.17/docker.html#docker-cli-run-dev-mode</a></p><p>主要是需要生成SSL证书</p><h4 id="1-将ca-crt-SSL证书从容器复制到本地机器。"><a href="#1-将ca-crt-SSL证书从容器复制到本地机器。" class="headerlink" title="1. 将ca.crt SSL证书从容器复制到本地机器。"></a>1. 将ca.crt SSL证书从容器复制到本地机器。</h4><p><code>docker cp ibuy-service-es01:/usr/share/elasticsearch/config/certs/ca/ca.crt .</code></p><h4 id="2-请求一个REST-API，确保更够通过ca访问elastic"><a href="#2-请求一个REST-API，确保更够通过ca访问elastic" class="headerlink" title="2. 请求一个REST API，确保更够通过ca访问elastic"></a>2. 请求一个REST API，确保更够通过ca访问elastic</h4><p><code>curl --cacert ca.crt -u elastic:[ELASTIC_PASSWORD] https://localhost:9200</code></p><p><strong>这里的</strong> <strong>[ELASTIC_PASSWORD]要替换成你自己.env文件中设置的密码</strong></p><p>如果一切正常，你会看到如下内容:</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;name&quot; : &quot;es01&quot;,  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,  &quot;cluster_uuid&quot; : &quot;t5DlPYalRAm_tceqPUo7gw&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;8.14.2&quot;,    &quot;build_flavor&quot; : &quot;default&quot;,    &quot;build_type&quot; : &quot;docker&quot;,    &quot;build_hash&quot; : &quot;2afe7caceec8a26ff53817e5ed88235e90592a1b&quot;,    &quot;build_date&quot; : &quot;2024-07-01T22:06:58.515911606Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;9.10.0&quot;,    &quot;minimum_wire_compatibility_version&quot; : &quot;7.17.0&quot;,    &quot;minimum_index_compatibility_version&quot; : &quot;7.0.0&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-基于Kibana掌握DSL语句"><a href="#5-基于Kibana掌握DSL语句" class="headerlink" title="5. 基于Kibana掌握DSL语句"></a>5. 基于Kibana掌握DSL语句</h1><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p><p>这一章主要是通过Kibana来熟悉ElasticSearch相关的DSL语句，只简单介绍了一下Kibana，并不深入。我们也可以通过<code>curl</code>命令或者 <code>postman</code>来访问ElasticSearch</p><h2 id="5-1-DSL语句使用"><a href="#5-1-DSL语句使用" class="headerlink" title="5.1 DSL语句使用"></a>5.1 DSL语句使用</h2><p>在登录了Kibana后，点开左上角菜单栏，点击 <strong>Management</strong> 下的 <strong>Dev Tools</strong>, 然后即可进行下面的练习。</p><h3 id="5-1-1-Query-DSL结构化查询介绍"><a href="#5-1-1-Query-DSL结构化查询介绍" class="headerlink" title="5.1.1 Query DSL结构化查询介绍"></a>5.1.1 Query DSL结构化查询介绍</h3><p>Query DSL是一个Java开源框架用于构建类型安全的SQL查询语句。采用API代替传统的拼接字符串来构造查询语句。</p><p>目前Querydsl支持的平台包括：</p><ul><li>JPA</li><li>JDO</li><li>SQL</li><li>Java Collections</li><li>RDF</li><li>Lucene</li><li>Hibernate Search</li></ul><p>Elasticsearch提供了一整套基于JSON的查询DSL语言来定义查询。Query DSL当作是一系列的抽象的查询表达式树(AST)特定查询能够包含其它的查询，(如 bool ), 有些查询能够包含过滤器(如 constant_score), 还有的可以同时包含查询和过滤器 (如 filtered). 都能够从ES支持查询集合里面选择任意一个查询或者是从过滤器集合里面挑选出任意一个过滤器, 这样的话，我们就可以构造出任意复杂（maybe 非常有趣）的查询了。</p><h3 id="5-1-2-基础使用"><a href="#5-1-2-基础使用" class="headerlink" title="5.1.2 基础使用"></a>5.1.2 基础使用</h3><h4 id="5-1-2-1-基本索引操作"><a href="#5-1-2-1-基本索引操作" class="headerlink" title="5.1.2.1 基本索引操作"></a>5.1.2.1 基本索引操作</h4><ol><li><strong>查询所有索引</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;_cat&#x2F;indices?v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>删除某个索引</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>新增索引</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">PUT &#x2F;user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>创建映射</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">PUT &#x2F;user&#x2F;_mapping&#123;  &quot;properties&quot;: &#123;    &quot;name&quot;:&#123;      &quot;type&quot;: &quot;text&quot;,      &quot;analyzer&quot;: &quot;ik_smart&quot;,      &quot;search_analyzer&quot;: &quot;ik_smart&quot;,      &quot;store&quot;: false    &#125;,    &quot;city&quot;:&#123;      &quot;type&quot;: &quot;text&quot;,      &quot;analyzer&quot;: &quot;ik_smart&quot;,      &quot;search_analyzer&quot;: &quot;ik_smart&quot;,      &quot;store&quot;: false    &#125;,    &quot;age&quot;:&#123;      &quot;type&quot;: &quot;long&quot;,      &quot;store&quot;: false    &#125;,    &quot;description&quot;:&#123;      &quot;type&quot;: &quot;text&quot;,      &quot;analyzer&quot;: &quot;ik_smart&quot;,      &quot;search_analyzer&quot;: &quot;ik_smart&quot;,      &quot;store&quot;: false    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-2-文档操作"><a href="#5-1-2-2-文档操作" class="headerlink" title="5.1.2.2 文档操作"></a>5.1.2.2 文档操作</h4><h5 id="5-1-2-2-1-新增文档"><a href="#5-1-2-2-1-新增文档" class="headerlink" title="5.1.2.2.1 新增文档"></a>5.1.2.2.1 新增文档</h5><pre class="line-numbers language-none"><code class="language-none"># 手动指定id用put方法PUT &#x2F;user&#x2F;_doc&#x2F;1&#123;  &quot;name&quot;:&quot;李四&quot;,  &quot;age&quot;:22,  &quot;city&quot;:&quot;深圳&quot;,  &quot;description&quot;:&quot;李四来自湖北武汉！&quot;&#125;# 自生成id用POSTPOST &#x2F;user&#x2F;_doc&#123;  &quot;name&quot;:&quot;李四&quot;,  &quot;age&quot;:22,  &quot;city&quot;:&quot;深圳&quot;,  &quot;description&quot;:&quot;李四来自湖北武汉！&quot;&#125;#新增文档数据 id&#x3D;2PUT &#x2F;user&#x2F;_doc&#x2F;2&#123;  &quot;name&quot;:&quot;王五&quot;,  &quot;age&quot;:35,  &quot;city&quot;:&quot;深圳&quot;,  &quot;description&quot;:&quot;王五家住在深圳！&quot;&#125;#新增文档数据 id&#x3D;3PUT &#x2F;user&#x2F;_doc&#x2F;3&#123;  &quot;name&quot;:&quot;张三&quot;,  &quot;age&quot;:19,  &quot;city&quot;:&quot;深圳&quot;,  &quot;description&quot;:&quot;在深圳打工，来自湖北武汉&quot;&#125;#新增文档数据 id&#x3D;4PUT &#x2F;user&#x2F;_doc&#x2F;4&#123;  &quot;name&quot;:&quot;张三丰&quot;,  &quot;age&quot;:66,  &quot;city&quot;:&quot;武汉&quot;,  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;&#125;#新增文档数据 id&#x3D;5PUT &#x2F;user&#x2F;_doc&#x2F;5&#123;  &quot;name&quot;:&quot;赵子龙&quot;,  &quot;age&quot;:77,  &quot;city&quot;:&quot;广州&quot;,  &quot;description&quot;:&quot;赵子龙来自深圳宝安，但是在广州工作！&quot;,  &quot;address&quot;:&quot;广东省茂名市&quot;&#125;#新增文档数据 id&#x3D;6PUT &#x2F;user&#x2F;_doc&#x2F;6&#123;  &quot;name&quot;:&quot;赵毅&quot;,  &quot;age&quot;:55,  &quot;city&quot;:&quot;广州&quot;,  &quot;description&quot;:&quot;赵毅来自广州白云区，从事电子商务8年！&quot;&#125;#新增文档数据 id&#x3D;7PUT &#x2F;user&#x2F;_doc&#x2F;7&#123;  &quot;name&quot;:&quot;赵哈哈&quot;,  &quot;age&quot;:57,  &quot;city&quot;:&quot;武汉&quot;,  &quot;description&quot;:&quot;武汉赵哈哈，在深圳打工已有半年了，月薪7500！&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-1-2-2-2-修改文档"><a href="#5-1-2-2-2-修改文档" class="headerlink" title="5.1.2.2.2 修改文档"></a>5.1.2.2.2 修改文档</h5><h6 id="5-1-2-2-2-1-替换操作"><a href="#5-1-2-2-2-1-替换操作" class="headerlink" title="5.1.2.2.2.1 替换操作"></a>5.1.2.2.2.1 替换操作</h6><p>使用GET命令查看：</p><pre class="line-numbers language-none"><code class="language-none">#查询user索引下所有的文档GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match_all&quot;: &#123;&#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新数据可以使用之前的增加操作,这种操作会将整个数据替换掉，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">#替换id&#x3D;4的数据PUT &#x2F;user&#x2F;_doc&#x2F;4&#123;  &quot;name&quot;:&quot;张三丰&quot;,  &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再查询数据</p><pre class="line-numbers language-none"><code class="language-none">#查询id为4的数据GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;term&quot;: &#123;      &quot;_id&quot;: &quot;4&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-1-2-2-2-2-更新操作"><a href="#5-1-2-2-2-2-更新操作" class="headerlink" title="5.1.2.2.2.2 更新操作"></a>5.1.2.2.2.2 更新操作</h6><p>我们先使用下面命令恢复数据：</p><pre class="line-numbers language-none"><code class="language-none">#恢复文档数据 id&#x3D;4PUT &#x2F;user&#x2F;_doc&#x2F;4&#123;  &quot;name&quot;:&quot;张三丰&quot;,  &quot;age&quot;:66,  &quot;city&quot;:&quot;武汉&quot;,  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用POST更新某个列的数据</p><pre class="line-numbers language-none"><code class="language-none">#使用POST更新某个域的数据POST &#x2F;user&#x2F;_update&#x2F;4&#123;  &quot;doc&quot;:&#123;    &quot;name&quot;:&quot;张三丰&quot;,    &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用GET命令验证一下：</p><pre class="line-numbers language-none"><code class="language-none">#根据ID查询GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;term&quot;: &#123;      &quot;_id&quot;: &quot;4&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-1-2-2-3-删除文档"><a href="#5-1-2-2-3-删除文档" class="headerlink" title="5.1.2.2.3 删除文档"></a>5.1.2.2.3 删除文档</h5><pre class="line-numbers language-none"><code class="language-none">#删除数据DELETE user&#x2F;_doc&#x2F;7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-1-3-数据查询"><a href="#5-1-3-数据查询" class="headerlink" title="5.1.3 数据查询"></a>5.1.3 数据查询</h3><h4 id="5-1-3-1-查询所有数据"><a href="#5-1-3-1-查询所有数据" class="headerlink" title="5.1.3.1 查询所有数据"></a>5.1.3.1 查询所有数据</h4><pre class="line-numbers language-none"><code class="language-none">#查询所有GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match_all&quot;: &#123;&#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-3-2-根据ID查询"><a href="#5-1-3-2-根据ID查询" class="headerlink" title="5.1.3.2 根据ID查询"></a>5.1.3.2 根据ID查询</h4><pre class="line-numbers language-none"><code class="language-none">#根据ID查询GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;term&quot;: &#123;      &quot;_id&quot;: &quot;4&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-3-3-排序查询"><a href="#5-1-3-3-排序查询" class="headerlink" title="5.1.3.3 排序查询"></a>5.1.3.3 排序查询</h4><pre class="line-numbers language-none"><code class="language-none">#搜索排序GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;:&#123;    &quot;match_all&quot;: &#123;&#125;  &#125;,  &quot;sort&quot;:&#123;    &quot;age&quot;:&#123;      &quot;order&quot;:&quot;desc&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-3-4-分页查询"><a href="#5-1-3-4-分页查询" class="headerlink" title="5.1.3.4 分页查询"></a>5.1.3.4 分页查询</h4><pre class="line-numbers language-none"><code class="language-none">#分页实现GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;:&#123;    &quot;match_all&quot;: &#123;&#125;  &#125;,  &quot;sort&quot;:&#123;    &quot;age&quot;:&#123;      &quot;order&quot;:&quot;desc&quot;    &#125;  &#125;,  &quot;from&quot;: 0,  &quot;size&quot;: 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：<br>from:从下N的记录开始查询<br>size:每页显示条数</p><h3 id="5-1-4-过滤查询"><a href="#5-1-4-过滤查询" class="headerlink" title="5.1.4 过滤查询"></a>5.1.4 过滤查询</h3><h4 id="5-1-4-1-简单term过滤"><a href="#5-1-4-1-简单term过滤" class="headerlink" title="5.1.4.1 简单term过滤"></a>5.1.4.1 简单term过滤</h4><p>term主要用于分词精确匹配，如字符串、数值、日期等<br>会计算相关性评分<br>以下情况不适用：<br>1.列中除英文字符外有其它值<br>2.字符串值中有冒号或中文<br>3.系统自带属性如_version</p><p>如下案例：</p><pre class="line-numbers language-none"><code class="language-none">#过滤查询-termGET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;      &quot;term&quot;: &#123;        &quot;city&quot;: &quot;深圳&quot;      &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-2-简单terms过滤"><a href="#5-1-4-2-简单terms过滤" class="headerlink" title="5.1.4.2 简单terms过滤"></a>5.1.4.2 简单terms过滤</h4><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配 。</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#过滤查询-terms 允许多个TermGET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;:&#123;    &quot;terms&quot;:&#123;      &quot;city&quot;:        [          &quot;武汉&quot;,          &quot;广州&quot;        ]    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-3-range过滤"><a href="#5-1-4-3-range过滤" class="headerlink" title="5.1.4.3 range过滤"></a>5.1.4.3 range过滤</h4><p>range过滤允许我们按照指定范围查找一批数据。例如我们查询年龄范围</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#过滤-range 范围过滤#gt表示&gt; gte表示&#x3D;&gt;#lt表示&lt; lte表示&lt;&#x3D;GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;:&#123;    &quot;range&quot;: &#123;      &quot;age&quot;: &#123;        &quot;gte&quot;: 30,        &quot;lte&quot;: 57      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-4-exists过滤"><a href="#5-1-4-4-exists过滤" class="headerlink" title="5.1.4.4 exists过滤"></a>5.1.4.4 exists过滤</h4><p>exists 过滤可以用于查找拥有某个域的数据</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#过滤搜索 exists：是指包含某个域的数据检索GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;exists&quot;:&#123;      &quot;field&quot;:&quot;address&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-5-match-all查询"><a href="#5-1-4-5-match-all查询" class="headerlink" title="5.1.4.5 match_all查询"></a>5.1.4.5 match_all查询</h4><p>可以查询到所有文档，是没有查询条件下的默认语句。</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#查询所有 match_allGET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match_all&quot;: &#123;&#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-6-match查询"><a href="#5-1-4-6-match查询" class="headerlink" title="5.1.4.6 match查询"></a>5.1.4.6 match查询</h4><p>match查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</p><p>如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析match一下查询字符：</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#字符串匹配GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;description&quot;: &quot;武汉&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-7-prefix查询"><a href="#5-1-4-7-prefix查询" class="headerlink" title="5.1.4.7 prefix查询"></a>5.1.4.7 prefix查询</h4><p>以什么字符开头的，可以更简单地用 prefix ,例如查询所有以张开始的用户描述</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#前缀匹配 prefixGET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;prefix&quot;: &#123;      &quot;name&quot;: &#123;        &quot;value&quot;: &quot;赵&quot;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-8-multi-match查询"><a href="#5-1-4-8-multi-match查询" class="headerlink" title="5.1.4.8 multi_match查询"></a>5.1.4.8 multi_match查询</h4><p>multi_match查询允许你做match查询的基础上同时搜索多个字段，在多个字段中同时查一个</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#多个域匹配搜索GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;multi_match&quot;: &#123;      &quot;query&quot;: &quot;深圳&quot;,      &quot;fields&quot;: [        &quot;city&quot;,        &quot;description&quot;      ]    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-9-bool过滤"><a href="#5-1-4-9-bool过滤" class="headerlink" title="5.1.4.9 bool过滤"></a>5.1.4.9 bool过滤</h4><p>bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含一下操作符：</p><ul><li>must : 多个查询条件的完全匹配,相当于 and。</li><li>must_not : 多个查询条件的相反匹配，相当于 not。</li><li>should : 至少有一个查询条件匹配, 相当于 or。</li><li>filter 子句也要求查询条件 必须 匹配，但与 must 不同，filter 不会影响文档的相关性评分。它仅仅是一个过滤器，用于限制符合条件的文档，而不会对文档进行评分计算</li></ul><p>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><p>案例如下：</p><pre class="line-numbers language-none"><code class="language-none">#过滤搜索 bool #must : 多个查询条件的完全匹配,相当于 and。#must_not : 多个查询条件的相反匹配，相当于 not。#should : 至少有一个查询条件匹配, 相当于 or。GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;          &quot;term&quot;: &#123;            &quot;city&quot;: &#123;              &quot;value&quot;: &quot;深圳&quot;            &#125;          &#125;        &#125;,        &#123;          &quot;range&quot;:&#123;            &quot;age&quot;:&#123;              &quot;gte&quot;:20,              &quot;lte&quot;:99            &#125;          &#125;        &#125;      ]    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-4-10-bool-filter过滤"><a href="#5-1-4-10-bool-filter过滤" class="headerlink" title="5.1.4.10 bool.filter过滤"></a>5.1.4.10 bool.filter过滤</h4><ul><li>作用：filter 子句也要求查询条件 必须 匹配，但与 must 不同，filter 不会影响文档的相关性评分。它仅仅是一个过滤器，用于限制符合条件的文档，而不会对文档进行评分计算。</li><li>打分（评分）：filter 不参与相关性评分的计算，因此它比 must 更快，适合用来过滤大量数据，而不需要进行复杂的打分计算。</li><li>适用场景：在你只需要过滤出符合某些条件的文档，而不关心它们的相关性评分时使用</li></ul><p>在这个例子中，文档必须有 city 为 “深圳”，并且 price 在 100 到 200 之间。由于使用了 filter，查询不会对文档进行打分计算，而是直接返回匹配的文档。</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;filter&quot;: [        &#123;          &quot;term&quot;: &#123;            &quot;city&quot;: &#123;              &quot;value&quot;: &quot;深圳&quot;            &#125;          &#125;        &#125;,        &#123;          &quot;range&quot;:&#123;            &quot;age&quot;:&#123;              &quot;gte&quot;:20,              &quot;lte&quot;:99            &#125;          &#125;        &#125;      ]    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-配置Data-View-可选"><a href="#5-2-配置Data-View-可选" class="headerlink" title="5.2 配置Data View (可选)"></a>5.2 配置Data View (可选)</h2><p>后续当我们需要通过Kibana进行可视化分析时（如监控商品访问量、分析用户搜索热词），才需配置Data View。</p><h3 id="5-2-1-左侧菜单选择Management"><a href="#5-2-1-左侧菜单选择Management" class="headerlink" title="5.2.1 左侧菜单选择Management"></a>5.2.1 左侧菜单选择Management</h3><p><img src="/imgs/hou-duan/1.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-2-2-选择Kibana-Data-Views"><a href="#5-2-2-选择Kibana-Data-Views" class="headerlink" title="5.2.2 选择Kibana -&gt; Data Views"></a>5.2.2 选择Kibana -&gt; Data Views</h3><p><img src="/imgs/hou-duan/2.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="5-2-3-创建data-view"><a href="#5-2-3-创建data-view" class="headerlink" title="5.2.3 创建data view"></a>5.2.3 创建data view</h3><p>点击右上角 <code>Create data view</code>按钮创建</p><p><img src="/imgs/hou-duan/3.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>比如我要创建一个索引</strong> <code>blog1</code> <strong>的视图</strong></p><ul><li><strong>Name：表示视图名称，可以叫</strong> <code>blog1-view</code></li><li><strong>Index pattern: 你需要先创建索引，然后再选择索引。这里我们已经有了blog1的索引就直接填</strong> <code>blog1*</code></li></ul><h3 id="5-2-4-查看视图"><a href="#5-2-4-查看视图" class="headerlink" title="5.2.4 查看视图"></a>5.2.4 查看视图</h3><p>在菜单栏点击Discover后选择我们刚刚创建的视图名就可以看到了</p><p><img src="/imgs/hou-duan/4.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><img src="/imgs/hou-duan/5.png" class="lazyload placeholder" data-srcset="/imgs/hou-duan/5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h1 id="6-商品搜索功能"><a href="#6-商品搜索功能" class="headerlink" title="6. 商品搜索功能"></a>6. 商品搜索功能</h1><h2 id="6-1-功能概述"><a href="#6-1-功能概述" class="headerlink" title="6.1 功能概述"></a>6.1 功能概述</h2><p>商品搜索服务是一个基于Elasticsearch的高性能搜索解决方案，提供商品的全文检索、过滤、排序和聚合等功能。该服务支持商品数据的自动同步，并提供灵活的搜索接口。</p><h2 id="6-2-技术栈"><a href="#6-2-技术栈" class="headerlink" title="6.2 技术栈"></a>6.2 技术栈</h2><h3 id="6-2-1-核心依赖"><a href="#6-2-1-核心依赖" class="headerlink" title="6.2.1 核心依赖"></a>6.2.1 核心依赖</h3><ul><li><code>@nestjs/elasticsearch</code>: Elasticsearch的NestJS集成模块</li><li><code>@elastic/elasticsearch</code>: Elasticsearch官方Node.js客户端</li><li><code>@nestjs/schedule</code>: 用于定时任务的NestJS模块</li><li><code>nest-winston</code>: 用于日志记录的Winston集成</li></ul><h3 id="6-2-2-相关模块"><a href="#6-2-2-相关模块" class="headerlink" title="6.2.2 相关模块"></a>6.2.2 相关模块</h3><ul><li><code>mall-service-goods/sku</code>: SKU服务模块，提供商品数据源</li><li><code>common/utils/Result</code>: 统一响应结果处理工具</li></ul><h2 id="6-3-功能实现"><a href="#6-3-功能实现" class="headerlink" title="6.3 功能实现"></a>6.3 功能实现</h2><h3 id="6-3-1-数据同步机制"><a href="#6-3-1-数据同步机制" class="headerlink" title="6.3.1 数据同步机制"></a>6.3.1 数据同步机制</h3><h4 id="6-3-1-1-自动同步"><a href="#6-3-1-1-自动同步" class="headerlink" title="6.3.1.1 自动同步"></a>6.3.1.1 自动同步</h4><p>使用<code>@nestjs/schedule</code>的<code>@Cron</code>装饰器实现每天凌晨2点的自动同步：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Cron</span></span><span class="token punctuation">(</span><span class="token string">'0 0 2 * * *'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token function">syncSkuData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'开始同步SKU数据到Elasticsearch...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">importSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'SKU数据同步完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'SKU数据同步失败:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-1-2-分批导入"><a href="#6-3-1-2-分批导入" class="headerlink" title="6.3.1.2 分批导入"></a>6.3.1.2 分批导入</h4><p>为了提高数据导入的可靠性和性能，实现了分批处理机制：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token function">importSku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 检查索引是否存在，不存在则创建</span>    <span class="token keyword">const</span> indexExists <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elasticsearchService<span class="token punctuation">.</span>indices<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      index<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ES_INDEX</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>indexExists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSkuIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2. 获取所有SKU数据</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skuService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> skuInfos <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment">// 3. 分批处理数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> skuInfos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">BATCH_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> batch <span class="token operator">=</span> skuInfos<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">BATCH_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processBatch</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">'info'</span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已处理 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">+</span> batch<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>skuInfos<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 条数据</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'导入SKU数据失败:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-1-3-重试机制"><a href="#6-3-1-3-重试机制" class="headerlink" title="6.3.1.3 重试机制"></a>6.3.1.3 重试机制</h4><p>实现了带有指数退避的重试机制，最大重试次数为3次：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">processBatch</span><span class="token punctuation">(</span>  batch<span class="token operator">:</span> SkuEntity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  retryCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> operations <span class="token operator">=</span> batch<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>skuInfo<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> index<span class="token operator">:</span> <span class="token punctuation">&#123;</span> _index<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ES_INDEX</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> skuInfo<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      skuInfo<span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> errors<span class="token punctuation">,</span> items <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elasticsearchService<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      operations<span class="token punctuation">,</span>      refresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 收集失败的项</span>      <span class="token keyword">const</span> failedItems <span class="token operator">=</span> items        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>index<span class="token operator">?.</span>error<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          id<span class="token operator">:</span> item<span class="token punctuation">.</span>index<span class="token operator">?.</span>_id<span class="token punctuation">,</span>          error<span class="token operator">:</span> item<span class="token punctuation">.</span>index<span class="token operator">?.</span>error<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>failedItems<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> retryCount <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MAX_RETRIES</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> failedSkus <span class="token operator">=</span> batch<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sku<span class="token punctuation">)</span> <span class="token operator">=></span>          failedItems<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> sku<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processBatch</span><span class="token punctuation">(</span>failedSkus<span class="token punctuation">,</span> retryCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retryCount <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MAX_RETRIES</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>retryCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processBatch</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> retryCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> error<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-2-索引结构"><a href="#6-3-2-索引结构" class="headerlink" title="6.3.2 索引结构"></a>6.3.2 索引结构</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">mappings<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  properties<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span> analyzer<span class="token operator">:</span> <span class="token string">'ik_max_word'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'double'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    categoryName<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'keyword'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    brandName<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'keyword'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    spec<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'keyword'</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-3-搜索功能"><a href="#6-3-3-搜索功能" class="headerlink" title="6.3.3 搜索功能"></a>6.3.3 搜索功能</h3><h4 id="6-3-3-1-关键词搜索"><a href="#6-3-3-1-关键词搜索" class="headerlink" title="6.3.3.1 关键词搜索"></a>6.3.3.1 关键词搜索</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 关键字查询</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keywords<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>must<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    match<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> keywords<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-2-过滤条件"><a href="#6-3-3-2-过滤条件" class="headerlink" title="6.3.3.2 过滤条件"></a>6.3.3.2 过滤条件</h4><p>支持多种过滤条件：</p><ul><li><p>分类过滤</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>searchMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_CATEGORY</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    term<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_CATEGORY</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> searchMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_CATEGORY</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>品牌过滤</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>searchMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_BRAND</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    term<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_BRAND</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> searchMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_BRAND</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>规格过滤</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>searchMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'spec_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> searchMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        term<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">spec.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> searchMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>searchMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        terms<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">spec.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> searchMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>价格区间过滤</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> price <span class="token operator">=</span> searchMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_PRICE</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>minPrice<span class="token punctuation">,</span> maxPrice<span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPrice <span class="token operator">!==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      range<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        price<span class="token operator">:</span> <span class="token punctuation">&#123;</span> gte<span class="token operator">:</span> minPrice<span class="token punctuation">,</span> lte<span class="token operator">:</span> maxPrice <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    boolQuery<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      range<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        price<span class="token operator">:</span> <span class="token punctuation">&#123;</span> gte<span class="token operator">:</span> minPrice <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-3-3-3-排序"><a href="#6-3-3-3-排序" class="headerlink" title="6.3.3.3 排序"></a>6.3.3.3 排序</h4><p>支持自定义字段排序：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> sortField <span class="token operator">=</span> searchMap<span class="token punctuation">[</span><span class="token string">'sortField'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sortRule <span class="token operator">=</span> searchMap<span class="token punctuation">[</span><span class="token string">'sortRule'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sortField <span class="token operator">&amp;&amp;</span> sortRule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  searchRequest<span class="token punctuation">.</span>sort<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>sortField<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      order<span class="token operator">:</span> sortRule<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'desc'</span> <span class="token operator">?</span> <span class="token string">'desc'</span> <span class="token operator">:</span> <span class="token string">'asc'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-4-聚合"><a href="#6-3-3-4-聚合" class="headerlink" title="6.3.3.4 聚合"></a>6.3.3.4 聚合</h4><p>支持分类、品牌和规格的聚合统计：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">searchRequest<span class="token punctuation">.</span>aggregations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 分类聚合</span>  <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ES_CATEGORY_AGR</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    terms<span class="token operator">:</span> <span class="token punctuation">&#123;</span> field<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_CATEGORY</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 品牌聚合</span>  <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ES_BRAND_AGR</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    terms<span class="token operator">:</span> <span class="token punctuation">&#123;</span> field<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEARCH_BRAND</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.keyword</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 商品规格聚合</span>  <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ES_SPEC_MAP_AGR</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    terms<span class="token operator">:</span> <span class="token punctuation">&#123;</span> field<span class="token operator">:</span> <span class="token string">'spec.keyword'</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-完整代码实现"><a href="#6-4-完整代码实现" class="headerlink" title="6.4 完整代码实现"></a>6.4 完整代码实现</h2><p>完整的搜索服务实现请参考 该<a href="https://github.com/SaebaRyoo/ibuy-admin-backend">仓库</a> 的<a href="https://github.com/SaebaRyoo/ibuy-portal-backend/blob/main/src/mall-service/mall-service-search/search.service.ts">search.service.ts</a> 文件。</p><blockquote><p>正常是导入逻辑和搜索逻辑分在不同的项目，这里为了方便演示，将导入逻辑和搜索逻辑放在了同一个项目中。<br>搜索逻辑也可以在<a href="https://github.com/SaebaRyoo/ibuy-portal-backend">portal</a> 项目中查看</p></blockquote><h2 id="6-5-API使用示例"><a href="#6-5-API使用示例" class="headerlink" title="6.5 API使用示例"></a>6.5 API使用示例</h2><h3 id="6-5-1-基础搜索"><a href="#6-5-1-基础搜索" class="headerlink" title="6.5.1 基础搜索"></a>6.5.1 基础搜索</h3><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;search&#x2F;query?keywords&#x3D;手机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-2-带过滤的搜索"><a href="#6-5-2-带过滤的搜索" class="headerlink" title="6.5.2 带过滤的搜索"></a>6.5.2 带过滤的搜索</h3><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;search&#x2F;query?keywords&#x3D;手机&amp;categoryName&#x3D;智能手机&amp;price&#x3D;1000-2000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-3-带排序的搜索"><a href="#6-5-3-带排序的搜索" class="headerlink" title="6.5.3 带排序的搜索"></a>6.5.3 带排序的搜索</h3><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;search&#x2F;query?keywords&#x3D;手机&amp;sortField&#x3D;price&amp;sortRule&#x3D;desc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-4-带规格过滤的搜索"><a href="#6-5-4-带规格过滤的搜索" class="headerlink" title="6.5.4 带规格过滤的搜索"></a>6.5.4 带规格过滤的搜索</h3><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;search&#x2F;query?keywords&#x3D;手机&amp;spec_颜色&#x3D;黑色&amp;spec_内存&#x3D;8GB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nest.js </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL约束和数据库设计</title>
      <link href="/2025/03/12/hou-duan/shu-ju-ku/mysql/3.mysql-yue-shu-he-shu-ju-ku-she-ji/"/>
      <url>/2025/03/12/hou-duan/shu-ju-ku/mysql/3.mysql-yue-shu-he-shu-ju-ku-she-ji/</url>
      
        <content type="html"><![CDATA[<p>在数据库开发中，约束和数据库设计是确保数据完整性和系统性能的关键要素。MySQL约束通过限制数据的输入和修改，保证数据的准确性和一致性；而良好的数据库设计则能够减少数据冗余、提高查询效率，为应用系统提供可靠的数据基础。</p><p>本文将系统地介绍MySQL的约束类型（主键、非空、唯一、外键约束）以及数据库设计的核心概念。从基础的DQL查询开始，逐步深入到数据库设计范式和多表关系的处理，最后还包含了实用的数据库维护知识。无论你是数据库初学者，还是想要提升数据库设计能力的开发者，都能在本文中找到有价值的内容。</p><p>建议读者在学习本文时，结合实际案例进行练习，特别是在理解数据库设计范式和多表关系时，动手实践是加深理解的最好方式。</p><h2 id="基础查询（DQL）"><a href="#基础查询（DQL）" class="headerlink" title="基础查询（DQL）"></a>基础查询（DQL）</h2><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 语法：ORDER BY 子句</span><span class="token comment">-- ORDER BY 排序字段1 排序方式1, 排序字段2 排序方式2...</span><span class="token comment">-- 排序方式：</span><span class="token comment">-- ASC：升序（默认）</span><span class="token comment">-- DESC：降序</span><span class="token comment">-- 注意：如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">DESC</span><span class="token punctuation">,</span> english <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>将一列数据作为一个整体，进行纵向计算。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算个数</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>  <span class="token comment">-- 一般选择非空的列：主键</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>   <span class="token comment">-- 计算所有行数</span><span class="token comment">-- 计算最大值</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 计算最小值</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 计算和</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 计算平均值</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：聚合函数的计算会排除NULL值。解决方案：</p><ol><li>选择不包含NULL的列进行计算</li><li>使用IFNULL函数处理NULL值</li></ol><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 语法：GROUP BY 分组字段</span><span class="token comment">-- 按照性别分组，查询男女同学的平均分</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 按照性别分组，查询男女同学的平均分和人数</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 分数低于70分的不参与分组</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 分组后人数大于2的才显示</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> 人数<span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数 <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>分组之后查询的字段：分组字段、聚合函数</li><li>WHERE和HAVING的区别：<ul><li>WHERE在分组之前进行限定，不满足条件的不参与分组</li><li>HAVING在分组之后进行限定，不满足条件的不会被查询出来</li><li>WHERE后不可以跟聚合函数，HAVING可以进行聚合函数的判断</li></ul></li></ol><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 语法：LIMIT 开始的索引,每页查询的条数</span><span class="token comment">-- 公式：开始的索引 = (当前页码 - 1) * 每页显示的条数</span><span class="token comment">-- 每页显示3条记录</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">-- 第1页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">-- 第2页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">-- 第3页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：LIMIT是MySQL的特有语法。</p><h2 id="约束（Constraints）"><a href="#约束（Constraints）" class="headerlink" title="约束（Constraints）"></a>约束（Constraints）</h2><p>约束是对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p><h3 id="约束类型"><a href="#约束类型" class="headerlink" title="约束类型"></a>约束类型</h3><ol><li>主键约束：PRIMARY KEY</li><li>非空约束：NOT NULL</li><li>唯一约束：UNIQUE</li><li>外键约束：FOREIGN KEY</li></ol><h3 id="非空约束（NOT-NULL）"><a href="#非空约束（NOT-NULL）" class="headerlink" title="非空约束（NOT NULL）"></a>非空约束（NOT NULL）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加非空约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token comment">-- name不能为空</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表后添加非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 删除非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一约束（UNIQUE）"><a href="#唯一约束（UNIQUE）" class="headerlink" title="唯一约束（UNIQUE）"></a>唯一约束（UNIQUE）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加唯一约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span>  <span class="token comment">-- 手机号不能重复</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表后添加唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span><span class="token comment">-- 删除唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> phone_number<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：唯一约束可以有NULL值，但只能有一条记录为NULL。</p><h3 id="主键约束（PRIMARY-KEY）"><a href="#主键约束（PRIMARY-KEY）" class="headerlink" title="主键约束（PRIMARY KEY）"></a>主键约束（PRIMARY KEY）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加主键约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  <span class="token comment">-- 给id添加主键约束</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表后添加主键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment">-- 删除主键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment">-- 自动增长</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键自增</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 添加自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>主键必须非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol><h3 id="外键约束（FOREIGN-KEY）"><a href="#外键约束（FOREIGN-KEY）" class="headerlink" title="外键约束（FOREIGN KEY）"></a>外键约束（FOREIGN KEY）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加外键</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    外键列    <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键列名称<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表后添加外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span><span class="token comment">-- 添加级联操作</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>级联操作类型：</p><ol><li>级联更新：ON UPDATE CASCADE</li><li>级联删除：ON DELETE CASCADE</li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><h4 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h4><ul><li>示例：人和身份证</li><li>实现：在任意一方添加唯一外键，指向另一方的主键</li></ul><h4 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h4><ul><li>示例：部门和员工</li><li>实现：在多的一方建立外键，指向一的一方的主键</li></ul><h4 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h4><ul><li>示例：学生和课程</li><li>实现：需要借助中间表，中间表至少包含两个外键，分别指向两张表的主键</li></ul><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 旅游线路分类表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_category <span class="token punctuation">(</span>    cid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    cname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 旅游线路表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_route<span class="token punctuation">(</span>    rid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    rname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>    rdate <span class="token keyword">DATE</span><span class="token punctuation">,</span>    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 用户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_user <span class="token punctuation">(</span>    uid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">DATE</span><span class="token punctuation">,</span>    sex <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 收藏表（多对多关系）</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_favorite <span class="token punctuation">(</span>    rid <span class="token keyword">INT</span><span class="token punctuation">,</span>           <span class="token comment">-- 线路id</span>    <span class="token keyword">date</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>     <span class="token comment">-- 收藏时间</span>    uid <span class="token keyword">INT</span><span class="token punctuation">,</span>           <span class="token comment">-- 用户id</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>rid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">-- 联合主键</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_route<span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_user<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h3><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>要求属性具有原子性，不可再分解。</p><p>示例：</p><ul><li>不规范：学生（学号，姓名，出生日期(年,月,日)）</li><li>规范：学生（学号，姓名，出生年，出生月，出生日）</li></ul><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p>在1NF的基础上，消除非主键列对主键的部分依赖。</p><p>示例：</p><ul><li>不规范：选课（学号，课程号，姓名，学分）</li><li>规范：<ul><li>学生（学号，姓名）</li><li>课程（课程号，学分）</li><li>选课（学号，课程号）</li></ul></li></ul><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p>在2NF的基础上，消除传递依赖。</p><p>示例：</p><ul><li>不规范：学生（学号，姓名，年龄，学院名称，学院电话）</li><li>规范：<ul><li>学生（学号，姓名，年龄，学院编号）</li><li>学院（学院编号，学院名称，学院电话）</li></ul></li></ul><h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><h3 id="数据库备份与还原"><a href="#数据库备份与还原" class="headerlink" title="数据库备份与还原"></a>数据库备份与还原</h3><h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份</span>mysqldump -u用户名 -p密码 数据库名称 <span class="token operator">></span> 保存的路径<span class="token comment"># 还原</span><span class="token comment"># 1. 登录数据库</span><span class="token comment"># 2. 创建数据库</span><span class="token comment"># 3. 使用数据库</span><span class="token comment"># 4. 执行文件</span><span class="token builtin class-name">source</span> 文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Docker容器方式"><a href="#Docker容器方式" class="headerlink" title="Docker容器方式"></a>Docker容器方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从Docker容器中备份数据库</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> mysql容器名称 mysqldump -u用户名 -p密码 数据库名称 <span class="token operator">></span> 宿主机保存路径<span class="token comment"># 示例：备份test数据库</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> mysql8 mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-ppassword</span> <span class="token builtin class-name">test</span> <span class="token operator">></span> /home/backup/test.sql<span class="token comment"># 将备份文件还原到Docker容器中的MySQL</span><span class="token comment"># 1. 将备份文件复制到容器内</span><span class="token function">docker</span> <span class="token function">cp</span> 备份文件路径 mysql容器名称:/tmp/<span class="token comment"># 2. 在容器中执行还原命令</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> mysql容器名称 mysql -u用户名 -p密码 数据库名称 <span class="token operator">&lt;</span> 备份文件路径<span class="token comment"># 示例：还原test数据库</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> mysql8 mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-ppassword</span> <span class="token builtin class-name">test</span> <span class="token operator">&lt;</span> /home/backup/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ol><li>确保有足够的磁盘空间存储备份文件</li><li>备份前建议停止对数据库的写入操作</li><li>还原时如果数据库不存在需要先创建</li><li>使用docker cp命令时注意文件权限问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL多表查询和事务</title>
      <link href="/2025/03/12/hou-duan/shu-ju-ku/mysql/4.mysql-duo-biao-cha-xun-he-shi-wu/"/>
      <url>/2025/03/12/hou-duan/shu-ju-ku/mysql/4.mysql-duo-biao-cha-xun-he-shi-wu/</url>
      
        <content type="html"><![CDATA[<p>在实际的数据库应用中，数据通常分布在多个相关的表中，如何高效地从这些表中获取和处理数据是数据库开发中的重要课题。多表查询提供了强大的数据检索能力，通过连接查询和子查询，我们可以灵活地组合和筛选来自不同表的数据。同时，在进行数据修改操作时，事务管理机制确保了数据的一致性和完整性，是构建可靠数据库应用的基石。</p><p>本文将系统地介绍MySQL中的多表查询和事务管理。首先从多表查询的基本概念入手，详细讲解内连接、外连接等不同的连接查询方式，以及子查询的多种使用场景。接着深入探讨事务的概念、特性和隔离级别，帮助读者理解如何在实际开发中正确使用事务来保证数据的安全性。文章配有丰富的示例代码，便于读者实践和掌握这些重要的数据库操作技术。</p><p>建议读者在学习本文时，结合实际案例进行练习，特别是在理解不同类型的连接查询和事务隔离级别时，动手实践是加深理解的最好方式。</p><h2 id="一、多表查询基础"><a href="#一、多表查询基础" class="headerlink" title="一、多表查询基础"></a>一、多表查询基础</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>多表查询是指从多个表中获取数据的查询操作。在进行多表查询时会产生笛卡尔积，即两个集合的所有组合情况。为了得到有意义的查询结果，需要通过条件消除无用的数据。</p><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名列表<span class="token keyword">FROM</span> 表名列表<span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-示例数据准备"><a href="#1-3-示例数据准备" class="headerlink" title="1.3 示例数据准备"></a>1.3 示例数据准备</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 部门表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入部门数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept <span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'开发部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 员工表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  gender <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 性别</span>  salary <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span> <span class="token comment">-- 工资</span>  join_date <span class="token keyword">DATE</span><span class="token punctuation">,</span> <span class="token comment">-- 入职日期</span>  dept_id <span class="token keyword">INT</span><span class="token punctuation">,</span>  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">-- 外键，关联部门表(部门表的主键)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入员工数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token string">'2013-02-24'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">,</span><span class="token string">'2010-12-02'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token string">'2008-08-08'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'白骨精'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'2015-10-07'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'蜘蛛精'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">,</span><span class="token string">'2011-03-14'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、连接查询"><a href="#二、连接查询" class="headerlink" title="二、连接查询"></a>二、连接查询</h2><h3 id="2-1-内连接查询"><a href="#2-1-内连接查询" class="headerlink" title="2.1 内连接查询"></a>2.1 内连接查询</h3><h4 id="2-1-1-隐式内连接"><a href="#2-1-1-隐式内连接" class="headerlink" title="2.1.1 隐式内连接"></a>2.1.1 隐式内连接</h4><p>使用WHERE条件消除无用数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有员工信息和对应的部门信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 使用别名优化查询（推荐）</span><span class="token keyword">SELECT</span>    t1<span class="token punctuation">.</span>name <span class="token keyword">AS</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>     t1<span class="token punctuation">.</span>gender <span class="token keyword">AS</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    t2<span class="token punctuation">.</span>name <span class="token keyword">AS</span> <span class="token string">'部门'</span><span class="token keyword">FROM</span>    emp t1<span class="token punctuation">,</span>    dept t2<span class="token keyword">WHERE</span>    t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-显式内连接"><a href="#2-1-2-显式内连接" class="headerlink" title="2.1.2 显式内连接"></a>2.1.2 显式内连接</h4><p>使用INNER JOIN关键字，语法更直观</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- INNER可以省略</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-外连接查询"><a href="#2-2-外连接查询" class="headerlink" title="2.2 外连接查询"></a>2.2 外连接查询</h3><h4 id="2-2-1-左外连接"><a href="#2-2-1-左外连接" class="headerlink" title="2.2.1 左外连接"></a>2.2.1 左外连接</h4><p>查询左表所有数据以及其与右表的交集部分</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有员工信息及其部门信息（包括没有部门的员工）</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>name <span class="token keyword">AS</span> <span class="token string">'部门名称'</span><span class="token keyword">FROM</span> emp t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-右外连接"><a href="#2-2-2-右外连接" class="headerlink" title="2.2.2 右外连接"></a>2.2.2 右外连接</h4><p>查询右表所有数据以及其与左表的交集部分</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有部门信息及其员工信息（包括没有员工的部门）</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>name <span class="token keyword">AS</span> <span class="token string">'员工姓名'</span><span class="token keyword">FROM</span> dept t1 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> emp t2 <span class="token keyword">ON</span> t2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、子查询"><a href="#三、子查询" class="headerlink" title="三、子查询"></a>三、子查询</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>子查询是指查询中嵌套查询，内部的查询称为子查询。</p><h3 id="3-2-子查询分类"><a href="#3-2-子查询分类" class="headerlink" title="3.2 子查询分类"></a>3.2 子查询分类</h3><h4 id="3-2-1-单行单列子查询"><a href="#3-2-1-单行单列子查询" class="headerlink" title="3.2.1 单行单列子查询"></a>3.2.1 单行单列子查询</h4><p>子查询结果为单个值，可以使用比较运算符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询工资最高的员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询工资小于平均工资的员工</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-多行单列子查询"><a href="#3-2-2-多行单列子查询" class="headerlink" title="3.2.2 多行单列子查询"></a>3.2.2 多行单列子查询</h4><p>子查询结果为一列多行，可以使用IN等运算符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询财务部和市场部的所有员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept     <span class="token keyword">WHERE</span> NAME <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-多行多列子查询"><a href="#3-2-3-多行多列子查询" class="headerlink" title="3.2.3 多行多列子查询"></a>3.2.3 多行多列子查询</h4><p>子查询结果可以作为一张虚拟表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询2011-11-11后入职的员工信息和部门信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> join_date <span class="token operator">></span> <span class="token string">'2011-11-11'</span><span class="token punctuation">)</span> t2<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、事务管理"><a href="#四、事务管理" class="headerlink" title="四、事务管理"></a>四、事务管理</h2><h3 id="4-1-事务概念"><a href="#4-1-事务概念" class="headerlink" title="4.1 事务概念"></a>4.1 事务概念</h3><p>事务是一组操作的集合，这些操作要么全部成功，要么全部失败。事务是数据库维护数据一致性的单位。</p><h3 id="4-2-事务的基本操作"><a href="#4-2-事务的基本操作" class="headerlink" title="4.2 事务的基本操作"></a>4.2 事务的基本操作</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 回滚事务</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-事务示例"><a href="#4-3-事务示例" class="headerlink" title="4.3 事务示例"></a>4.3 事务示例</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建账户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  balance <span class="token keyword">DOUBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加测试数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> balance<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 转账操作</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 张三账户减500</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 李四账户加500</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-事务的四大特性（ACID）"><a href="#4-4-事务的四大特性（ACID）" class="headerlink" title="4.4 事务的四大特性（ACID）"></a>4.4 事务的四大特性（ACID）</h3><ol><li><strong>原子性（Atomicity）</strong>：事务是不可分割的最小操作单位</li><li><strong>一致性（Consistency）</strong>：事务执行前后，数据保持一致</li><li><strong>隔离性（Isolation）</strong>：多个事务之间相互独立</li><li><strong>持久性（Durability）</strong>：事务一旦提交，结果永久保存</li></ol><h3 id="4-5-事务的隔离级别"><a href="#4-5-事务的隔离级别" class="headerlink" title="4.5 事务的隔离级别"></a>4.5 事务的隔离级别</h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>是</td><td>是</td><td>是</td><td>读未提交</td></tr><tr><td>READ COMMITTED</td><td>否</td><td>是</td><td>是</td><td>读已提交（Oracle默认）</td></tr><tr><td>REPEATABLE READ</td><td>否</td><td>否</td><td>是</td><td>可重复读（MySQL默认）</td></tr><tr><td>SERIALIZABLE</td><td>否</td><td>否</td><td>否</td><td>串行化</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询当前隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 设置隔离级别</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：隔离级别从低到高安全性越来越高，但性能越来越低。应根据实际业务需求选择合适的隔离级别。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Minio和Nestjs实现文件存储</title>
      <link href="/2025/03/03/hou-duan/shang-cheng/shi-yong-minio-he-nestjs-shi-xian-wen-jian-cun-chu/"/>
      <url>/2025/03/03/hou-duan/shang-cheng/shi-yong-minio-he-nestjs-shi-xian-wen-jian-cun-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文详细介绍了如何在商城项目中使用 MinIO 和 Nest.js 实现文件存储功能。文章分为四个主要部分：</p><ol><li>使用 Docker 部署 MinIO 服务</li><li>MinIO 的基础配置（创建 bucket 和 AccessKey）</li><li>配置 MinIO 访问策略，实现文件的公开访问</li><li>在 Nest.js 中集成 MinIO，实现文件上传、下载、删除等功能</li></ol><p>通过本文的实践，你将学会如何搭建一个完整的文件存储服务，适用于电商等需要文件存储的业务场景。</p></blockquote><h1 id="1-使用-docker-安装-Minio"><a href="#1-使用-docker-安装-Minio" class="headerlink" title="1. 使用 docker 安装 Minio"></a>1. <strong>使用 docker 安装 Minio</strong></h1><h2 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1. 拉取镜像"></a>1.1. <strong>拉取镜像</strong></h2><p><code>docker pull minio/minio</code></p><h2 id="1-2-创建数据卷并提升权限"><a href="#1-2-创建数据卷并提升权限" class="headerlink" title="1.2. 创建数据卷并提升权限"></a>1.2. <strong>创建数据卷并提升权限</strong></h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>data <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>configchmod <span class="token operator">-</span><span class="token constant">R</span> <span class="token number">777</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>datachmod <span class="token operator">-</span><span class="token constant">R</span> <span class="token number">777</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-使用-minio-minio-镜像启动容器"><a href="#1-3-使用-minio-minio-镜像启动容器" class="headerlink" title="1.3. 使用 minio&#x2F;minio 镜像启动容器"></a>1.3. <strong>使用 minio&#x2F;minio 镜像启动容器</strong></h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">docker run \<span class="token operator">--</span>name minio \<span class="token operator">-</span>p <span class="token number">9000</span><span class="token operator">:</span><span class="token number">9000</span>  \<span class="token operator">-</span>p <span class="token number">9090</span><span class="token operator">:</span><span class="token number">9090</span>  \<span class="token operator">-</span>d \<span class="token operator">-</span>e <span class="token string">"MINIO_ROOT_USER=minio"</span> \<span class="token operator">-</span>e <span class="token string">"MINIO_ROOT_PASSWORD=minio123"</span> \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>data<span class="token operator">:</span><span class="token operator">/</span>data \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>minio<span class="token operator">/</span>config<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">root</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>minio \minio<span class="token operator">/</span>minio server  <span class="token operator">/</span>data <span class="token operator">--</span><span class="token builtin">console</span><span class="token operator">-</span>address <span class="token string">":9090"</span> <span class="token operator">--</span>address <span class="token string">":9000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>docker run：这是 Docker 命令行工具用来运行一个新容器的命令。</strong></li><li><strong>–name minio：这个参数为容器指定了一个名称，这里名称被设置为 minio。使用名称可以更方便地管理容器。</strong></li><li><strong>-p 9000:9000：这个参数将容器内的 9000 端口映射到宿主机的 9000 端口。MinIO 服务默认使用 9000 端口提供 API 服务。</strong></li><li><strong>-p 9090:9090：这个参数将容器内的 9090 端口映射到宿主机的 9090 端口。这是 MinIO 的控制台（Console）端口，用于访问 MinIO 的图形用户界面。</strong></li><li><strong>-d：这个参数告诉 Docker 以“detached”模式运行容器，即在后台运行。</strong></li><li><strong>-e “MINIO_ROOT_USER&#x3D;minio”：设置环境变量 MINIO_ROOT_USER，这是访问 MinIO 服务的用户名称，这里设置为 minio。</strong></li><li><strong>-e “MINIO_ROOT_PASSWORD&#x3D;minio123”：设置环境变量 MINIO_ROOT_PASSWORD，这是访问 MinIO 服务的用户密码，这里设置为 minio123。</strong></li><li><strong>-v &#x2F;usr&#x2F;local&#x2F;minio&#x2F;data:&#x2F;data：这个参数将宿主机的目录&#x2F;usr&#x2F;local&#x2F;minio&#x2F;data 挂载到容器的&#x2F;data 目录。MinIO 会将所有数据存储在这个目录。</strong></li><li><strong>-v &#x2F;usr&#x2F;local&#x2F;minio&#x2F;config:&#x2F;root&#x2F;.minio：这个参数将宿主机的目录&#x2F;usr&#x2F;local&#x2F;minio-config 挂载到容器的&#x2F;root&#x2F;.minio 目录。这个目录用于存储 MinIO 的配置文件和数据。</strong></li><li><strong>minio&#x2F;minio：这是要运行的 Docker 镜像的名称，这里使用的是官方发布的 MinIO 镜像。</strong></li><li><strong>server &#x2F;data：这是传递给 MinIO 程序的命令行参数，告诉 MinIO 以服务器模式运行，并且使用&#x2F;data 目录作为其数据存储位置。</strong></li><li><strong>–console-address “:9090”：这个参数指定 MinIO 控制台服务的监听地址和端口。在这个例子中，它设置为监听所有接口上的 9090 端口。</strong></li><li><strong>–address “:9000”：这个参数指定 MinIO API 服务的监听地址和端口。在这个例子中，它设置为监听所有接口上的 9000 端口。</strong></li></ul><p><strong>然后就可以访问 <a href="http://localhost:9090/">http://localhost:9090</a> 查看控制台</strong></p><p><strong>在使用 127.0.0.1:9090 时无法访问，应该是没有设置跨域。</strong></p><h1 id="2-创建-bucket-和-AccessKey"><a href="#2-创建-bucket-和-AccessKey" class="headerlink" title="2. 创建 bucket 和 AccessKey"></a>2. <strong>创建 bucket 和 AccessKey</strong></h1><p>**这个直接在很简单，直接在访问 **<code>http://localhost:9090</code>在控制台操作即可。</p><p><strong>注意，这里生成的 AccessKey 后续在 nestjs 中接入 minio 的 api 时会用到，所以需要记录下来</strong></p><h1 id="3-配置策略"><a href="#3-配置策略" class="headerlink" title="3. 配置策略"></a>3. <strong>配置策略</strong></h1><p><strong>经过上面的安装和配置，我们已经可以正常的访问 minio 了。并且我们创建了一个名为</strong><code>mall</code>的 bucket，用于存储商品相关的图片对象。不过，minio 的资源访问，默认是需要通过 AccessKey 或者账号密码来访问的。但是我们是一个 b2c 的商城，在后台管理系统重上传的图需要能在公网访问。</p><p><strong>但是默认的策略，公网无法访问。我们需要自己配置策略</strong></p><h2 id="3-1-进入-bucket-配置-策略"><a href="#3-1-进入-bucket-配置-策略" class="headerlink" title="3.1. 进入 bucket 配置 策略"></a>3.1. <strong>进入 bucket 配置 策略</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/411665/1730862358097-b2cdf644-e332-450e-9ada-75e26882dc71.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2024/png/411665/1730862358097-b2cdf644-e332-450e-9ada-75e26882dc71.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>**修改策略选择为****Custom**<br><img src="https://cdn.nlark.com/yuque/0/2024/png/411665/1730862421791-77078017-9f00-4eab-a224-66d65e54fa3a.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2024/png/411665/1730862421791-77078017-9f00-4eab-a224-66d65e54fa3a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>然后配置如下</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span>  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::&lt;account_id>:user/&lt;user_name>"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:PutObject"</span><span class="token punctuation">,</span> <span class="token string">"s3:AbortMultipartUpload"</span><span class="token punctuation">,</span> <span class="token string">"s3:DeleteObject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::&lt;account_id>:user/&lt;user_name>"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:ListBucket"</span><span class="token punctuation">,</span> <span class="token string">"s3:ListBucketMultipartUploads"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:GetBucketLocation"</span><span class="token punctuation">,</span> <span class="token string">"s3:ListBucket"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:GetObject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-策略解析"><a href="#3-2-策略解析" class="headerlink" title="3.2. 策略解析"></a>3.2. <strong>策略解析</strong></h2><p><strong>这个策略一共有 4 个声明，主要做了以下事情</strong></p><h4 id="3-2-1-1-1-第一个声明："><a href="#3-2-1-1-1-第一个声明：" class="headerlink" title="3.2.1.1. 1. 第一个声明："></a>3.2.1.1. <strong>1. 第一个声明：</strong></h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>  <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::&lt;account_id>:user/&lt;user_name>"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:PutObject"</span><span class="token punctuation">,</span> <span class="token string">"s3:AbortMultipartUpload"</span><span class="token punctuation">,</span> <span class="token string">"s3:DeleteObject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall/*"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>​<strong>Effect</strong>​**: **<code>Allow</code> — 允许执行指定的操作。</p></li><li><p>​<strong>Principal</strong>​**: **<code>arn:aws:iam::&lt;account_id&gt;:user/&lt;user_name&gt;</code> — 指定这个策略适用的 IAM 用户。<code>&lt;account_id&gt;</code> 和 <code>&lt;user_name&gt;</code> 需要替换为实际的 AWS 账户 ID 和用户名。</p></li><li><p>​<strong>Action</strong>​**: 允许的操作：**</p><ul><li><code>s3:PutObject</code> — 允许将对象（如文件）上传到桶中。</li><li><code>s3:AbortMultipartUpload</code> — 允许中止一个多部分上传操作。</li><li><code>s3:DeleteObject</code> — 允许删除桶中的对象。</li></ul></li><li><p>​<strong>Resource</strong>​**: **<code>arn:aws:s3:::mall/*</code> — 这个权限作用于 <code>mall</code> 存储桶中的所有对象（即桶中的所有文件）。</p></li></ul><p>​<strong>总结</strong>​**：该声明允许指定的 IAM 用户上传文件、删除文件，以及中止未完成的多部分上传操作，作用于 **<code>mall</code> 存储桶中的所有文件。</p><h4 id="2-第二个声明："><a href="#2-第二个声明：" class="headerlink" title="2. 第二个声明："></a>2. 第二个声明：</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>  <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::&lt;account_id>:user/&lt;user_name>"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:ListBucket"</span><span class="token punctuation">,</span> <span class="token string">"s3:ListBucketMultipartUploads"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>​<strong>Effect</strong>​**: **<code>Allow</code> — 允许执行指定的操作。</p></li><li><p>​<strong>Principal</strong>​**: **<code>arn:aws:iam::&lt;account_id&gt;:user/&lt;user_name&gt;</code> — 同样是指定 IAM 用户。</p></li><li><p>​<strong>Action</strong>​**: 允许的操作：**</p><ul><li><code>s3:ListBucket</code> — 允许列出存储桶中的对象。</li><li><code>s3:ListBucketMultipartUploads</code> — 允许列出正在进行的多部分上传任务。</li></ul></li><li><p>​<strong>Resource</strong>​**: **<code>arn:aws:s3:::mall</code> — 这些操作只作用于 <code>mall</code> 存储桶本身，而不是桶中的具体文件。</p></li></ul><p>​<strong>总结</strong>​**：该声明允许指定的 IAM 用户列出 **<code>mall</code> 存储桶中的文件，或者查看当前正在进行的多部分上传任务。</p><h4 id="3-第三个声明："><a href="#3-第三个声明：" class="headerlink" title="3. 第三个声明："></a>3. 第三个声明：</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>  <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:GetBucketLocation"</span><span class="token punctuation">,</span> <span class="token string">"s3:ListBucket"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>​<strong>Effect</strong>​**: **<code>Allow</code> — 允许执行指定的操作。</p></li><li><p>​<strong>Principal</strong>​**: **<code>&quot;*&quot;</code> — 这个策略适用于所有主体，即公开访问。</p></li><li><p>​<strong>Action</strong>​**: 允许的操作：**</p><ul><li><code>s3:GetBucketLocation</code> — 允许获取存储桶的位置。</li><li><code>s3:ListBucket</code> — 允许列出存储桶中的对象。</li></ul></li><li><p>​<strong>Resource</strong>​**: **<code>arn:aws:s3:::mall</code> — 这些操作作用于 <code>mall</code> 存储桶本身。</p></li></ul><p>​<strong>总结</strong>​**：该声明允许所有人（公共访问）获取 **<code>mall</code> 存储桶的位置和列出桶中的文件列表（列出桶中文件的元数据）。</p><h4 id="4-第四个声明："><a href="#4-第四个声明：" class="headerlink" title="4. 第四个声明："></a>4. 第四个声明：</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>  <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"s3:GetObject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::mall/*"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>​<strong>Effect</strong>​**: **<code>Allow</code> — 允许执行指定的操作。</p></li><li><p>​<strong>Principal</strong>​**: **<code>&quot;*&quot;</code> — 这个策略适用于所有主体，即公开访问。</p></li><li><p>​<strong>Action</strong>​**: 允许的操作：**</p><ul><li><code>s3:GetObject</code> — 允许获取存储桶中的对象。</li></ul></li><li><p>​<strong>Resource</strong>​**: **<code>arn:aws:s3:::mall/*</code> — 这个权限作用于 <code>mall</code> 存储桶中的所有对象。</p></li></ul><p>​<strong>总结</strong>​**：该声明允许任何人公开访问 **<code>mall</code> 存储桶中的所有对象（如图片、文件等）。</p><h2 id="3-3-配置匿名访问"><a href="#3-3-配置匿名访问" class="headerlink" title="3.3. 配置匿名访问"></a>3.3. <strong>配置匿名访问</strong></h2><p>**进入**<strong>Anonymous,** <strong>点击右上角的**<strong>Add Access Rule** <strong>为 mall 添加一个</strong>​</strong>只读匿名策略</strong>​</strong>，无需验证身份。这样就可以通过 **<a href="http://loclahost:9000/mall/file.png">http://loclahost:9000/mall/file.png</a> 来访问资源了<img src="https://cdn.nlark.com/yuque/0/2024/png/411665/1730863434678-77d86df1-2b22-483d-b50c-a2facc2b9c04.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2024/png/411665/1730863434678-77d86df1-2b22-483d-b50c-a2facc2b9c04.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h1 id="4-使用-nestjs-接入-minio"><a href="#4-使用-nestjs-接入-minio" class="headerlink" title="4. 使用 nestjs 接入 minio"></a>4. <strong>使用 nestjs 接入 minio</strong></h1><p><strong>在这个 File 模块中我们需要提供</strong></p><ul><li><strong>文件上传</strong></li><li><strong>下载</strong></li><li><strong>删除</strong></li><li><strong>获取目录结构</strong></li></ul><p><strong>等功能。</strong></p><h2 id="4-1-配置说明"><a href="#4-1-配置说明" class="headerlink" title="4.1. 配置说明"></a>4.1. <strong>配置说明</strong></h2><p><strong>需要在环境变量中配置以下 MinIO 相关参数：</strong></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">MINIO_HOST=your-minio-hostMINIO_PORT=your-minio-portMINIO_ACCESS_KEY=your-access-keyMINIO_SECRET_KEY=your-secret-key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-实现细节"><a href="#4-2-实现细节" class="headerlink" title="4.2. 实现细节"></a>4.2. <strong>实现细节</strong></h2><h3 id="4-2-1-1-安装依赖"><a href="#4-2-1-1-安装依赖" class="headerlink" title="4.2.1. 1. 安装依赖"></a>4.2.1. <strong>1. 安装依赖</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @nestjs/common @nestjs/config minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-2-2-模块结构"><a href="#4-2-2-2-模块结构" class="headerlink" title="4.2.2. 2. 模块结构"></a>4.2.2. <strong>2. 模块结构</strong></h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">mall-service-file/├── file.module.ts    # 模块定义├── file.service.ts   # 服务实现├── file.controller.ts # 控制器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-3-3-核心代码实现"><a href="#4-2-3-3-核心代码实现" class="headerlink" title="4.2.3. 3. 核心代码实现"></a>4.2.3. <strong>3. 核心代码实现</strong></h3><h4 id="4-2-3-1-FileModule-file-module-ts"><a href="#4-2-3-1-FileModule-file-module-ts" class="headerlink" title="4.2.3.1. FileModule (file.module.ts)"></a>4.2.3.1. <strong>FileModule (file.module.ts)</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Module <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FileService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./file.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FileController <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./file.controller"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>FileService<span class="token punctuation">]</span><span class="token punctuation">,</span>  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>FileController<span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">[</span>FileService<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FileModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>说明</strong>​<strong>：</strong></p><ul><li><strong>导出 FileService 使其可以被其他模块使用</strong></li><li><strong>注册 FileController 处理文件相关的 HTTP 请求</strong></li></ul><h4 id="4-2-3-2-FileService-file-service-ts"><a href="#4-2-3-2-FileService-file-service-ts" class="headerlink" title="4.2.3.2. FileService (file.service.ts)"></a>4.2.3.2. <strong>FileService (file.service.ts)</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ConfigService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/config"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Minio <span class="token keyword">from</span> <span class="token string">"minio"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">readonly</span> minioClient<span class="token operator">:</span> Minio<span class="token punctuation">.</span>Client<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化 MinIO 客户端</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minioClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Minio</span><span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      endPoint<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_HOST"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      port<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_PORT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      useSSL<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      accessKey<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_ACCESS_KEY"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      secretKey<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_SECRET_KEY"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 文件上传实现</span>  <span class="token keyword">async</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>    bucketName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 存储桶名称</span>    objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 文件名</span>    data<span class="token operator">:</span> Buffer<span class="token punctuation">,</span> <span class="token comment">// 文件数据</span>    path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token comment">// 存储路径</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>objectName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_HOST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"MINIO_PORT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      bucketName<span class="token punctuation">,</span>      path<span class="token punctuation">,</span>      objectName<span class="token punctuation">,</span>      imgUrl<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">HOST</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bucketName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>objectName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 文件下载实现</span>  <span class="token keyword">async</span> <span class="token function">readFileStream</span><span class="token punctuation">(</span>    bucketName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 存储桶名称</span>    objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 文件名</span>    path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token comment">// 文件路径</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> fileStream <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>        bucketName<span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>objectName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">streamToBuffer</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"文件读取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 文件删除实现</span>  <span class="token keyword">async</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span>    bucketName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 存储桶名称</span>    objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 文件名</span>    path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token comment">// 文件路径</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minioClient<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>objectName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取目录结构实现</span>  <span class="token keyword">async</span> <span class="token function">getDirectoryStructure</span><span class="token punctuation">(</span>    bucketName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 存储桶名称</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> objects <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> directories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> pathSegments <span class="token operator">=</span> object<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pathSegments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        directories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pathSegments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>关键实现说明</strong>​<strong>：</strong></p><ol><li><strong>MinIO 客户端初始化</strong></li></ol><ul><li><strong>通过 ConfigService 读取环境配置</strong></li><li><strong>创建 MinIO 客户端实例，支持 SSL 配置</strong></li></ul><ol start="2"><li><strong>uploadFile 方法</strong></li></ol><ul><li><strong>入参：存储桶名称、文件名、文件数据、存储路径</strong></li><li><strong>返回：包含文件访问 URL 的对象</strong></li><li><strong>实现：使用 putObject 上传文件，生成访问 URL</strong></li></ul><ol start="3"><li><strong>readFileStream 方法</strong></li></ol><ul><li><strong>入参：存储桶名称、文件名、文件路径</strong></li><li><strong>返回：文件数据 Buffer</strong></li><li><strong>实现：使用 getObject 获取文件流并转换为 Buffer</strong></li></ul><ol start="4"><li><strong>deleteFile 方法</strong></li></ol><ul><li><strong>入参：存储桶名称、文件名、文件路径</strong></li><li><strong>返回：null</strong></li><li><strong>实现：使用 removeObject 删除文件</strong></li></ul><ol start="5"><li><strong>getDirectoryStructure 方法</strong></li></ol><ul><li><strong>入参：存储桶名称</strong></li><li><strong>返回：目录名称数组</strong></li><li><strong>实现：获取所有对象并解析路径结构</strong></li></ul><h4 id="4-2-3-3-FileController-file-controller-ts"><a href="#4-2-3-3-FileController-file-controller-ts" class="headerlink" title="4.2.3.3. FileController (file.controller.ts)"></a>4.2.3.3. <strong>FileController (file.controller.ts)</strong></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  Controller<span class="token punctuation">,</span>  Post<span class="token punctuation">,</span>  Get<span class="token punctuation">,</span>  Delete<span class="token punctuation">,</span>  Query<span class="token punctuation">,</span>  UploadedFile<span class="token punctuation">,</span>  UseInterceptors<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FileInterceptor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/platform-express"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FileService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./file.service"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> fileService<span class="token operator">:</span> FileService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">UseInterceptors</span></span><span class="token punctuation">(</span><span class="token function">FileInterceptor</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">UploadedFile</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> file<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileService<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>      <span class="token string">"mall"</span><span class="token punctuation">,</span>      file<span class="token punctuation">.</span>originalname<span class="token punctuation">,</span>      file<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span>      path    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">readFileStream</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileService<span class="token punctuation">.</span><span class="token function">readFileStream</span><span class="token punctuation">(</span>      query<span class="token punctuation">.</span>bucketName<span class="token punctuation">,</span>      query<span class="token punctuation">.</span>objectName<span class="token punctuation">,</span>      query<span class="token punctuation">.</span>path    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Delete</span></span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileService<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>      query<span class="token punctuation">.</span>bucketName<span class="token punctuation">,</span>      query<span class="token punctuation">.</span>objectName<span class="token punctuation">,</span>      query<span class="token punctuation">.</span>path    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">getDirectoryStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileService<span class="token punctuation">.</span><span class="token function">getDirectoryStructure</span><span class="token punctuation">(</span><span class="token string">"mall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>关键实现说明</strong>​<strong>：</strong></p><ol><li><strong>文件上传接口</strong></li></ol><ul><li><strong>使用 FileInterceptor 处理文件上传</strong></li><li><strong>支持通过 query 参数指定存储路径</strong></li><li><strong>自动处理文件名和文件数据</strong></li></ul><ol start="2"><li><strong>文件下载接口</strong></li></ol><ul><li><strong>通过 query 参数接收文件信息</strong></li><li><strong>返回文件数据流</strong></li></ul><ol start="3"><li><strong>文件删除接口</strong></li></ol><ul><li><strong>通过 query 参数接收文件信息</strong></li><li><strong>返回删除操作结果</strong></li></ul><ol start="4"><li><strong>目录列表接口</strong></li></ol><ul><li><strong>无需参数</strong></li><li><strong>返回默认存储桶的目录结构</strong></li></ul><h2 id="4-3-TODO"><a href="#4-3-TODO" class="headerlink" title="4.3. TODO"></a>4.3. <strong>TODO</strong></h2><ol><li><strong>确保 MinIO 服务器已正确配置并运行</strong></li><li><strong>上传文件大小可能受到限制，后续需要在配置中适当调整</strong></li><li><strong>需要对文件类型进行限制和验证</strong></li><li><strong>暂未实现错误处理和重试机制</strong></li><li><strong>暂未配置 MinIO 的 SSL 访问</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Actions+Docker自动化部署Nestjs</title>
      <link href="/2025/02/23/yun-wei/shi-yong-github-actions-docker-zi-dong-hua-bu-shu-nestjs/"/>
      <url>/2025/02/23/yun-wei/shi-yong-github-actions-docker-zi-dong-hua-bu-shu-nestjs/</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何安全部署"><a href="#1-如何安全部署" class="headerlink" title="1. 如何安全部署"></a>1. <strong>如何安全部署</strong></h1><p><strong>在下面的部署工作中，我们会将 Linux 服务器的 SSH 私钥配置到 GitHub 的 Secrets 中，虽然是一种常见的自动化部署方式，但需要谨慎处理以确保安全性。</strong></p><h2 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1. 优点"></a>1.1. <strong>优点</strong></h2><ul><li>​<strong>自动化部署</strong>​<strong>：通过 GitHub Actions 实现自动化部署，减少人工操作，提高效率。</strong></li></ul><h2 id="1-2-潜在风险"><a href="#1-2-潜在风险" class="headerlink" title="1.2. 潜在风险"></a>1.2. <strong>潜在风险</strong></h2><ul><li>​<strong>私钥泄露</strong>​<strong>：如果 GitHub 账号被入侵，攻击者可能获取到 Secrets 中的 SSH 私钥，从而访问你的服务器。</strong></li><li>​<strong>私钥滥用</strong>​<strong>：如果私钥被用于多个服务器，一旦泄露，所有相关服务器都会受到影响。</strong></li></ul><h2 id="1-3-安全方案"><a href="#1-3-安全方案" class="headerlink" title="1.3. 安全方案"></a>1.3. <strong>安全方案</strong></h2><h3 id="1-3-1-创建专用用户："><a href="#1-3-1-创建专用用户：" class="headerlink" title="1.3.1. 创建专用用户："></a>1.3.1. <strong>创建专用用户：</strong></h3><p><strong>在服务器上创建一个专门用于部署的用户，并限制其权限。</strong></p><h4 id="1-3-1-1-创建部署账户"><a href="#1-3-1-1-创建部署账户" class="headerlink" title="1.3.1.1. 创建部署账户"></a>1.3.1.1. <strong>创建部署账户</strong></h4><p><strong>Linux 系统中创建用户账户的最基本方法是使用 useradd 命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-d</span> /home/deploy deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上面的命令等同于下面的命令，不过他简化了为 deploy 用户指定”家目录”的操作</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> deploy<span class="token function">sudo</span> <span class="token function">chown</span> deploy:deploy /home/deploy<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">700</span> /home/deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-3-1-2-设置密码"><a href="#1-3-1-2-设置密码" class="headerlink" title="1.3.1.2. 设置密码"></a>1.3.1.2. <strong>设置密码</strong></h4><p><strong>新用户创建后，需要为其设置密码，我们可以使用以下命令修改 deploy 用户的密码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-1-3-为用户分配用户组"><a href="#1-3-1-3-为用户分配用户组" class="headerlink" title="1.3.1.3. 为用户分配用户组"></a>1.3.1.3. <strong>为用户分配用户组</strong></h4><p><strong>我们创建了 deploy 用户后，它默认就有一个 deploy 组，我们可以通过</strong><code>groups deploy</code>来查看这个用户的组。如果想要查看全部的组就使用<code>cat /etc/group</code>。</p><p><strong>因为我们后续会使用 docker 部署，所以为了</strong>确保 <code>deploy</code> 用户有权限访问 Docker 守护进程。我们可以使用以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-1-4-删除和冻结用户账户"><a href="#1-3-1-4-删除和冻结用户账户" class="headerlink" title="1.3.1.4. 删除和冻结用户账户"></a>1.3.1.4. <strong>删除和冻结用户账户</strong></h4><p><strong>在某些情况下，可能需要删除或冻结用户。这时候就需要使用 userdel 命令，或者 passwd</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除用户以及他的 家目录</span><span class="token function">userdel</span> deploy<span class="token comment"># 冻结用户账户，使其无法登录</span><span class="token function">passwd</span> <span class="token parameter variable">-l</span> deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-限制私钥权限（暂未使用）"><a href="#1-3-2-限制私钥权限（暂未使用）" class="headerlink" title="1.3.2. 限制私钥权限（暂未使用）"></a>1.3.2. <strong>限制私钥权限（暂未使用）</strong></h3><p>​<strong>限制私钥权限</strong>​<strong>：为 GitHub Actions 使用的 SSH 私钥配置最小权限。例如：</strong></p><ul><li><strong>仅允许该私钥访问特定的目录（如部署目录）。</strong></li><li>**禁止该私钥执行危险操作（如 **<code>sudo</code> 或修改系统文件）。</li></ul><h1 id="2-给-nestjs-项目增加-docker-配置"><a href="#2-给-nestjs-项目增加-docker-配置" class="headerlink" title="2. 给 nestjs 项目增加 docker 配置"></a>2. <strong>给 nestjs 项目增加 docker 配置</strong></h1><h2 id="2-1-创建-Dockerfile-镜像文件"><a href="#2-1-创建-Dockerfile-镜像文件" class="headerlink" title="2.1. 创建 Dockerfile 镜像文件"></a>2.1. <strong>创建 Dockerfile 镜像文件</strong></h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 使用官方 Node.js 运行时作为基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> node:20.18.0-alpine <span class="token keyword">AS</span> builder</span><span class="token comment"># 设置工作目录为 /ibuy-backend</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /ibuy-backend</span><span class="token comment"># 复制 package.json 和 yarn.lock 文件</span><span class="token instruction"><span class="token keyword">COPY</span> package*.json yarn.lock ./</span><span class="token comment">#</span><span class="token comment">## 安装依赖（使用 yarn 代替 npm）</span><span class="token instruction"><span class="token keyword">RUN</span> yarn install</span><span class="token comment"># 复制项目的其他文件</span><span class="token instruction"><span class="token keyword">COPY</span> . .</span><span class="token comment">#</span><span class="token comment">## 使用 yarn 进行构建</span><span class="token instruction"><span class="token keyword">RUN</span> yarn build</span><span class="token comment"># 暴露应用的端口</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8001</span><span class="token comment"># 设置启动命令</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"node"</span>, <span class="token string">"dist/main.js"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-创建-docker-compose-yml-部署文件"><a href="#2-2-创建-docker-compose-yml-部署文件" class="headerlink" title="2.2. 创建 docker-compose.yml 部署文件"></a>2.2. <strong>创建 docker-compose.yml 部署文件</strong></h2><p><strong>这个</strong><code>environment</code>是按照你.env 文件中的变量来配置的，<code>.env</code>后面会讲到</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"2.5"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment"># NestJS service</span>  <span class="token key atrule">backend-nestjs</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> .      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ibuy<span class="token punctuation">-</span>backend<span class="token punctuation">-</span>nestjs    <span class="token comment"># 设置docker 网络，因为前端项目也是通过docker容器单独部署的</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ibuy_network    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8001:8001"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ~/data/docker<span class="token punctuation">-</span>volumes/ibuy<span class="token punctuation">-</span>backend/logs<span class="token punctuation">:</span>/ibuy<span class="token punctuation">-</span>backend/logs    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NODE_ENV=production      <span class="token punctuation">-</span> POSTGRES_HOST=$<span class="token punctuation">&#123;</span>POSTGRES_HOST<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> POSTGRES_PORT=$<span class="token punctuation">&#123;</span>POSTGRES_PORT<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> POSTGRES_USER=$<span class="token punctuation">&#123;</span>POSTGRES_USER<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> POSTGRES_PASSWORD=$<span class="token punctuation">&#123;</span>POSTGRES_PASSWORD<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> POSTGRES_DB=$<span class="token punctuation">&#123;</span>POSTGRES_DATABASE<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> REDIS_HOST=$<span class="token punctuation">&#123;</span>REDIS_HOST<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> REDIS_PORT=$<span class="token punctuation">&#123;</span>REDIS_PORT<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> REDIS_PASSWORD=$<span class="token punctuation">&#123;</span>REDIS_PASSWORD<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> MINIO_HOST=$<span class="token punctuation">&#123;</span>MINIO_HOST<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> MINIO_PORT=$<span class="token punctuation">&#123;</span>MINIO_PORT<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> MINIO_ACCESS_KEY=$<span class="token punctuation">&#123;</span>MINIO_ACCESS_KEY<span class="token punctuation">&#125;</span> <span class="token comment"># Access key for MinIO</span>      <span class="token punctuation">-</span> MINIO_SECRET_KEY=$<span class="token punctuation">&#123;</span>MINIO_SECRET_KEY<span class="token punctuation">&#125;</span> <span class="token comment"># Secret key for MinIO</span>      <span class="token punctuation">-</span> JWT_SECRET=$<span class="token punctuation">&#123;</span>JWT_SECRET<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> JWT_EXPIRES_IN=$<span class="token punctuation">&#123;</span>JWT_EXPIRES_IN<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> ES_NODE=$<span class="token punctuation">&#123;</span>ES_NODE<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> ELASTIC_USERNAME=$<span class="token punctuation">&#123;</span>ELASTIC_USERNAME<span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> ELASTIC_PASSWORD=$<span class="token punctuation">&#123;</span>ELASTIC_PASSWORD<span class="token punctuation">&#125;</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">ibuy_network</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-配置-Github-Workflow"><a href="#3-配置-Github-Workflow" class="headerlink" title="3. 配置 Github Workflow"></a>3. <strong>配置 Github Workflow</strong></h1><h2 id="3-1-Github-Action-简介"><a href="#3-1-Github-Action-简介" class="headerlink" title="3.1. Github Action 简介"></a>3.1. <strong>Github Action 简介</strong></h2><ul><li><strong>GitHub Actions</strong> 部署文件通常以 <code>xxx.yml</code> 命名，路径为项目根目录下 <code>/.github/workflows/xxx.yml</code> 。</li><li><strong>Jobs 中使用的 Action 可以去 github 的</strong><a href="https://github.com/marketplace">macketplace</a>寻找</li></ul><p><strong>一般的 workflow 流程如下</strong></p><ol><li><p><strong>Action</strong></p><ol><li><strong>条件</strong></li></ol></li><li><p><strong>分支</strong></p></li><li><p><strong>Jobs</strong></p><ol><li><strong>运行环境</strong></li></ol></li><li><p><strong>步骤一</strong></p></li><li><p><strong>步骤二</strong></p></li><li><p><strong>步骤 N</strong></p></li><li><p><strong>发布到服务器</strong></p></li></ol><h2 id="3-2-创建-workflow"><a href="#3-2-创建-workflow" class="headerlink" title="3.2. 创建 workflow"></a>3.2. <strong>创建 workflow</strong></h2><p><strong>根据上面的分析，我们可以在前端项目的根目录创建如下的 **</strong>.github&#x2F;workflows&#x2F;deploy.yml**</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Docker Image CI/CD<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main <span class="token comment"># 当 main 分支有推送时触发</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment"># 切换分支</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4      <span class="token comment"># 部署到服务器</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to server        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@v5.1.0        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 服务器的主机地址</span>          <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SERVER_HOST <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment"># 服务器用户名</span>          <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SERVER_USERNAME <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment"># 服务器私钥</span>          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SERVER_PRIVATE_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment"># 本地源目录</span>          <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">"."</span>          <span class="token comment">#          EXCLUDE: "/node_modules/"</span>          <span class="token comment"># 部署前执行的脚本</span>          <span class="token key atrule">SCRIPT_BEFORE</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            # 创建工作目录            mkdir -p ~/work/ibuy-backend            # 删除构建目录            rm -rf ~/work/ibuy-backend/dist</span>          <span class="token comment"># 目标目录（将github上已经提交的内容全部上传到服务器对应为止）</span>          <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> <span class="token string">"~/work/ibuy-backend"</span>          <span class="token comment"># 部署后执行的脚本</span>          <span class="token key atrule">SCRIPT_AFTER</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            # 进入工作目录            cd ~/work/ibuy-backend</span>            <span class="token comment"># 构建并启动 Docker 容器</span>            docker<span class="token punctuation">-</span>compose up <span class="token punctuation">-</span><span class="token punctuation">-</span>build <span class="token punctuation">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为要部署到服务器端，所以要了解连接到服务器的方式，我们选择 ssh 连接，网上也用 sftp 连接连接的教程。</p><p>​<strong>我们用的 Action 是</strong><a href="https://github.com/marketplace/actions/ssh-deploy#configuration"><strong>ssh deploy</strong></a> <strong>，它相关的配置项可以点链接详细查看</strong></p><p>​</p><h2 id="3-3-在服务器配置秘钥"><a href="#3-3-在服务器配置秘钥" class="headerlink" title="3.3. 在服务器配置秘钥"></a>3.3. <strong>在服务器配置秘钥</strong></h2><ul><li><strong>使用</strong><code>deploy</code>用户登录我们的服务器，在 <code>root</code> 目录下输入，直接回车到底</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keygen <span class="token punctuation">-</span>m PEM <span class="token punctuation">-</span>t rsa <span class="token punctuation">-</span>b 4096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>**此时， **<code>~/.ssh/</code> 下生成了私钥文件 <code>id_dsa</code> 、公钥文件<code>id_dsa.pub</code> ，然后根据公钥文件生成<code>authorized_keys</code> ，</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">>></span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>给以上三个文件分别设置权限。</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4-在-github-项目中设置仓库秘钥"><a href="#3-4-在-github-项目中设置仓库秘钥" class="headerlink" title="3.4. 在 github 项目中设置仓库秘钥"></a>3.4. <strong>在 github 项目中设置仓库秘钥</strong></h2><p>**进入到你的 github 项目中，点击顶部导航栏的**<strong>​Setting。​</strong>然后点击 **Secrets and variables -&gt; New repository secret** 创建 workflow 中需要的三个变量，分别是</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/411665/1739775808823-a0836f96-220a-408d-a58d-0abd591a7ece.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2025/png/411665/1739775808823-a0836f96-220a-408d-a58d-0abd591a7ece.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="3-4-1-REMOTE-HOST"><a href="#3-4-1-REMOTE-HOST" class="headerlink" title="3.4.1. REMOTE_HOST"></a>3.4.1. <strong>REMOTE_HOST</strong></h3><p><strong>你的服务器 ip</strong></p><h3 id="3-4-2-REMOTE-USER"><a href="#3-4-2-REMOTE-USER" class="headerlink" title="3.4.2. REMOTE_USER"></a>3.4.2. <strong>REMOTE_USER</strong></h3><p>**填写 **<code>deploy</code>用户</p><h3 id="3-4-3-SSH-PRIVATE-KEY"><a href="#3-4-3-SSH-PRIVATE-KEY" class="headerlink" title="3.4.3. SSH_PRIVATE_KEY"></a>3.4.3. <strong>SSH_PRIVATE_KEY</strong></h3><p><strong>用于连接服务器的秘钥，你需要在</strong>服务器中 <code>cat</code> 密钥，将所有内容复制到上图的 <strong>SSH_PRIVATE_KEY</strong> 中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-服务器设置"><a href="#4-服务器设置" class="headerlink" title="4. 服务器设置"></a>4. <strong>服务器设置</strong></h1><p><strong>使用</strong><code>deploy</code>用户登录服务器，然后输入<code>pwd</code>。我们会发现当前用户的工作目就是我们设置的家目录<code>/home/deploy</code></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/411665/1740295209014-52f4acdc-f863-46c2-ba88-9add391f2d4f.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2025/png/411665/1740295209014-52f4acdc-f863-46c2-ba88-9add391f2d4f.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>然后我们创建 nestjs 的工作目录</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mkdir <span class="token punctuation">-</span>p ~/work/ibuy<span class="token punctuation">-</span>backend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里的</strong><code>&quot;~&quot;</code>指的就是我们的家目录 <code>/home/deploy</code>。</p><p><strong>因为我们的.env 文件不能外露到 github 上，所需要使用</strong><code>vim .env</code>手动创建以下我们的<code>.env</code>文件，将下面的内容拷贝到<code>.env</code>中</p><p><strong>注意：这里要按照你自己的环境变量配置</strong></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">JWT_SECRET=xxxJWT_EXPIRES_IN=10d#postgrePOSTGRES_HOST=your-hostPOSTGRES_PORT=5432POSTGRES_USER=postgresPOSTGRES_PASSWORD=xxxPOSTGRES_DATABASE=mall# redisREDIS_HOST=your-hostREDIS_PORT=6379REDIS_PASSWORD=xxx# minioMINIO_HOST=your-hostMINIO_PORT=9000MINIO_ROOT_USER=minioMINIO_ROOT_PASSWORD=xxxMINIO_ACCESS_KEY=xxxMINIO_SECRET_KEY=xxx# elasticsearch dev enviromentES_NODE=http://your-host:9200ELASTIC_USERNAME=elasticELASTIC_PASSWORD=xxxES_PORT=9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-其他方案问题"><a href="#5-其他方案问题" class="headerlink" title="5. 其他方案问题"></a>5. <strong>其他方案问题</strong></h1><p><strong>在使用 github action 部署时发现 nestjs 的项目在 build 时不会将 node_modules 打包进去，这就导致需要将所有的文件拉到服务器上再执行构建任务。正好有一篇</strong><a href="https://juejin.cn/post/7065724860688760862#heading-2">文章</a>也讲到了这个问题。它是自己创建了一个<code>webpack.config.js</code>文件，忽略掉<code>externals</code>以及一些 nest 提供的插件。但是这有一个很大的隐患：只适用于简单的纯 js 项目，如果遇到了依赖库里有动态加载，二进制依赖，使用了 fs 读写文件，这几种情况打包成一个文件会出问题</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Git </tag>
            
            <tag> Nestjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker + Jenkins + Nginx 实战前端自动化部署</title>
      <link href="/2025/02/20/yun-wei/githubaction-zi-dong-hua-bu-shu-qian-duan-ying-yong/"/>
      <url>/2025/02/20/yun-wei/githubaction-zi-dong-hua-bu-shu-qian-duan-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker-部署-nginx"><a href="#1-docker-部署-nginx" class="headerlink" title="1. docker 部署 nginx"></a>1. docker 部署 nginx</h1><h2 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1. 拉取镜像"></a>1.1. 拉取镜像</h2><p><code>docker pull nginx</code></p><h2 id="1-2-创建挂载目录"><a href="#1-2-创建挂载目录" class="headerlink" title="1.2. 创建挂载目录"></a>1.2. 创建挂载目录</h2><pre><code>mkdir -p /usr/local/docker-volumes/nginx/&#123;conf,log,html&#125;</code></pre><h2 id="1-3-运行容器"><a href="#1-3-运行容器" class="headerlink" title="1.3. 运行容器"></a>1.3. 运行容器</h2><pre><code>docker run --name nginx -d -p 80:80 nginx</code></pre><h2 id="1-4-复制-nginx-默认配置"><a href="#1-4-复制-nginx-默认配置" class="headerlink" title="1.4. 复制 nginx 默认配置"></a>1.4. 复制 nginx 默认配置</h2><pre><code>docker cp nginx:/etc/nginx/nginx.conf /usr/local/docker-volumes/nginxdocker cp nginx:/etc/nginx/conf.d /usr/local/docker-volumes/nginxdocker cp nginx:/usr/share/nginx/html /usr/local/docker-volumes/nginxdocker rm -f nginx</code></pre><h2 id="1-5-修改-default-conf-文件"><a href="#1-5-修改-default-conf-文件" class="headerlink" title="1.5. 修改 default.conf 文件"></a>1.5. 修改 default.conf 文件</h2><p>后续就是修改 default.conf 文件</p><pre><code>vim /usr/local/docker-volumes/nginx/conf.d/default.conf</code></pre><p>然后将 default.conf 改成如下</p><pre><code>server &#123;    listen       80;    server_name  localhost;​    #charset koi8-r;    access_log  /var/log/nginx/host.access.log  main;    error_log  /var/log/nginx/error.log  error;​    #location / &#123;    #    root   /usr/share/nginx/html;    #    index  index.html index.htm;    #&#125;    静态资源目录    root /usr/share/nginx/html/dist;    location / &#123;        # 用于配合 browserHistory使用        try_files $uri $uri/index.html /index.html;        # 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验        # rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent;    &#125;    # 添加API代理配置    location /api/ &#123;        # 注意，这里的host写的是后端在docker中的服务名,因为我们的后端是用docker部署的        proxy_pass http://backend-nestjs:8001/;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;    &#125;​    #error_page  404              /404.html;​    # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html &#123;        root   /usr/share/nginx/html;    &#125;&#125;</code></pre><h2 id="1-6-查看-docker-网络"><a href="#1-6-查看-docker-网络" class="headerlink" title="1.6. 查看 docker 网络"></a>1.6. 查看 docker 网络</h2><p>因为我的后端也是用的 docker 部署的，所以在运行 nginx 镜像前需要将两个容器放在相同的网络中。不然不同的 docker 容器无法相互连接。</p><p>使用<code>docker network ls</code>查看后端部署的网络，我定了一个名为<code>ibuy-backend_ibuy_network</code>的网络。</p><h2 id="1-7-重新运行-nginx-镜像"><a href="#1-7-重新运行-nginx-镜像" class="headerlink" title="1.7. 重新运行 nginx 镜像"></a>1.7. 重新运行 nginx 镜像</h2><p>在配置中加上<code>ibuy-backend_ibuy_network</code>网络</p><pre><code>docker run --name nginx -m 200m -p 80:80 \-v /usr/local/docker-volumes/nginx/nginx.conf:/etc/nginx/nginx.conf \-v /usr/local/docker-volumes/nginx/conf.d:/etc/nginx/conf.d \-v /usr/local/docker-volumes/nginx/html:/usr/share/nginx/html \-v /usr/local/docker-volumes/nginx/log:/var/log/nginx \-e TZ=Asia/Shanghai \--restart=always \--network ibuy-backend_ibuy_network \--privileged=true -d nginx</code></pre><p>到这里，nginx 相关配置基本完成</p><h1 id="2-部署-Github-Action"><a href="#2-部署-Github-Action" class="headerlink" title="2. 部署 Github Action"></a>2. 部署 Github Action</h1><p>此前也用过 github action 。不过是用来发布 npm 包。这次使用 github action 部署前端自动化是因为在使用 jenkins 做自动部署时，我的服务器内存太小。只有 2GB。所以在服务器内部使用 jenkins 进行前端项目的 CI&#x2F;CD 时会占满内存。</p><p>所以就想着吧 CI&#x2F;CD 这个步骤给移出去，这就想到了<a href="https://docs.github.com/zh/actions">GitHub Actions</a></p><h2 id="2-1-Github-Action-简介"><a href="#2-1-Github-Action-简介" class="headerlink" title="2.1. Github Action 简介"></a>2.1. Github Action 简介</h2><ul><li><strong>GitHub Actions</strong> 部署文件通常以 <code>xxx.yml</code> 命名，路径为项目根目录下 <code>/.github/workflows/xxx.yml</code> 。</li><li>Jobs 中使用的 Action 可以去 github 的<a href="https://github.com/marketplace">macketplace</a>寻找</li></ul><p>一般的 workflow 流程如下</p><ol><li>Action<ol><li>条件</li><li>分支</li></ol></li><li>Jobs<ol><li>运行环境<ol><li>步骤一</li><li>步骤二</li><li>步骤 N</li><li>发布到服务器</li></ol></li></ol></li></ol><h2 id="2-2-创建-workflow"><a href="#2-2-创建-workflow" class="headerlink" title="2.2. 创建 workflow"></a>2.2. 创建 workflow</h2><p>根据上面的分析，我们可以在前端项目的根目录创建如下的 <strong>.github&#x2F;workflows&#x2F;web-deploy.yml</strong></p><pre><code># 当前工作流的名称name: web-deployon:  push: # 什么时候触发    branches:      - main # 哪个分支jobs: # 构建的任务，一个工作流有多个构建任务，  build-and-deploy:    runs-on: ubuntu-latest # 在什么服务器上面执行这些任务，这里使用最新版本的ubuntu    steps: # 构建任务的步骤，一个任务可分为多个步骤      # 切换分支      - name: Checkout        uses: actions/checkout@v4      # 步骤2 给当前服务器安装node      - name: use node        uses: actions/setup-node@v4.2.0        with:          node-version: 20          cache: &#39;yarn&#39;      # 步骤3 下载项目依赖      - name: install        # --production只会安装dependencies的依赖，        # 如果你构建时依赖devDependencies的包, 请谨慎使用该优化项        run: yarn install --production --no-progress      # 步骤4 打包node项目      - name: build        run: yarn build      # 步骤5 部署项目到服务器      - name: ssh deploy        uses: easingthemes/ssh-deploy@v5.1.0        with:          # Private key part of an SSH key pair          SSH_PRIVATE_KEY: $&#123;&#123; secrets.SSH_PRIVATE_KEY &#125;&#125;          # Remote host          REMOTE_HOST: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125;          # Remote user          REMOTE_USER: $&#123;&#123; secrets.REMOTE_USER &#125;&#125;          # Source directory, path relative to `$GITHUB_WORKSPACE` root, eg: `dist/`          SOURCE: &#39;/dist/&#39;          # 在执行 rsync 前, 先创建静态资源目录          SCRIPT_BEFORE: |            mkdir -p /usr/local/docker-volumes/nginx/html/dist            rm -rf /usr/local/docker-volumes/nginx/html/dist/*          # 静态资源目标目录          TARGET: &#39;/usr/local/docker-volumes/nginx/html/dist&#39;</code></pre><p>因为要部署到服务器端，所以要了解连接到服务器的方式，我们选择 ssh 连接，网上也用 sftp 连接连接的教程。</p><p>我们用的 Action 是<a href="https://github.com/marketplace/actions/ssh-deploy#configuration"><strong>ssh deploy</strong></a> ****，它相关的配置项可以点链接详细查看</p><h2 id="2-3-在服务器配置秘钥"><a href="#2-3-在服务器配置秘钥" class="headerlink" title="2.3. 在服务器配置秘钥"></a>2.3. 在服务器配置秘钥</h2><ul><li>登录我们的服务器，在 <code>root</code> 目录下输入，直接回车到底</li></ul><!----><pre><code>ssh-keygen -m PEM -t rsa -b 4096</code></pre><ul><li>此时， <code>/root/.ssh/</code> 下生成了私钥文件 <code>id_dsa</code> 、公钥文件<code>id_dsa.pub</code> ，然后根据公钥文件生成<code>authorized_keys</code> ，</li></ul><!----><pre><code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre><ul><li>给以上三个文件分别设置权限。</li></ul><!----><pre><code>chmod 600 ~/.ssh/id_rsa</code></pre><!----><pre><code>chmod 600 ~/.ssh/id_rsa.pub</code></pre><!----><pre><code>chmod 600 ~/.ssh/authorized_keys</code></pre><h2 id="2-4-在-github-项目中设置仓库秘钥"><a href="#2-4-在-github-项目中设置仓库秘钥" class="headerlink" title="2.4. 在 github 项目中设置仓库秘钥"></a>2.4. 在 github 项目中设置仓库秘钥</h2><p>进入到你的 github 项目中，点击顶部导航栏的<strong>Setting。</strong> 然后点击 <strong>Secrets and variables -&gt; New repository secret</strong> 创建 workflow 中需要的三个变量，分别是</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1659586d856641488d580b8394982d52~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=zGLWO7e8JhqZEnQ4weaV81KtMN8=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1659586d856641488d580b8394982d52~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=zGLWO7e8JhqZEnQ4weaV81KtMN8=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="2-4-1-REMOTE-HOST"><a href="#2-4-1-REMOTE-HOST" class="headerlink" title="2.4.1. REMOTE_HOST"></a>2.4.1. REMOTE_HOST</h3><p>你的服务器 ip</p><h3 id="2-4-2-REMOTE-USER"><a href="#2-4-2-REMOTE-USER" class="headerlink" title="2.4.2. REMOTE_USER"></a>2.4.2. REMOTE_USER</h3><p>填写 root</p><h3 id="2-4-3-SSH-PRIVATE-KEY"><a href="#2-4-3-SSH-PRIVATE-KEY" class="headerlink" title="2.4.3. SSH_PRIVATE_KEY"></a>2.4.3. SSH_PRIVATE_KEY</h3><p>用于连接服务器的秘钥，你需要在服务器中 <code>cat</code> 密钥，将所有内容复制到上图的 <strong>SSH_PRIVATE_KEY</strong> 中</p><pre><code>cat ~/.ssh/id_rsa</code></pre><h2 id="2-5-提交代码，并查看仓库的-Actions"><a href="#2-5-提交代码，并查看仓库的-Actions" class="headerlink" title="2.5. 提交代码，并查看仓库的 Actions"></a>2.5. 提交代码，并查看仓库的 Actions</h2><p>首先到前端项目中提交你的代码（要包含 workflow）。</p><p>然后再到 github 上查看对应的仓库，点击 Actions 查看对应的工作流</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/929865602f414878b21ccb5afd730c0f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=tJsnbmoakcXgIdldutod33G0cZU=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/929865602f414878b21ccb5afd730c0f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=tJsnbmoakcXgIdldutod33G0cZU=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/ec539490a0d84b11b8fdb84950763144~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=sPiyGf1q1gyClOtjmVQYjrlWCpM=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/ec539490a0d84b11b8fdb84950763144~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639463&x-orig-sign=sPiyGf1q1gyClOtjmVQYjrlWCpM=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker + Jenkins + Nginx 实战前端自动化部署</title>
      <link href="/2025/02/20/yun-wei/jenkins-qian-duan-zi-dong-hua-bu-shu/"/>
      <url>/2025/02/20/yun-wei/jenkins-qian-duan-zi-dong-hua-bu-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文用于学习和记录</p></blockquote><h1 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1. 前提条件"></a>1. 前提条件</h1><ul><li>安装 Docker 和 Docker Compose</li><li>安装 Jenkins</li><li>拥有一个前端项目的代码库（例如 GitHub）</li></ul><h2 id="1-1-准备一台服务器"><a href="#1-1-准备一台服务器" class="headerlink" title="1.1. 准备一台服务器"></a>1.1. 准备一台服务器</h2><p>服务器一台，请根据自己的项目选择不同配置的服务器，如果你的项目很大，内存太小，则会导致 build 失败</p><h2 id="1-2-安装-docker"><a href="#1-2-安装-docker" class="headerlink" title="1.2. 安装 docker"></a>1.2. 安装 docker</h2><p>看 docker 相关安装步骤</p><h2 id="1-3-安装-jdk"><a href="#1-3-安装-jdk" class="headerlink" title="1.3. 安装 jdk"></a>1.3. 安装 jdk</h2><h3 id="1-3-1-检查系统是否自带-jdk"><a href="#1-3-1-检查系统是否自带-jdk" class="headerlink" title="1.3.1. 检查系统是否自带 jdk"></a>1.3.1. 检查系统是否自带 jdk</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-2-如果有就删除"><a href="#1-3-2-如果有就删除" class="headerlink" title="1.3.2. 如果有就删除"></a>1.3.2. 如果有就删除</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n1</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span><span class="token comment">#rpm -qa:查询所安装的所有rpm包</span><span class="token comment">#grep -i:忽略大小写</span><span class="token comment">#xargs -n1:表示每次只传递一个参数</span><span class="token comment">#rpm -e --nodeps:强制卸载软件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-检查是否删除"><a href="#1-3-3-检查是否删除" class="headerlink" title="1.3.3. 检查是否删除"></a>1.3.3. 检查是否删除</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看是否还在即可</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token function">java</span><span class="token comment">#或者查看java版本</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-通过wget-下载jdk1-8-并解压"><a href="#1-3-4-通过wget-下载jdk1-8-并解压" class="headerlink" title="1.3.4. 通过wget 下载jdk1.8 并解压"></a>1.3.4. 通过<a href="https://link.juejin.cn/?target=https://so.csdn.net/so/search?q=wget%25E4%25B8%258B%25E8%25BD%25BD&spm=1001.2101.3001.7020">wget 下载</a>jdk1.8 并解压</h3><h4 id="1-3-4-1-进入-home-目录并创建-jdk-文件夹"><a href="#1-3-4-1-进入-home-目录并创建-jdk-文件夹" class="headerlink" title="1.3.4.1. 进入 home 目录并创建 jdk 文件夹"></a>1.3.4.1. 进入 home 目录并创建 jdk 文件夹</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home   //进入home文件夹<span class="token function">mkdir</span> jdk  //创建jdk文件夹<span class="token builtin class-name">cd</span> jdk     //进入jdk文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-3-4-2-进入-jdk-文件通过-wget-下载-jdk1-8"><a href="#1-3-4-2-进入-jdk-文件通过-wget-下载-jdk1-8" class="headerlink" title="1.3.4.2. 进入 jdk 文件通过 wget 下载 jdk1.8"></a>1.3.4.2. 进入 jdk 文件通过 wget 下载 jdk1.8</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token punctuation">\</span>--no-check-certificate <span class="token punctuation">\</span>--no-cookies <span class="token punctuation">\</span><span class="token parameter variable">--header</span> <span class="token punctuation">\</span><span class="token string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> <span class="token punctuation">\</span>http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-4-3-解压安装包"><a href="#1-3-4-3-解压安装包" class="headerlink" title="1.3.4.3. 解压安装包"></a>1.3.4.3. 解压安装包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xvf jdk-8u131-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-4-4-配置环境变量"><a href="#1-3-4-4-配置环境变量" class="headerlink" title="1.3.4.4. 配置环境变量"></a>1.3.4.4. 配置环境变量</h4><pre><code>vim /etc/profile</code></pre><p>然后在最后一行插入以下内容</p><pre><code>export JAVA_HOME=/home/jdk/jdk1.8.0_131 # 你的jdk文件路径export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>然后运行<code>source /etc/profile</code>使文件生效</p><h4 id="1-3-4-5-查看是否安装成功"><a href="#1-3-4-5-查看是否安装成功" class="headerlink" title="1.3.4.5. 查看是否安装成功"></a>1.3.4.5. 查看是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-4-安装-jenkins"><a href="#1-4-安装-jenkins" class="headerlink" title="1.4. 安装 jenkins"></a>1.4. 安装 jenkins</h2><h3 id="1-4-1-使用-docker-安装"><a href="#1-4-1-使用-docker-安装" class="headerlink" title="1.4.1. 使用 docker 安装"></a>1.4.1. 使用 docker 安装</h3><h4 id="1-4-1-1-拉取镜像"><a href="#1-4-1-1-拉取镜像" class="headerlink" title="1.4.1.1. 拉取镜像"></a>1.4.1.1. 拉取镜像</h4><pre><code>docker pull jenkins/jenkins:latest</code></pre><h4 id="1-4-1-2-创建挂载目录"><a href="#1-4-1-2-创建挂载目录" class="headerlink" title="1.4.1.2. 创建挂载目录"></a>1.4.1.2. 创建挂载目录</h4><p>挂载目录用于存放数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//创建目录<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/docker-volumes/jenkins_data//授权权限<span class="token function">chmod</span> <span class="token number">777</span> /usr/local/docker-volumes/jenkins_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-1-3-启动-Jenkins-容器"><a href="#1-4-1-3-启动-Jenkins-容器" class="headerlink" title="1.4.1.3. 启动 Jenkins 容器"></a>1.4.1.3. 启动 Jenkins 容器</h4><p>启动命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">8082</span>:8080 <span class="token punctuation">\</span>  <span class="token comment"># 映射 Jenkins Web 端口</span>  <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token punctuation">\</span>  <span class="token comment"># 映射 Jenkins Agent 端口</span>  <span class="token parameter variable">-v</span> /usr/local/docker-volumes/jenkins_data:/var/jenkins_home <span class="token punctuation">\</span>  <span class="token comment"># 挂载 Jenkins 数据目录</span>  <span class="token parameter variable">-v</span> /usr/bin/docker:/usr/bin/docker <span class="token punctuation">\</span>  <span class="token comment"># 挂载 Docker 二进制文件</span>  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>  <span class="token comment"># 挂载 Docker 套接字</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>  <span class="token comment"># 设置时区</span>  <span class="token parameter variable">-u</span> root <span class="token punctuation">\</span> <span class="token comment"># 以 root 身份进入</span>  <span class="token parameter variable">--memory</span><span class="token operator">=</span><span class="token string">"2g"</span> <span class="token punctuation">\</span>  <span class="token comment"># 限制内存为 2GB</span>  <span class="token parameter variable">--cpus</span><span class="token operator">=</span><span class="token string">"2"</span> <span class="token punctuation">\</span>  <span class="token comment"># 限制 CPU 为 2 核</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>on-failure <span class="token punctuation">\</span>  <span class="token comment"># 容器失败时自动重启</span>  <span class="token parameter variable">--name</span> myjenkins <span class="token punctuation">\</span>  <span class="token comment"># 容器名称</span>  --health-cmd <span class="token string">"curl -f http://localhost:8080 || exit 1"</span> <span class="token punctuation">\</span>  <span class="token comment"># 健康检查</span>  --health-interval<span class="token operator">=</span>30s <span class="token punctuation">\</span>  <span class="token comment"># 健康检查间隔</span>  --health-timeout<span class="token operator">=</span>10s <span class="token punctuation">\</span>  <span class="token comment"># 健康检查超时时间</span>  --health-retries<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">\</span>  <span class="token comment"># 健康检查重试次数</span>  jenkins/jenkins:latest  <span class="token comment"># Jenkins 镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-1-4-验证是否启动成功"><a href="#1-4-1-4-验证是否启动成功" class="headerlink" title="1.4.1.4. 验证是否启动成功"></a>1.4.1.4. 验证是否启动成功</h4><pre><code>docker ps -a | grep myjenkins</code></pre><p>然后检查 STATUS，正常如下</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/f3cff85a941448479548aa14e584ec94~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2uSuLD6PZwrUWTrwFefkfEfGxjQ=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/f3cff85a941448479548aa14e584ec94~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2uSuLD6PZwrUWTrwFefkfEfGxjQ=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h4 id="1-4-1-5-修改插件源"><a href="#1-4-1-5-修改插件源" class="headerlink" title="1.4.1.5. 修改插件源"></a>1.4.1.5. 修改插件源</h4><p>Jenkins 在安装插件时，下载相关插件包特别慢，我们可以将 Jenkins 默认的插件数据源变更为国内数据源，然后重启 Jenkins</p><h5 id="1-4-1-5-1-进入目录"><a href="#1-4-1-5-1-进入目录" class="headerlink" title="1.4.1.5.1. 进入目录"></a>1.4.1.5.1. 进入目录</h5><p>以我们的例子为准，我们挂载的 volume 如下</p><pre><code>cd /usr/local/docker-volumes/jenkins_data/updates</code></pre><h5 id="1-4-1-5-2-修改-default-json-的源"><a href="#1-4-1-5-2-修改-default-json-的源" class="headerlink" title="1.4.1.5.2. 修改 default.json 的源"></a>1.4.1.5.2. 修改 default.json 的源</h5><pre><code>sed -i &#39;s#http://updates.jenkins-ci.org/download/#https://mirrors.tuna.tsinghua.edu.cn/jenkins/#g&#39; default.jsonsed -i &#39;s#http://www.google.com/#https://www.baidu.com/#g&#39; default.json</code></pre><h5 id="1-4-1-5-3-修改-hudson-model-UpdateCenter-xml-的-url"><a href="#1-4-1-5-3-修改-hudson-model-UpdateCenter-xml-的-url" class="headerlink" title="1.4.1.5.3. 修改 hudson.model.UpdateCenter.xml 的 url"></a>1.4.1.5.3. 修改 hudson.model.UpdateCenter.xml 的 url</h5><p>将该文件修改为如下内容</p><pre><code>&lt;?xml version=&#39;1.1encoding=&#39;UTF-8&#39;?&gt;&lt;sites&gt;    &lt;site&gt;        &lt;id&gt;default&lt;/id&gt;        &lt;urI&gt;http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;/url》    &lt;/site&gt;&lt;/sites&gt;</code></pre><h4 id="1-4-1-6-登录-jenkins"><a href="#1-4-1-6-登录-jenkins" class="headerlink" title="1.4.1.6. 登录 jenkins"></a>1.4.1.6. 登录 jenkins</h4><p>在我们访问了 <code>ip:8082</code>后，界面会跳出来</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/c115a80eac7544b5b426989e87c6967c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=fxYNJVbZ3tPSqAfJBkg0yUKX8pg=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/c115a80eac7544b5b426989e87c6967c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=fxYNJVbZ3tPSqAfJBkg0yUKX8pg=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>然后我们就可以通过以下的方式获取密码</p><h5 id="1-4-1-6-1-查看日志"><a href="#1-4-1-6-1-查看日志" class="headerlink" title="1.4.1.6.1. 查看日志"></a>1.4.1.6.1. 查看日志</h5><p><code>docker logs myjenkins</code>，找到<strong>Please use the following password to proceed to installation</strong></p><p>这句话后面的就是初始密码</p><h5 id="1-4-1-6-2-查看文件"><a href="#1-4-1-6-2-查看文件" class="headerlink" title="1.4.1.6.2. 查看文件"></a>1.4.1.6.2. 查看文件</h5><p>查看我们挂载的目录</p><pre><code>cd /usr/local/docker-volumes/jenkins_data/secretscat initialAdminPassword</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="1-4-1-7-安装插件"><a href="#1-4-1-7-安装插件" class="headerlink" title="1.4.1.7. 安装插件"></a>1.4.1.7. 安装插件</h4><p>选择<strong>安装推荐的插件</strong></p><p>下载完成，就可以进入 jenkins 进行操作了</p><h4 id="1-4-1-8-插件推荐"><a href="#1-4-1-8-插件推荐" class="headerlink" title="1.4.1.8. 插件推荐"></a>1.4.1.8. 插件推荐</h4><ul><li>Locale（中文插件）</li><li>Maven Integration（maven 构建工具）</li><li>Publish Over SSH（远程推送工具）</li><li>Role-based Authorization Strategy（权限管理）</li><li>Deploy to container（自动化部署工程所需要插件，部署到容器插件）</li><li>git parameter（用户参数化构建过程里添加 git 类型参数）</li></ul><h4 id="1-4-1-9-安装-node"><a href="#1-4-1-9-安装-node" class="headerlink" title="1.4.1.9. 安装 node"></a>1.4.1.9. 安装 node</h4><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/30aee06e464c4a36b960cf8e38279f00~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=0f1l4bFRvA1oXaVZLiGVVjf1fHE=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/30aee06e464c4a36b960cf8e38279f00~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=0f1l4bFRvA1oXaVZLiGVVjf1fHE=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h4 id="1-4-1-10-配置-node"><a href="#1-4-1-10-配置-node" class="headerlink" title="1.4.1.10. 配置 node"></a>1.4.1.10. 配置 node</h4><p>我们进入<code>Dashboard &gt; 系统管理 &gt; Tools </code>进行如下配置</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/70fad0103df9412b85e359b262d16099~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=kLYJWX9DcsfS9QLjDgSirH/GYxQ=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/70fad0103df9412b85e359b262d16099~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=kLYJWX9DcsfS9QLjDgSirH/GYxQ=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h4 id="1-4-1-11-配置-github"><a href="#1-4-1-11-配置-github" class="headerlink" title="1.4.1.11. 配置 github"></a>1.4.1.11. 配置 github</h4><p>进入<code>Dashboard &gt; 系统管理 &gt; System</code> 配置如下信息</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/56a2b4c7a67f4c6dab74ea3378a93cf4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=BDMxLnlG722X0JuoZA/koUmo9b8=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/56a2b4c7a67f4c6dab74ea3378a93cf4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=BDMxLnlG722X0JuoZA/koUmo9b8=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>点击添加</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/d47908b9f1e44d9f8370f846d657bb47~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=EqAKMtQ8scJziAViAVAdikbthDk=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/d47908b9f1e44d9f8370f846d657bb47~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=EqAKMtQ8scJziAViAVAdikbthDk=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp">我们去 github 获取秘钥填写进 secret 里面</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/e015d76dc551459885aea599531bbd2e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=3wOXHveCgkYHP2IxA78smAm94Lo=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/e015d76dc551459885aea599531bbd2e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=3wOXHveCgkYHP2IxA78smAm94Lo=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>然后点击测试，如果如第一张图的返回一样，则表示成功</p><p>点击高级<img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/096566de0b4f46b1b7a5c6dd87088019~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2tvYxOiXkoZWff/Jz1LWc8F2fbI=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/096566de0b4f46b1b7a5c6dd87088019~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2tvYxOiXkoZWff/Jz1LWc8F2fbI=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>将这个 url 复制到 github 仓库里面进行配置</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1c2192804d574924a9f488c71e823f49~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=j1XgC1GyPwKg90+9o0Sh8R7nyNU=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1c2192804d574924a9f488c71e823f49~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=j1XgC1GyPwKg90+9o0Sh8R7nyNU=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>点击 Webhooks，在这里粘贴我们刚刚复制的 url 地址</p><h4 id="1-4-1-12-创建一个任务"><a href="#1-4-1-12-创建一个任务" class="headerlink" title="1.4.1.12. 创建一个任务"></a>1.4.1.12. 创建一个任务</h4><p>到 Dashboard 首页，点击新建任务</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1dea6fd866f1439691e5413e4b75da02~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=UQRD1MCLA6XdiIBv6ZdPgugdxZw=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/1dea6fd866f1439691e5413e4b75da02~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=UQRD1MCLA6XdiIBv6ZdPgugdxZw=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>输入 github 地址</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/4909f79eead04ceaa7d6bc7ff6bc51ef~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=ToZXap+fPVbz/LgDaAOV9LZUWTU=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/4909f79eead04ceaa7d6bc7ff6bc51ef~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=ToZXap+fPVbz/LgDaAOV9LZUWTU=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>找到 <strong>源码管理标题</strong> 然后点击 Git, 添加 github 账号密码</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/73657bf5a7044ba4b1daf7dedfbcaed8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=4eALj95hldA+spAY7gl4izZkoZY=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/73657bf5a7044ba4b1daf7dedfbcaed8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=4eALj95hldA+spAY7gl4izZkoZY=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong><em>后面有个指定分支，别填错。要和你 git 项目的主分支一样</em></strong></p><hr><p>触发器选择 GitHub hook trigger for GITScm polling</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/5a61e9302e7149b6b35f600cc361d8ad~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=vnxRll4Q5c4KqC+wXau7C5+w01A=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/5a61e9302e7149b6b35f600cc361d8ad~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=vnxRll4Q5c4KqC+wXau7C5+w01A=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>构建环境选择 node</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/35a5454b5aab4dcfb1088be81ae14713~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2m9OJL0eny1CHHhGsBmJWXcBtjo=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/35a5454b5aab4dcfb1088be81ae14713~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=2m9OJL0eny1CHHhGsBmJWXcBtjo=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>添加构建步骤</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/6fa38a8245954a9996b839722025001d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=+aUNsKCtNn88NaRClZU7hj0Zcys=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/6fa38a8245954a9996b839722025001d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=+aUNsKCtNn88NaRClZU7hj0Zcys=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>输入命令</p><pre><code># 设置Node内存限制# export NODE_OPTIONS=&quot;--max_old_space_size=1024&quot;# 配置yarnyarn config set registry https://registry.npm.taobao.org/yarn config set strict-ssl falseyarn config set cache-folder .yarn-cacheyarn config set network-timeout 300000# 清理之前的构建缓存rm -rf node_modulesrm -rf .yarn-cache# 使用yarn安装依赖yarn install --production --prefer-offline --network-timeout 300000 --network-concurrency 4 --no-progress# 构建项目yarn build# 部署步骤rm -rf /home/nginx/html/*docker stop ibuy-admin-web || truedocker rm ibuy-admin-web || truedocker build -t reactginxcontainer .# 运行新容器时添加资源限制docker run \  -p 3000:80 \  -d \  --name ibuy-admin-web \  reactginxcontainer</code></pre><p>完成后如下，然后点击保存即可</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/6a80dce2984c4327833736e20e7998a8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=4cPL29BGSSuv8m664fDaVY3hlPk=" class="lazyload placeholder" data-srcset="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/6a80dce2984c4327833736e20e7998a8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgU2FlYmFSeW8=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNTg4OTkzOTYxNDA4Njg1In0=&rk3s=f64ab15b&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1740639296&x-orig-sign=4cPL29BGSSuv8m664fDaVY3hlPk=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="1-4-2-给前端项目配置环境"><a href="#1-4-2-给前端项目配置环境" class="headerlink" title="1.4.2. 给前端项目配置环境"></a>1.4.2. 给前端项目配置环境</h3><h4 id="1-4-2-1-创建-Dockerfile"><a href="#1-4-2-1-创建-Dockerfile" class="headerlink" title="1.4.2.1. 创建 Dockerfile"></a>1.4.2.1. 创建 Dockerfile</h4><p>首先，为前端项目创建一个 Dockerfile，用于打包前端项目：</p><pre><code>FROM nginxCOPY dist/ /usr/share/nginx/html/COPY nginx/default.conf /etc/nginx/conf.d/default.conf</code></pre><h4 id="1-4-2-2-创建一个-nginx-default-conf-文件，用于-Nginx-配置："><a href="#1-4-2-2-创建一个-nginx-default-conf-文件，用于-Nginx-配置：" class="headerlink" title="1.4.2.2. 创建一个 nginx&#x2F;default.conf 文件，用于 Nginx 配置："></a>1.4.2.2. 创建一个 nginx&#x2F;<code>default.conf</code> 文件，用于 Nginx 配置：</h4><pre><code>server &#123;    listen       80;    server_name  localhost;​    #charset koi8-r;    access_log  /var/log/nginx/host.access.log  main;    error_log  /var/log/nginx/error.log  error;​    location / &#123;        root   /usr/share/nginx/html;        index  index.html index.htm;    &#125;​    #error_page  404              /404.html;​    # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html &#123;        root   /usr/share/nginx/html;    &#125;    # 添加API代理配置 这里是可选项，如果你是前后端分离的项目这里需要配置    # proxy_pass就是你的后端接口地址    location /api/ &#123;        proxy_pass http://127.0.0.1:8001/;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;    &#125;&#125;</code></pre><h3 id="1-4-3-推送代码"><a href="#1-4-3-推送代码" class="headerlink" title="1.4.3. 推送代码"></a>1.4.3. 推送代码</h3><p>完成上述操作后就可以直接在本地 push 代码了</p><h3 id="1-4-4-开始构建"><a href="#1-4-4-开始构建" class="headerlink" title="1.4.4. 开始构建"></a>1.4.4. 开始构建</h3><p>然后我们切换到我们的 jenkins 管理界面，到 dashboard 中选择我们创建的任务。就可以看到构建进度和状态了。到这里部署完成</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://juejin.cn/post/7377643248187146251">https://juejin.cn/post/7377643248187146251</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端日常-基于RBAC和React-Router(V6)的权限控制</title>
      <link href="/2025/02/20/qian-duan/react/qian-duan-ri-chang-ji-yu-rbac-he-react-router-v6-de-quan-xian-kong-zhi/"/>
      <url>/2025/02/20/qian-duan/react/qian-duan-ri-chang-ji-yu-rbac-he-react-router-v6-de-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="theme-channing-cyan"><a href="#theme-channing-cyan" class="headerlink" title="theme: channing-cyan"></a>theme: channing-cyan</h2><p>在一个后台管理系统中，安全是很重要的。不光后端需要做权限校验，前端也需要做权限控制。<br>我们可以大致将权限分为 3 种： <strong>接口权限</strong>、<strong>页面权限</strong>、<strong>按钮权限</strong>。</p><p>在这当中，前端主要关注点则是<strong>页面权限</strong>，<strong>按钮权限</strong>，而前端做这些的主要目的则是：</p><ul><li>禁止用户访问一些无权限访问的页面</li><li>过滤不必要的请求，减少服务器压力</li></ul><p>这是具体的<a href="https://github.com/SaebaRyoo/Demos/tree/main/react-auth-demo/client">代码实现</a>，下面主要是思路的整理，以及一些核心实现</p><h2 id="接口权限"><a href="#接口权限" class="headerlink" title="接口权限"></a>接口权限</h2><p>接口权限一般是用户登录后，后端根据账号密码来<code>认证</code>和<code>授权</code>，并颁发<code>token</code>或者<code>session</code>等来保存用户登录状态。</p><p>后续客户端请求一般是在<code>header</code>中携带<code>token</code>，后端通过对 token 进行<code>鉴权</code>是否合法来控制是否可以访问接口。</p><p>一般后台会通过用户的角色等来做对应的接口<code>权限控制</code>。</p><p>而需要我们前端做的是在请求中携带好登录后回传的<code>token</code>,我们以<strong>axios</strong>为例</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"access_token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> request<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//token过期或者错误</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面权限"><a href="#页面权限" class="headerlink" title="页面权限"></a>页面权限</h2><p>首先，我们先完成<code>路由配置</code></p><p><code>src/routes/routes.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RoutesType</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  element<span class="token operator">:</span> ReactElement<span class="token punctuation">;</span>  children<span class="token operator">?</span><span class="token operator">:</span> RoutesType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> routers<span class="token operator">:</span> RoutesType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/foo/auth-button"</span><span class="token punctuation">,</span>        element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyAuthButtonPage</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/protected"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Protected</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/unauthorized"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UnauthorizedPage</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 配置404，需要放在最后</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/*"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NotFound</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是基于<code>路由配置</code>来生成对应的路由组件</p><p><code>src/routes/root.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">Root</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个有子节点的Route</span>  <span class="token keyword">const</span> <span class="token function-variable function">CreateHasChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>          <span class="token attr-name">index</span>          <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRoute</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">              </span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>element<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthRoute</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">&#125;</span></span>        <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>route<span class="token operator">?.</span>children <span class="token operator">&amp;&amp;</span> <span class="token function">RouteAuthFun</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个没有子节点的Route</span>  <span class="token keyword">const</span> <span class="token function-variable function">CreateNoChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRoute</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>element<span class="token punctuation">&#125;</span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthRoute</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 处理我们的routers</span>  <span class="token keyword">const</span> <span class="token function-variable function">RouteAuthFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>routeList<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> routeList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> element<span class="token operator">:</span> ReactElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>route<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        element <span class="token operator">=</span> <span class="token function">CreateHasChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        element <span class="token operator">=</span> <span class="token function">CreateNoChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">RouteAuthFun</span><span class="token punctuation">(</span>routers<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是只需要在入口中写入<code>Root</code>组件即可</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Root</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只是完成了基本的配置，下面才是权限相关</p><p>路由权限主要分为两个方向：</p><h3 id="1-菜单权限"><a href="#1-菜单权限" class="headerlink" title="1. 菜单权限"></a>1. 菜单权限</h3><p>一般来说，后台通过维护<code>user</code>、<code>role</code>、<code>menu</code>、<code>user_role</code>、<code>menu_role</code>这几张表来做基于 RBAC 的权限设计。</p><p>所以，在登录接口中，一般后台会返回用户对应的<code>角色</code>、<code>菜单</code>等信息。我们通过<code>redux-toolkit</code>保存登录数据。大致信息如下(<strong>未真正请求接口，只写了初始数据</strong>):</p><p><code>src/pages/login/Login.slice.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">LoginState</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  role<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  menuLists<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Define the initial state using that type</span><span class="token class-name"><span class="token keyword">const</span></span> initialState<span class="token operator">:</span> LoginState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token string">"ryo"</span><span class="token punctuation">,</span>  role<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  menuLists<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-home"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-foo"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"2-1"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"auth-button"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-auth-button"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/foo/auth-button"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>role</code>表示当前用户的角色,<code>menuLists</code>为用户可访问的菜单</p><p>然后在首页中生成菜单列表</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> getMenuItem <span class="token operator">=</span> <span class="token punctuation">(</span>menus<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> menus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menu<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span><span class="token function">getMenuItem</span><span class="token punctuation">(</span>menu<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> parentId <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent_id <span class="token operator">===</span> parentId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>item <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      menu<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> menu<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> menuLists <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuTree <span class="token operator">=</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">home page</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token function">getMenuItem</span><span class="token punctuation">(</span>menuTree<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，只<strong>根据权限列表来动态生成菜单</strong>并不能完全实现权限相关的目的。用户还可以通过<strong>在地址栏输入 url</strong>的方式来访问没有在菜单中显示的页面。</p><h3 id="2-路由权限"><a href="#2-路由权限" class="headerlink" title="2. 路由权限"></a>2. 路由权限</h3><p>我们可以通过实现一个<code>AuthRoute</code>来解决上述的问题。</p><p>通过<code>AuthRoute</code>来拦截页面的访问操作。</p><p><code>src/routes/AuthRoute.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 无需权限认证的白名单</span><span class="token comment">// 一般是前端的一些报错页</span><span class="token keyword">const</span> <span class="token constant">DONT_NEED_AUTHORIZED_PAGE</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/unauthorized"</span><span class="token punctuation">,</span> <span class="token string">"/*"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">AuthRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> children<span class="token punctuation">,</span> path <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 该flag用于控制 受保护页面的渲染时机，需要等待useEffect中所有的权限验证条件完成后才表示可以渲染</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>canRender<span class="token punctuation">,</span> setRenderFlag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuLists <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuUrls <span class="token operator">=</span> menuLists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span> <span class="token operator">=></span> menu<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">// 在白名单中的无需验证，直接跳转</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DONT_NEED_AUTHORIZED_PAGE</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用户未登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"token 过期，请重新登录!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 已登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 已登录需要通过logout来控制退出登录或者是token过期返回登录界面</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 已登录，根据后台传的权限列表做判断</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>menuUrls<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/unauthorized"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 当上面的权限控制通过后，再渲染受保护的页面</span>    <span class="token function">setRenderFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>token<span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canRender<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> children<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AuthRoute<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在我们生成<code>Route</code>的时候在<code>element</code>属性中使用<code>AuthRoute</code>,这一步，我们已经在上面<code>src/routes/root.tsx</code>这个文件中写进去了。</p><p>到这里，我们就通过实现<code>AuthRoute</code>来拦截页面访问，做权限相关处理。</p><p>然后我们可以运行该<a href="https://github.com/SaebaRyoo/Demos/tree/main/react-auth-demo/client">仓库</a><br>代码来看效果。</p><p>目前没有实现登录相关功能，所以需要手动在<code>localStorage</code>中添加<code>access_token</code>来模拟登录。</p><ul><li><strong>如果没有登录(没有 access_token)或者登录已过期，访问任何路由都会被路由到<code>/login</code>。</strong></li><li><strong>如果已经登录，但是再访问登录页面，会被路由到<code>/</code>首页</strong></li><li><strong>如果已经登录，但是访问了一个你无访问的页面,如<code>/protected</code>，则会被路由到<code>/unauthorized</code>页面</strong></li></ul><h2 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h2><p>按钮级别的权限，根据当前用户角色的不同，可以看到的按钮和操作不同。这里我只简单实现了一个<code>AuthButton</code></p><p><code>src/coponents/auth-button/index.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> ButtonProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useAppSelector <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../hooks/typedHooks"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">AuthButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">ButtonProps</span> <span class="token punctuation">&#123;</span>  roles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> AuthButton<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>AuthButtonProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> roles<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>roles<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AuthButton<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法如下，新增了一个<code>roles</code>属性，表示哪些角色可以看见该按钮</p><p><code>src/pages/foo/auth-button.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> ButtonPermission<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Button Permission</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">编辑</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">删除</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ButtonPermission<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以手动的修改<code>Login.slice.ts</code>中的<code>role</code>来查看不同的情况。</p><p>这种实现方式比较简单，大伙可以根据自己的具体场景选择更好的方案</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.hyhblog.cn/2018/04/25/user_login_auth_terms/">认证、授权、鉴权和权限控制</a></li><li><a href="https://segmentfault.com/a/1190000020887109">https://segmentfault.com/a/1190000020887109</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pg_dump备份、恢复数据库</title>
      <link href="/2025/02/20/hou-duan/shu-ju-ku/postgres/shi-yong-pg-dump-bei-fen-hui-fu-shu-ju-ku/"/>
      <url>/2025/02/20/hou-duan/shu-ju-ku/postgres/shi-yong-pg-dump-bei-fen-hui-fu-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL-数据库备份与恢复操作"><a href="#PostgreSQL-数据库备份与恢复操作" class="headerlink" title="PostgreSQL 数据库备份与恢复操作"></a>PostgreSQL 数据库备份与恢复操作</h1><p>在使用 PostgreSQL 数据库时，<code>pg_dump</code> 是一个常用的工具，用于备份数据库的内容。备份和恢复数据库是数据库管理中的重要环节，可以确保数据的安全性和可恢复性。以下是关于如何使用 <code>pg_dump</code> 备份和恢复数据库的具体步骤。</p><h2 id="一、pg-dump-备份数据库"><a href="#一、pg-dump-备份数据库" class="headerlink" title="一、pg_dump 备份数据库"></a>一、pg_dump 备份数据库</h2><h3 id="1-打开命令行工具"><a href="#1-打开命令行工具" class="headerlink" title="1. 打开命令行工具"></a>1. 打开命令行工具</h3><p>按照 mac 为例，如果你没将 postgre 相关的命令行加到环境变量中，那么你需要找到 postgre 的安装位置。比如我没有通过 homebrew 安装，我的安装位置在<code>/Library/PostgreSQL/15</code>。然后<code>cd /bin</code>。</p><h3 id="2-执行-pg-dump-命令"><a href="#2-执行-pg-dump-命令" class="headerlink" title="2. 执行 pg_dump 命令"></a>2. 执行 <code>pg_dump</code> 命令</h3><p>在命令行中，使用 <code>pg_dump</code> 命令来备份数据库。命令的基本格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./pg_dump <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> mall <span class="token operator">></span> ~/Desktop/sql/mall_backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>-U</code>：指定连接数据库的用户名。</p></li><li><p><code>-h</code>：指定数据库服务器的主机名（默认为 <code>localhost</code>）。</p></li><li><p><code>-p</code>：指定数据库服务器的端口号（默认为 <code>5432</code>）。</p></li><li><p><code>mall</code>：要备份的数据库的名称。</p></li><li><p><code>~/Desktop/sql/mall_backup.sql</code>：备份文件的名称和路径（默认为当前目录下的文件名，这里是自定义的目录）。</p></li></ul><h3 id="3-备份特定表"><a href="#3-备份特定表" class="headerlink" title="3.备份特定表"></a>3.备份特定表</h3><p>如果只需要备份特定的表或模式，可以使用 <code>-t</code>（表）或 <code>-n</code>（模式）选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./pg_dump <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-t</span> <span class="token function">users</span> mall <span class="token operator">></span> ~/Desktop/sql/users.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、恢复数据库"><a href="#二、恢复数据库" class="headerlink" title="二、恢复数据库"></a>二、恢复数据库</h2><h3 id="1-创建目标数据库（如果尚未存在）"><a href="#1-创建目标数据库（如果尚未存在）" class="headerlink" title="1. 创建目标数据库（如果尚未存在）"></a>1. 创建目标数据库（如果尚未存在）</h3><p>在恢复数据之前，需要确保目标数据库已经存在。如果还没有目标数据库，可以使用 <code>createdb</code> 命令或 <code>CREATE DATABASE</code> SQL 语句来创建它。</p><h4 id="示例：使用-createdb-创建目标数据库"><a href="#示例：使用-createdb-创建目标数据库" class="headerlink" title="示例：使用 createdb 创建目标数据库"></a>示例：使用 <code>createdb</code> 创建目标数据库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./createdb <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> mall_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-使用-psql-恢复数据库"><a href="#2-使用-psql-恢复数据库" class="headerlink" title="2. 使用 psql 恢复数据库"></a>2. 使用 <code>psql</code> 恢复数据库</h3><p>使用 <code>psql</code> 命令将备份的 SQL 文件导入到目标数据库中。命令的基本格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">psql <span class="token parameter variable">-U</span> 用户名 <span class="token parameter variable">-h</span> 主机名 <span class="token parameter variable">-p</span> 端口号 <span class="token parameter variable">-d</span> 目标数据库名 <span class="token operator">&lt;</span> 备份文件名.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-U</code>：指定连接数据库的用户名。</li><li><code>-h</code>：指定数据库服务器的主机名（默认为 <code>localhost</code>）。</li><li><code>-p</code>：指定数据库服务器的端口号（默认为 <code>5432</code>）。</li><li><code>-d</code>：指定要恢复数据的目标数据库名。</li><li><code>&lt; 备份文件名.sql</code>：指定备份文件的名称和路径。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> mall_test <span class="token operator">&lt;</span> ~/Desktop/sql/mall_backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-使用-psql-恢复特定表"><a href="#3-使用-psql-恢复特定表" class="headerlink" title="3. 使用 psql 恢复特定表"></a>3. 使用 psql 恢复特定表</h3><p>如果备份文件是以自定义格式（<code>-Fc</code>）或目录格式（<code>-Fd</code>）创建的，则需要使用 <code>pg_restore</code> 命令来恢复数据。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-d</span> mall_test <span class="token operator">&lt;</span> ~/Desktop/sql/users.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgres </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万字好文！带你入门 redis</title>
      <link href="/2025/02/20/hou-duan/shu-ju-ku/redis/wan-zi-chang-wen-jie-xi-redis/"/>
      <url>/2025/02/20/hou-duan/shu-ju-ku/redis/wan-zi-chang-wen-jie-xi-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="请看原文"><a href="#请看原文" class="headerlink" title="请看原文"></a>请看原文</h1><p><a href="https://juejin.cn/post/7172001777493999630">点击查看原文</a></p><p>以下内容只用作记录</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Worker和Service Worker</title>
      <link href="/2023/09/18/wang-luo/webworker-he-serviceworker/"/>
      <url>/2023/09/18/wang-luo/webworker-he-serviceworker/</url>
      
        <content type="html"><![CDATA[<h1 id="WebWorker-介绍"><a href="#WebWorker-介绍" class="headerlink" title="WebWorker 介绍"></a>WebWorker 介绍</h1><h3 id="什么是-Web-Worker？"><a href="#什么是-Web-Worker？" class="headerlink" title="什么是 Web Worker？"></a>什么是 Web Worker？</h3><p>为 JS 创造多线程的环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。也就是主线程和 worker 线程并行。等到 Worker 线程完成计算的任务，再通过 postMessage 与主线程进行通信。</p><h3 id="为什么需要-Web-Worker？"><a href="#为什么需要-Web-Worker？" class="headerlink" title="为什么需要 Web Worker？"></a>为什么需要 Web Worker？</h3><p>随着电脑计算能力的加强。js 原有的单线程模型，无法很好的发挥这些计算能力。而 web worker 就是为了发挥更好的计算能力。这样，他能将一些计算密集或者高延时的任务，放在 Worker 线程中执行。主线程负责 UI 的交互，这样不会被阻塞。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>同源限制： 分配给 Worker 线程运行的脚本文件，需要和主线程的脚本同源</li><li>DOM 限制： Worker 线程所在的环境的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用 document、window、parent 这些对象。但是，Worker 线程可以 navigator 对象和 location 对象。</li><li>通信： Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>脚本限制： worker 线程不能执行 alert、confirm 方法，但是可以使用 XMLHttpRequest 对象发出 ajax 请求</li><li>文件限制： 无法读取本地文件</li></ol><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><p>在写之前，我们需要确保 worker 线程的脚本文件和主线程的脚本文件是同源的。所以我们可以通过 node 来作为 web server。日常开发中可以使用 webpack 的<a href="https://www.webpackjs.com/loaders/worker-loader/">worker-loader</a></p><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">dotfiles</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>  <span class="token literal-property property">etag</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"htm"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token string">"1d"</span><span class="token punctuation">,</span>  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token function-variable function">setHeaders</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> stat</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"x-timestamp"</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"statics"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span> <span class="token string">"templates"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"view engine"</span><span class="token punctuation">,</span> <span class="token string">"ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">"ejs"</span><span class="token punctuation">,</span> ejs<span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义模板引擎</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/worker"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"worker.ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务已开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们在同级目录中添加<code>templates</code>和<code>statics</code>目录。</p><p>然后再 templates 目录中增加 <code>worker.ejs</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Web worker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"/worker.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 向worker发送信息</span>    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 监听worker发送的信息</span>    worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"received message from service "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再在 statics 目录中添加<code>worker.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 监听 message</span><span class="token comment">// self 代表子线程，即子线程的全局对象，等同于this</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">"message"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"received message from chrome"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"hihi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>node index.js</code>，然后在浏览器中访问<code>http://localhost/worker</code>，你就会发现 console 面板中会输出如下:</p><ol><li>received message from chrome Hello World</li><li>间隔 1 秒左右，再输出 received message from service hihi</li></ol><h1 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h1><h3 id="什么是-service-worker-呢？"><a href="#什么是-service-worker-呢？" class="headerlink" title="什么是 service worker 呢？"></a>什么是 service worker 呢？</h3><p>service worker 相当于一个在浏览器和服务器之间的中间人。如果网站注册了 service worker，那么它可以拦截当前网站的所有请求，进行判断。如果需要向服务器发起请求的就转给服务器，如果可以直接使用缓存的就直接返回缓存不再转给服务器。从而大大提高浏览体验</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP原理</title>
      <link href="/2023/09/18/wang-luo/tcp/"/>
      <url>/2023/09/18/wang-luo/tcp/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-的三次握手四次挥手"><a href="#TCP-的三次握手四次挥手" class="headerlink" title="TCP 的三次握手四次挥手"></a>TCP 的三次握手四次挥手</h2><h3 id="三次握手的过程如下："><a href="#三次握手的过程如下：" class="headerlink" title="三次握手的过程如下："></a>三次握手的过程如下：</h3><ol><li>客户端向服务器发送 SYN 包，表示请求连接。</li><li>服务器收到 SYN 包后，向客户端发送 SYN+ACK 包，表示确认请求，并准备好接受数据。</li><li>客户端收到 SYN+ACK 包后，向服务器发送 ACK 包，表示确认连接已建立。</li></ol><h3 id="四次挥手的过程如下："><a href="#四次挥手的过程如下：" class="headerlink" title="四次挥手的过程如下："></a>四次挥手的过程如下：</h3><ol><li>客户端向服务器发送 FIN 包，表示要关闭连接。</li><li>服务器收到 FIN 包后，向客户端发送 ACK 包，表示确认收到 FIN 包。</li><li>服务器向客户端发送 FIN 包，表示准备好关闭连接。</li><li>客户端收到 FIN 包后，向服务器发送 ACK 包，表示确认收到 FIN 包，并关闭连接。</li></ol><p>三次握手的目的是为了确保客户端和服务器都已准备好发送和接收数据，并且双方的序列号和确认号都已同步。四次挥手的目的是为了确保数据传输完毕后安全地关闭连接，避免数据的丢失和不完整。</p><p>需要注意的是，在 TCP 协议中，连接是双向的，因此每个方向的关闭都需要经过一次挥手过程。所以总共需要四次挥手。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/2023/09/18/wang-luo/websocket/"/>
      <url>/2023/09/18/wang-luo/websocket/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-websocket？"><a href="#什么是-websocket？" class="headerlink" title="什么是 websocket？"></a>什么是 websocket？</h3><p>websocket 是一种网络传输协议，它和 http 一样，都位于 OSI 模型的应用层。且都依赖于 TCP 协议。但是他的协议是 ws 或 wss。</p><h3 id="功能？"><a href="#功能？" class="headerlink" title="功能？"></a>功能？</h3><p>websocket 协议支持浏览器于 web 服务器之间的<strong>双向通信</strong>。</p><p>在 websocket 协议出现之前，网站中都是通过<strong>长轮询</strong> 或者 <strong>长连接</strong> 之类的来实现 <strong>Comet</strong>这种 web 推送，使得服务器能够主动的、实时的将消息推送给客户端。</p><p><strong>长轮询</strong></p><p>在 http 中，每一个 request 对应一个 response。response 是被动的，服务器是无法主动向客户端推送信息。但是在一些实时性较高的需求中，这是无法满足需求的。因此，可以每隔一段时间就主动的向服务请求，以获取最新的数据。这个保持连接的过程就是长轮询。</p><p>通常，我们可以这样实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://someapi/test"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">myJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myJson<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>loadData<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>long poll 其实原理跟 ajax 轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直保持连接），也就是说，客户端发起连接后，如果没消息，就一直不返回 Response 给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始</p><p>在页面里嵌入一个隐蔵 iframe，将这个隐蔵 iframe 的 src 属性设为对一个长连接的请求或是采用 xhr 请求，服务器端就能源源不断地往客户端输入数据。<br>优点：消息即时到达，不发无用请求；管理起来也相对方便。<br>缺点：服务器维护一个长连接会增加开销。</p><h3 id="为什么需要使用-websocket"><a href="#为什么需要使用-websocket" class="headerlink" title="为什么需要使用 websocket"></a>为什么需要使用 websocket</h3><p>从上面的例子来看都非常的消耗资源，且都有一个特点，也就是 http 协议的特点：<strong>被动性</strong>；</p><p>长轮询： 它的主要逻辑都是不断的在建立 http 连接，然后等待服务器处理<br>长连接（long poll）： 需要有很高的并发。所以 ajax 轮询 和 long poll 都有可能发生这种情况。</p><p>而 websocket，当服务器建立 websocket 协议时，只需要经历一次 HTTP 请求，就可以做到远远不断的信息传送，也就是在有信息的情况下才会主动的通知，而不是像 http 一样，每次都是需要客户端来询问(发起请求)。</p><p>这样，就解决的以上的消息延时的问题以及非常消耗资源的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cookie详解</title>
      <link href="/2023/09/04/wang-luo/cookie/"/>
      <url>/2023/09/04/wang-luo/cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie-相关知识"><a href="#Cookie-相关知识" class="headerlink" title="Cookie 相关知识"></a>Cookie 相关知识</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/157">github</a></li><li><a href="https://segmentfault.com/a/1190000038824618#item-2-3">掘金</a></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="主域名可以访问子域名的-cookie-吗？"><a href="#主域名可以访问子域名的-cookie-吗？" class="headerlink" title="主域名可以访问子域名的 cookie 吗？"></a>主域名可以访问子域名的 cookie 吗？</h3><p>在浏览器中，主域名是无法直接访问子域名的 cookie 的，这是由<strong>同源策略</strong>所限制的。<strong>同源策略</strong>要求两个页面只有在<strong>协议</strong>、<strong>主机</strong>和<strong>端口号</strong>都相同的情况下，才能互相访问对方的数据，这样可以保护用户的隐私安全。</p><p>例如，在主域名为  <code>example.com</code>  的情况下，子域名  <code>www.example.com</code>  和  <code>api.example.com</code>  的 cookie 不能相互访问。</p><p>然而，由于<strong>同源策略</strong>允许设置文档的域名（<code>document.domain</code>），通过设置该属性可以使主域名允许访问子域名的 cookie。具体实现方法如下：</p><ol><li>在所有需要进行 cookie 共享的页面中设置：</li></ol><pre class="line-numbers language-none"><code class="language-none">document.domain &#x3D; &quot;example.com&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就使得所有子域名和主域名的  <code>document.domain</code>  都相同，从而实现了跨域共享 cookie。</p><ol start="2"><li>在任意一个子域名中创建一个 cookie，例如：</li></ol><pre class="line-numbers language-none"><code class="language-none">document.cookie &#x3D; &quot;mycookie&#x3D;myvalue; domain&#x3D;example.com; expires&#x3D;Fri, 31 Jul 2022 23:59:59 GMT; path&#x3D;&#x2F;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面的代码中，使用了  <code>domain</code>  参数来指定 cookie 的父域名为  <code>example.com</code>。</p><ol start="3"><li>在其他子域名的页面中可以读取这个 cookie，并进行相关操作，例如：</li></ol><pre class="line-numbers language-none"><code class="language-none">console.log(document.cookie); &#x2F;&#x2F; 输出：&quot;mycookie&#x3D;myvalue&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，通过设置  <code>document.domain</code>  属性来实现 cookie 共享需要满足以下条件：</p><ul><li>主域名和子域名的  <code>document.domain</code>  值必须相同；</li><li>主域名和子域名的<strong>协议</strong>、<strong>端口号</strong>必须相同；</li><li>当前页面的域名必须是完整的（含有顶级域名）。</li></ul><p>如果不满足以上条件的话，将无法完成 cookie 共享。</p><h3 id="子域名是否可以访问主域名的-cookie？"><a href="#子域名是否可以访问主域名的-cookie？" class="headerlink" title="子域名是否可以访问主域名的 cookie？"></a>子域名是否可以访问主域名的 cookie？</h3><p>子域名可以访问父域名下的 cookie，因为在同一个主域名下，子域名和父域名共享同一个 cookie 存储机制。也就是说，当在  <code>example.com</code>  域名下创建一个 cookie 时，其子域名  <code>www.example.com</code>  和  <code>api.example.com</code>  也能够通过 JavaScript 对其进行读取或修改，只要这些子域名没有设置自己的 cookie。</p><p>这是因为在同一个主域名下，所有的子域名都属于同一个域，浏览器会默认将 cookie 的域名设置为主域名，未指定的子域名会自动与主域名进行共享。例如，在主域名  <code>example.com</code>  中设置了一个名为  <code>mycookie</code>  的 cookie：</p><pre class="line-numbers language-none"><code class="language-none">document.cookie &#x3D; &quot;mycookie&#x3D;test; domain&#x3D;example.com&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么在  <code>www.example.com</code>  和  <code>api.example.com</code>  下直接访问时，都可以通过 JavaScript 读取到该 cookie：</p><pre class="line-numbers language-none"><code class="language-none">console.log(document.cookie);  &#x2F;&#x2F; 输出：&quot;mycookie&#x3D;test&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，<strong>在不同主域名下的子域名之间是不能共享 cookie 的，因为主域名不同，它们的域也不同，不受同源策略限制</strong>。为了解决这个问题，可以使用<strong>跨域通信技术</strong>，如 CORS、JSONP、postMessage 等。</p><h3 id="cookie-与-web-安全"><a href="#cookie-与-web-安全" class="headerlink" title="cookie 与 web 安全"></a>cookie 与 web 安全</h3><h4 id="cookie-如何应对-XSS-漏洞"><a href="#cookie-如何应对-XSS-漏洞" class="headerlink" title="cookie 如何应对 XSS 漏洞"></a>cookie 如何应对 XSS 漏洞</h4><p>XSS 漏洞的原理是，由于未对用户提交的表单数据或者 url 参数等数据做处理就显示在了页面上，导致用户提交的内容在页面上被做为 html 解析执行。</p><p><strong>常规方案</strong>：对特殊字符进行处理，如”&lt;”和”&gt;”等进行转义。</p><p><strong>cookie 的应对方案</strong>：对于用户利用 script 脚本来采集 cookie 信息，我们可以将重要的 cookie 信息设置为 HttpOnly 来避免 cookie 被 js 采集。</p><h4 id="cookie-如何应对-CSRF-攻击"><a href="#cookie-如何应对-CSRF-攻击" class="headerlink" title="cookie 如何应对 CSRF 攻击"></a>cookie 如何应对 CSRF 攻击</h4><p>CSRF，中文名叫跨站请求伪造，原理是，用户登陆了 A 网站，然后因为某些原因访问了 B 网站（比如跳转等），B 网站直接发送一个 A 网站的请求进行一些危险操作，由于 A 网站处于登陆状态，就发生了 CSRF 攻击（核心就是利用了 cookie 信息可以被跨站携带）！</p><p><strong>常规方案</strong>：采用验证码或 token 等。</p><p><strong>cookie 的应对方案</strong>：由于 CSRF 攻击核心就是利用了 cookie 信息可以被跨站携带，那么我们可以对核心 cookie 的 SameSite 设置为 Strict 或 Lax 来避免。</p><h3 id="cookie、sessionStorage、localStorage-的区别"><a href="#cookie、sessionStorage、localStorage-的区别" class="headerlink" title="cookie、sessionStorage、localStorage 的区别"></a>cookie、sessionStorage、localStorage 的区别</h3><table><thead><tr><th>列头</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr></thead><tbody><tr><td>请求方式</td><td>cookie 始终在同源的 http 请求中被携带</td><td>请求中不主动携带</td><td>请求中不主动携带</td></tr><tr><td>数据大小</td><td>4K(4 * 1024 Byte)</td><td>5M(5 _ 1024 _ 1024)</td><td>5M</td></tr><tr><td>数据有效期</td><td>只在设置 cookie 过期时间之前有效</td><td>仅在当前浏览器窗口关闭前有效</td><td>永久存储</td></tr><tr><td>作用域</td><td>所有同源窗口中共享</td><td>所有同源窗口中共享</td><td>不在不同的浏览器窗口中共享，即使是同一个页面</td></tr></tbody></table><h3 id="哪些信息适合放到-cookie-中"><a href="#哪些信息适合放到-cookie-中" class="headerlink" title="哪些信息适合放到 cookie 中"></a>哪些信息适合放到 cookie 中</h3><p>cookie 的增多无疑会<strong>加重网络请求的开销</strong>，而且每次请求都会将 cookie 完整的带上，因此对于那些“每次请求都必须要携带的信息（如<code>身份信息</code>、<code>A/B分桶信息</code>等）”，才适合放进 cookie 中，其他类型的数据建议放进 localStorage 中。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS总结</title>
      <link href="/2023/09/04/wang-luo/https-yuan-li/"/>
      <url>/2023/09/04/wang-luo/https-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>https 采用对称加密和非对称加密+数字证书的方式，对传输数据进行加密</p><p><strong>对称加密方式如下</strong></p><ol><li>客户端发送加密套件列表（就是客户端支持的加密方式）+ client-random</li><li>服务器从加密套件中选择一个加密方式，并生成 service-random + 新的加密套件返回给客户端</li><li>最后浏览器和服务器分别返回确认消息</li></ol><p>这样浏览器和服务器都有相同 client-random 和 service-random，然后再使用相同的方法混合起来生成一个 master-secret。<br>有了 master-secret 和加密套件后，双方就可以进行数据的加密传输了。</p><p>但是由于 client-random 和 service-random 是明文的。意味着中间人也可以拿到加密套件和双方随机数。由于利用随机数合成密钥的算法是公开的，所以中间人拿到随机数后，也可以合成密钥，然后破解数据</p><p><strong>非对称加密</strong></p><ol><li>首先浏览器会发送加密套件列表给服务器</li><li>服务器会选择一个加密方式，和对称加密不同的是，使用非对称加密时，服务器上需要有用于浏览器加密的公钥和服务器解密的私钥。由于公钥是给浏览器加密用的，因此服务器会将加密套件和公钥一起发送给浏览器。</li></ol><p>这样在浏览器向服务器发送数据时，就可以使用公钥来加密数据。由于公钥加密只有私钥才能解密，所以即使黑客截获了数据和公钥，他也无法获取数据。</p><p>但是有以下的缺点</p><ul><li>非对称加密效率太低。严重影响到解密数据的数据，进而影响到用户打开页面的速度。</li><li>无法保证服务器发送给浏览器的数据安全。虽然浏览器端可以使用公钥来加密，但是服务器只能私钥加密。因此，当服务器发送数据和公钥的时候，中间人也是可以获取到公钥和私钥加密的数据的。这样就无法保证服务器端发送的数据安全。</li></ul><p><strong>对称加密和非对称加密搭配使用</strong><br>相比较对称加密和非对称加密，采用两者相结合的方式则更加完美。<strong>使用对称加密来传输数据，使用非对称加密来传输对称加密的密钥</strong>。</p><div align="center">   <img src="https://i.postimg.cc/65KrmVY3/https.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/65KrmVY3/https.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="图片名称" align=center /></div><ol><li>首先浏览器端会发送 client-random、对称加密列表、非对称加密列表给服务器端</li><li>服务器端选择并发送对称加密方式、非对称加密方式、service-random 和公钥给浏览器端</li><li>然后浏览器会生成一个随机数 pre-master、然后通过非对称加密的方式。使用公钥加密 pre-master 给服务器端。（需要注意，pre-master 是通过非对加密的公钥加密的，所以黑客是无法获取到私钥来解密数据的。）</li><li>服务器端接收到使用公钥加密的 pre-master，然后使用私钥解密获取到 pre-master。（到此，浏览器端和服务器端都有了 client-random、service-random、pre-master）</li><li>使用 client-random、service-random、pre-master 生成的<strong>master secret</strong>加密传输数据。</li></ol><p><strong>添加数字证书</strong><br>虽然使用对称和非对称混合加密的方式，完美的实现了数据的加密传输。但是黑客可以通过 DNS 劫持将网站的 ip 换成自己的 ip。这样，对于用户来说，其实访问的就是黑客的服务器了。黑客就可以在自己的服务器上实现公钥和私钥。对于浏览器而言，它完全不知道现在在访问黑客的站点。</p><p>所以需要有个第三方的权威机构来向浏览器证明“服务器”就是服务器。比如，买了房子，需要证明这个房子是你的。那么这里的房管局就是一个<strong>第三方权威机构</strong>。而房产证就是<strong>证书</strong>。</p><p>同理，网站 A 要证明服务器就是网站 A 的，也需要一个权威机构来颁发证书。这个权威机构就是**CA(Certificate Authority)<strong>，颁发的证书就是</strong>数字证书（Digital Certificate)**。</p><p>对于浏览器来说，数字证书的作用就是：1、通过证书向浏览器证明身份。2、包含服务器的公钥。</p><p>所以，包含了数字证书的 https，与“对称与分对称结合”的方法相比，改变了如下两点：</p><ol><li>服务器不返回公钥，而是数字证书。</li><li>客户端会多一个数字证书检验的过程，检验完成后才继续下面的流程</li></ol><p>这样就算是黑客仿造了服务器，但是由于数字证书是无法仿造的。所以依然无法欺骗客户端（用户）</p><p><strong>申请数字证书</strong></p><ul><li>首先网站 A 需要准备一套私钥和公钥，私钥留着自己使用；</li><li>然后网站 A 向 CA 机构提交公钥、公司、站点等信息并等待认证，这个认证过程可能是收费的；</li><li>CA 通过线上、线下等多种渠道来验证网站 A 所提供信息的真实性，如公司是否存在、企业是否合法、域名是否归属该企业等；</li><li>如信息审核通过，CA 会向网站 A 签发认证的数字证书，包含了网站 A 的公钥、组织信息、CA 的信息、有效时间、证书序列号等，这些信息都是明文的，同时包含一个 CA 生成的签名。</li></ul><p>最后一步的数字签名的步骤：Hash 函数计算网站提供的明文信息，得出信息摘要 -&gt; CA 使用密钥加密信息摘要，密文就是 CA 颁发给网站的数字签名</p><p>这就相当于房管局在房产证上盖的章，这个章是可以去验证的，同样我们也可以通过数字签名来验证是否是该 CA 颁发的。</p><p><strong>浏览器如何验证数字证书</strong><br>有了 CA 签名过的数字证书后，当浏览器向服务器发出请求时，服务器会返回数字证书给浏览器。</p><p>浏览器接收到数字证书后，会进行验证。</p><ol><li>首先浏览器读取证书的明文信息，采用 CA 签名是相同的 Hash 函数计算并得到<strong>信息摘要 A</strong></li><li>利用 CA 的公钥解密签名数据，得到<strong>信息摘要 B</strong>； 如果 <code>A === B</code>,则证书合法，服务器是网站 A 的</li></ol><p>如果该 CA 比较小众，浏览器不知道该不该信任，则浏览器继续查找给当前 CA 颁发证书的 CA，然后再以同样的方式验证他的上级 CA。通常情况下，操作系统中会内置信任的顶级 CA 的证书信息（包含公钥），如果这个 CA 链中没有找到浏览器内置的顶级 CA，证书也会被判定非法。</p><p>在申请和使用证书的过程中，还需要注意以下三点：</p><ol><li>申请数字证书是不需要提供私钥的，要确保私钥永远只能由服务器掌握；</li><li>数字证书最核心的是 CA 使用它的私钥生成的数字签名；</li><li>内置 CA 对应的证书称为根证书，根证书是最权威的机构，它们自己为自己签名，我们把这称为自签名证书。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/100033601">https://time.geekbang.org/column/intro/100033601</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP的发展以及个版本对比</title>
      <link href="/2023/09/04/wang-luo/http-fa-zhan-yi-ji-ban-ben-dui-bi/"/>
      <url>/2023/09/04/wang-luo/http-fa-zhan-yi-ji-ban-ben-dui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="http-0-9-http-1-0-http-1-1-的发展"><a href="#http-0-9-http-1-0-http-1-1-的发展" class="headerlink" title="http&#x2F;0.9 http&#x2F;1.0 http&#x2F;1.1 的发展"></a>http&#x2F;0.9 http&#x2F;1.0 http&#x2F;1.1 的发展</h2><h3 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http&#x2F;0.9"></a>http&#x2F;0.9</h3><ul><li><p>http&#x2F;0.9 是 1991 年提出的，该版本的只有 get 请求，被用来传输 html 超文本内容，如 <code>GET /index.html</code>所以又被称为<strong>超文本传输协议</strong>。</p></li><li><p>http&#x2F;0.9 没有<strong>http 请求头和请求体</strong>，同时服务器也没有返回头信息，只返回数据。</p></li><li><p>因为返回的都是 HTML 格式的文件，所以是使用 ASCII 字符码来传输的</p></li></ul><h3 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http&#x2F;1.0"></a>http&#x2F;1.0</h3><ul><li><p>http&#x2F;1.0 不单单是支持 HTML 文件的传输，还包含了 js、css、图片、音频、视频等不同类型的的文件。也就是支持了多种类型的文件传输。</p></li><li><p>同时 http&#x2F;1.0 引入了请求头和响应头，它们以<code>key-value</code>的形式保存。</p></li><li><p>引入了<strong>状态码</strong>，告知浏览器有的请求服务器无法处理。</p></li><li><p>http&#x2F;1.0 加入了缓存机制，使用的是 <code>Pragma:no-cache</code> + <code>Last-Modified/If-Modified-Since</code>来作为缓存判断的标准；</p></li><li><p>增加了用户代理字段，用来统计不同客户端信息</p></li></ul><p><strong>http&#x2F;1.0 的缺点：</strong></p><p>每次进行一次 http 通信，都需要经历一次完整的 TCP 连接、传输 http 数据、断开 TCP 连接三个阶段。由于在过去的页面中，通信的文件比较小，所以这种方式没有什么影响，但是由于 web 的发展，页面中可能包含几百个外部资源文件。这时候每次请求都再经历一次完整的 TCP 通道建立过程会增加很多的开销。</p><p>如下:</p><div align="center">   <img src="https://i.postimg.cc/vmTLvQXt/http1-0.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/vmTLvQXt/http1-0.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div><h3 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http&#x2F;1.1"></a>http&#x2F;1.1</h3><p><img src="https://i.postimg.cc/0NRH2hmG/http1-1.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/0NRH2hmG/http1-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="http1-1.png"></p><ul><li>http&#x2F;1.1 最大的变化就是引入了持久连接，在 HTTP&#x2F;1.1 中默认开启 Connection: keep-alive，即 TCP 连接默认不关闭(只要浏览器或者服务器没有明确断开连接)，可以被多个请求复用。如下<div align="center"> <img src="https://i.postimg.cc/RZXLf310/http1-1.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/RZXLf310/http1-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div></li></ul><p>但是，这个方案并不完美，持久连接虽然能减少 TCP 的建立和断开次数，但是它需要等待前面的请求返回之后，才能进行下一次请求。如果某个请求因为某些原因未能及时响应，则就会出现<strong>队头阻塞</strong>。http&#x2F;1.1 试图通过<strong>管线化</strong>来解决队头阻塞。但是<strong>管线化</strong>只能是批量发送请求，但是<strong>服务器还是需要根据请求顺序来响应</strong>。由于存在各种问题，现在的主流浏览器基本都是默认关闭管线化。并且，使用条件比较苛刻，只有 GET、HEAD、PUT 和 DELETE 可以进行管线化， POST 则有限制。<strong>现阶段，浏览器厂商采用了另一种做法。它允许我们打开多个 TCP 会话，比如，我们常在浏览器中看到很多的并行请求，这是因为浏览器对同域名下并行下载 6~8 个资源的限制</strong>。</p><ul><li><p>HTTP&#x2F;1.1 引入了更多的缓存控制策略：<code>Cache-Control</code>、<code>Etag/If-None-Match</code>等</p></li><li><p>在 HTTP&#x2F;1.0 中，每个域名绑定了一个唯一的 IP 地址，因此一个服务器只能支持一个域名。但是随着虚拟主机技术的发展，需要实现在一台物理主机上绑定多个虚拟主机，每个虚拟主机都有自己的单独的域名，这些单独的域名都公用同一个 IP 地址。因此，HTTP&#x2F;1.1 的请求头中增加了 Host 字段，用来表示当前的域名地址，这样服务器就可以根据不同的 Host 值做不同的处理。</p></li></ul><h3 id="http-1-1-的主要问题"><a href="#http-1-1-的主要问题" class="headerlink" title="http&#x2F;1.1 的主要问题"></a>http&#x2F;1.1 的主要问题</h3><p><strong>对带宽的利用率却并不理想</strong>，<strong>带宽是指每秒最大能发送或者接收的字节数</strong>。我们把每秒能发送的最大字节数称为<strong>上行带宽</strong>，每秒能够接收的最大字节数称为<strong>下行带宽</strong>。</p><p>因为 http&#x2F;1.1 很难将带宽利用满。比如我们常说的 100M 带宽，实际的下载速度能达到 12.5M&#x2F;S，而采用 HTTP&#x2F;1.1 时，也许在加载页面资源时最大只能使用到 2.5M&#x2F;S。</p><p>造成这样的原因有</p><ol><li><strong>TCP 慢启动</strong><br>一旦一个 TCP 连接建立之后，就进入了发送数据状态，刚开始 TCP 协议会采用一个非常慢的速度去发送数据，然后慢慢加快发送数据的速度，直到发送数据的速度达到一个理想状态。</li></ol><p>慢启动是 TCP 为了减少网络拥塞的一种策略，我们是没有办法改变的。</p><p>之所以说慢启动会带来性能问题，是因为页面中常用的一些关键资源文件本来就不大，如 HTML 文件、CSS 文件和 JavaScript 文件，通常这些文件在 TCP 连接建立好之后就要发起请求的，但这个过程是慢启动，所以耗费的时间比正常的时间要多很多，这样就推迟了宝贵的首次渲染页面的时长了。</p><ol start="2"><li><strong>同时开启了多条 TCP 连接(浏览器厂商对同一域名下最多能创建 6~8 个 TCP 连接，根据不同厂商，支持数量不同)，那么这些连接会竞争固定的带宽。</strong><br>你可以想象一下，系统同时建立了多条 TCP 连接，当带宽充足时，每条连接发送或者接收速度会慢慢向上增加；而一旦带宽不足时，这些 TCP 连接又会减慢发送或者接收的速度。比如一个页面有 200 个文件，使用了 3 个 CDN，那么加载该网页的时候就需要建立 6 * 3，也就是 18 个 TCP 连接来下载资源；在下载过程中，当发现带宽不足的时候，各个 TCP 连接就需要动态减慢接收数据的速度。</li></ol><p>这样就会出现一个问题，因为有的 TCP 连接下载的是一些关键资源，如 CSS 文件、JavaScript 文件等，而有的 TCP 连接下载的是图片、视频等普通的资源文件，但是多条 TCP 连接之间又不能协商让哪些关键资源优先下载，这样就有可能影响那些关键资源的下载速度了。</p><ol start="3"><li><strong>队头阻塞问题</strong></li></ol><p>虽然我们可以通过持久连接来复用 TCP 管道，但是，同一个管道，同一时刻只能处理一个请求。其他请求只能处于阻塞状态。假设一个请求被阻塞了 5 秒，那么后续的请求都需要延迟 5 秒，这个过程中，带宽、CPU 都被浪费了。</p><h2 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http&#x2F;2.0"></a>http&#x2F;2.0</h2><p><img src="https://i.postimg.cc/FzwHB0Cx/http2-0.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/FzwHB0Cx/http2-0.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="http-2.0"></p><h3 id="1-多路复用"><a href="#1-多路复用" class="headerlink" title="1. 多路复用"></a>1. <strong>多路复用</strong></h3><p>HTTP&#x2F;2 支持发起并行请求，即在一个连接里，客户端和浏览器都可以同时发送多个请求和响应，而不用按照顺序一一对应，这样避免了<strong>队头阻塞</strong>。</p><p>帧是 http&#x2F;2.0 的最小通信单位，每个帧包含帧头部，也会标识出当前帧所属的流（stream id）。</p><p>比如，每个请求是一个数据流（stream），不同颜色代表不同的 stream id，而当中的 header， body 会被切割为多个 frame，并且标号。然后，http&#x2F;2.0 再根据 streamid 和每一帧的标号来恢复数据。这样，就实现了在一个 tcp 连接中的流式传输，多个 request 都会复用这个 TCP 通道</p><div align="center">   <img src="https://i.postimg.cc/dQy6XVFW/http2-0.jpg" class="lazyload placeholder" data-srcset="https://i.postimg.cc/dQy6XVFW/http2-0.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div>实现：<ul><li>首先，浏览器准备好请求数据，包括了请求行、请求头等信息，如果是 POST 方法，那么还要有请求体。</li><li>这些数据经过二进制分帧层处理之后，会被转换为一个个带有请求 ID 编号的帧，通过协议栈将这些帧发送给服务器。</li><li>服务器接收到所有帧之后，会将所有相同 ID 的帧合并为一条完整的请求信息。</li><li>然后服务器处理该条请求，并将处理的响应行、响应头和响应体分别发送至二进制分帧层。</li><li>同样，二进制分帧层会将这些响应数据转换为一个个带有请求 ID 编号的帧，经过协议栈发送给浏览器。</li><li>浏览器接收到响应帧之后，会根据 ID 编号将帧的数据提交给对应的请求。</li></ul><h3 id="2-服务端推送"><a href="#2-服务端推送" class="headerlink" title="2. 服务端推送"></a>2. <strong>服务端推送</strong></h3><p>HTTP&#x2F;2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析 HTML 源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p><h3 id="3-首部压缩"><a href="#3-首部压缩" class="headerlink" title="3. 首部压缩"></a>3. <strong>首部压缩</strong></h3><p>HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP&#x2F;2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息压缩后再发送（SPDY 使用的是通用的 DEFLATE 算法，而 HTTP&#x2F;2 则使用了专门为首部压缩而设计的 HPACK 算法）。；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了</p><h3 id="4-设置请求优先级"><a href="#4-设置请求优先级" class="headerlink" title="4. 设置请求优先级"></a>4. <strong>设置请求优先级</strong></h3><p>多路复用可能导致关键请求被阻塞，可以在发送请求时，标上该请求的优先级，这样服务器接收到请求之后，会优先处理优先级高的请求。</p><h2 id="HTTP3-0"><a href="#HTTP3-0" class="headerlink" title="HTTP3.0"></a>HTTP3.0</h2><p>具体可以看以下文章<br><a href="https://blog.csdn.net/wolfGuiDao/article/details/108729560">https://blog.csdn.net/wolfGuiDao/article/details/108729560</a><br><a href="https://mp.weixin.qq.com/s/iF0wbV5o7HVjGG_Cb-RcOg">https://mp.weixin.qq.com/s/iF0wbV5o7HVjGG_Cb-RcOg</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在 http&#x2F;0.9 中，因为场景简单，所以只支持了 GET 请求，且无请求头和响应头</li><li>http&#x2F;1.0 中增加了响应头，支持了多种资源类型，并引入了缓存机制。但是，它的缺点是每次请求一个 http 连接，都需要建立和断开 TCP 连接。</li><li>http&#x2F;1.1 做了如下优化<ul><li>增加持久连接</li><li>浏览器为每个域名最多同时维护 6 个 TCP 持久连接</li><li>使用 CDN 实现域名分片机制</li></ul></li><li>但是 http&#x2F;1.1 的对头阻塞问题，导致了后续请求的延迟，以及对带宽利用不充分。</li><li>http2.0 增加二进制分帧、多路复用、头部压缩、服务端推送</li><li>http3.0 基于 QUIC 协议 解决了 TCP 协议的一些无法解决的痛点<ul><li><strong>多次握手</strong>: TCP 协议需要三次握手建立连接，而如果需要 TLS 证书的交换，那么则需要更多次的握手才能建立可靠连接，这在如今长肥网络的趋势下是一个巨大的痛点</li><li><strong>队头阻塞</strong>：TCP 协议下，如果出现丢包，则一条连接将一直被阻塞等待该包的重传，即使后来的数据包可以被缓存，但也无法被递交给应用层去处理。</li><li><strong>无法判断一个 ACK 是重传包的 ACK 还是原本包的 ACK</strong>：比如 一个包 seq&#x3D;1, 超时重传的包同样是 seq&#x3D;1，这样在收到一个 ack&#x3D;1 之后，我们无法判断这个 ack 是对之前的包的 ack 还是对重传包的 ack，这会导致我们对 RTT 的估计出现误差，无法提供更准确的拥塞控制</li><li><strong>无法进行连接迁移</strong>：一条连接由一个四元组标识，在当今移动互联网的时代，如果一台手机从一个 wifi 环境切换到另一个 wifi 环境，ip 发生变化，那么连接必须重新建立，inflight 的包全部丢失。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图解dns域名解析</title>
      <link href="/2023/09/04/wang-luo/tu-jie-dns-yu-ming-jie-xi/"/>
      <url>/2023/09/04/wang-luo/tu-jie-dns-yu-ming-jie-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://juejin.cn/user/588993961408685/posts">我的掘金</a></p></blockquote><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>拿我们常用的 <code>www.baidu.com</code>举例，它并不是完整的域名，完整的域名还需要加上一个<code>www.baidu.com.</code>(注意最后有一个<code>.</code>)。</p><p>这个<code>.</code>号就表示<code>根域名</code>，只不过在实际使用中为了方便省略了。</p><p>根域名的下一级是<code>顶级域名</code>，这里的<code>.com</code>就是<code>顶级域名</code>(常有的<code>顶级域名</code>还有<code>.cn</code>、<code>.net</code>等) 。</p><p>再往下就是<code>权威域名(二级域名)</code>，这里的<code>.baidu.com</code>就是<code>权威域名</code>，是用户自己可注册的域名。</p><h2 id="DNS-概念"><a href="#DNS-概念" class="headerlink" title="DNS 概念"></a>DNS 概念</h2><p><code>DNS</code>即 <code>domain name system</code>域名系统的缩写，将域名和 ip 的映射关系保存在一个 <code>分布式数据库</code> 中</p><h2 id="图解-DNS-域名解析"><a href="#图解-DNS-域名解析" class="headerlink" title="图解 DNS 域名解析"></a>图解 DNS 域名解析</h2><p>当用户输入一个域名时，就会按照如下数字顺序<code>迭代查询</code>。如果本地缓存中没有缓存域名对应 ip 的解析,则会从根域名开始查找，一直迭代到二级域名服务器，最后返回域名对应的 ip</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e65ea5eb4fc4477d826b26b4630367d4~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e65ea5eb4fc4477d826b26b4630367d4~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="dns.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图解正反向代理</title>
      <link href="/2023/09/04/wang-luo/tu-jie-zheng-fan-xiang-dai-li/"/>
      <url>/2023/09/04/wang-luo/tu-jie-zheng-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://juejin.cn/user/588993961408685/posts">我的掘金</a></p></blockquote><p>我看到网上有很多关于正向代理和反向代理的解释，不过大多都是文字描述，很少有画图的。不妨通过下面的图片来了解一下。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>这个在生活中比较常见了，我们举个例子：最近某某地方需要修一段路，你很想接下这个工程。你知道需要去哪个地方才能接，可人家不认识你，不放心，要熟人介绍。这时你就需要通过<code>中间人</code>来牵线，那我们就找到<code>中间人</code>小刚来和工程方对接。同时，工程方并不需要知道你是谁，他们认识小刚，知道小刚很靠谱，那介绍的人也肯定靠谱，这个工程就 o 了</p><p>再比如，我们作为程序员，有些时候查资料避免不了 fq。我们不能直接访问<code>目标服务器</code>，因为一些原因，它受限了。<br>所以，我们需要一个<code>代理服务器(梯子)</code>。这个服务器可以访问<code>目标服务器</code>，而我们又可以访问这个<code>代理服务器</code>。那不就正如下图一样吗？</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66efa7794707481887e53e2fa9e6d4f4~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66efa7794707481887e53e2fa9e6d4f4~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="正向代理.png"></p><h2 id="正向代理用途"><a href="#正向代理用途" class="headerlink" title="正向代理用途"></a>正向代理用途</h2><h3 id="突破访问限制"><a href="#突破访问限制" class="headerlink" title="突破访问限制"></a>突破访问限制</h3><p>就像上图一样，通过代理服务器，可以突破 IP 访问限制，访问外网。</p><h3 id="加速网络"><a href="#加速网络" class="headerlink" title="加速网络"></a>加速网络</h3><p>如果你和代理服务器在一个局域网，那么代理服务器的访问速度要比你直接访问快，从而加速网络</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>假如你是亿万富翁，你现在急需要用 1000 万，你去了经常去的一个银行取钱，可没有预约，这个银行没那么多钱。所以它要向其他行汇报，然后筹钱。不过这对于你来说是不可见的也无需关心的，我才不管你从哪里调钱过来，我只管拿钱就行了。</p><p>放在网络中就是，我们大家去 x 宝买东西，可是同时搜索商品的人太多了，那 x 宝一个服务器也撑不住啊。所以 x 宝又往上堆机器，将大流量分摊到各个机器上，防止服务器崩溃，流失用户。</p><p>以上的例子正如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed509fa79c6743228e61af1b10867143~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed509fa79c6743228e61af1b10867143~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="反向代理.png"></p><h2 id="反向代理用途"><a href="#反向代理用途" class="headerlink" title="反向代理用途"></a>反向代理用途</h2><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>根据入口服务器的流量，将客户端请求分发到不同的服务器上。</p><h3 id="隐藏服务器的真实-IP，提高安全保障"><a href="#隐藏服务器的真实-IP，提高安全保障" class="headerlink" title="隐藏服务器的真实 IP，提高安全保障"></a>隐藏服务器的真实 IP，提高安全保障</h3><p>除了上面的例子，还有一个特殊的反向代理服务器-&gt;<code>API GateWay（网关）</code>。在大型应用中会将应用服务拆分成多个，比如一个商城的后台服务可以拆分为<code>订单服务</code>，<code>商品服务</code>，<code>支付服务</code>等。这样，客户端调用就不是很方便，所以通过网关应用来统一访问<code>微服务</code>并做权限处理、流量拦截等。客户端只需要访问网关暴露的 api 即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong><code>正向代理</code>，其实是<code>代理服务器</code>代理了<code>客户端</code>，去和<code>目标服务器</code>交互</strong></li><li><strong><code>反向代理</code>，<code>代理服务器</code>代理的是<code>目标服务器</code>，去和<code>客户端</code>交互</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器相关知识</title>
      <link href="/2023/09/04/wang-luo/liu-lan-qi-xiang-guan-zhi-shi/"/>
      <url>/2023/09/04/wang-luo/liu-lan-qi-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的工作原理"><a href="#浏览器的工作原理" class="headerlink" title="浏览器的工作原理"></a>浏览器的工作原理</h2><p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/</a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li>css 外部资源的由独立的线程异步加载</li><li>css 会阻塞 DOM 渲染，不会阻塞解析。因为渲染依赖 css 样式，如果不阻塞，网页的样式会在渲染过程中变化，且可能会造成重绘和回流。</li></ol><h2 id="Script-元素"><a href="#Script-元素" class="headerlink" title="Script 元素"></a>Script 元素</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>如果 DOM 树解析到外联**<script>**时会阻塞住，在它加载并且执行完之前，不会往下解析 DOM 树。</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; test2.jsconst num &#x3D; 100000 * 50000;for (let i &#x3D; 0; i &lt; num ;i++) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;.&#x2F;test2.js&quot;&gt;&lt;&#x2F;script&gt;&lt;body&gt;    &lt;div&gt;我会在外部js脚本加载完成后执行&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>给外部脚本添加上<strong>defer</strong>，则会延迟脚本执行。</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;.&#x2F;test2.js&quot; defer&gt;&lt;&#x2F;script&gt;&lt;body&gt;    &lt;div&gt;我会在外部js脚本加载前执行&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>js 引擎执行完毕。控制权交还给渲染引擎，恢复解析 DOM。</li><li>内联 script 中的 js 代码阻塞页面的渲染。</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;    &lt;div&gt;我会在内联script执行完后再渲染&lt;&#x2F;div&gt;    &lt;script&gt;        const num &#x3D; 100000 * 50000;        for (let i &#x3D; 0; i &lt; num ;i++) &#123;        &#125;    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何减少重排和重绘"><a href="#如何减少重排和重绘" class="headerlink" title="如何减少重排和重绘"></a>如何减少重排和重绘</h3><blockquote><p>首先要了解的是什么是重排或者叫回流，什么是重绘；</p></blockquote><ol><li>重排： 重排必定伴随着重绘 1) 当页面首次渲染时 2) 当元素的尺寸、位置发生变化时， 3) 当 字体大小发生变化时 4) 浏览器窗口发生变化 5) 设置 style 样式 6) 新增和删除可见元素 7) 激活 CSS 伪类（例如：:hover） 8) 查询某些属性或者方法时会触发重排<br>常见的属性如下：<br>offsetTop、offsetLeft、 offsetWidth、offsetHeight、<br>scrollTop、scrollLeft、scrollWidth、scrollHeight<br>clientTop、clientLeft、clientWidth、clientHeight<br>常见的方法：<br>getComputedStyle、currentStyle。主要是为了确保准确性。</li><li>重绘：重绘不一定会造成重排<br>color<br>border-style<br>visibility<br>background<br>text-decoration<br>background-image<br>background-position<br>background-repeat<br>outline-color<br>outline<br>outline-style<br>border-radius<br>outline-width<br>box-shadow<br>background-size</li></ol><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li>读写分离<br>以下的代码会造成 4 次重排和 4 次重绘，因为在 console 中你请求的这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务，即使该值与你操作中修改的值没关联。</li></ol><p><strong>因为队列中，可能会有影响到这些值的操作，为了给我们最精确的值，浏览器会立即重排+重绘</strong></p><pre class="line-numbers language-none"><code class="language-none">div.style.left &#x3D; &#39;10px&#39;;console.log(div.offsetLeft);div.style.top &#x3D; &#39;10px&#39;;console.log(div.offsetTop);div.style.width &#x3D; &#39;20px&#39;;console.log(div.offsetWidth);div.style.height &#x3D; &#39;20px&#39;;console.log(div.offsetHeight);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将代码改成如下，则只会造成一次重排。因为在第一个 console 的时候，浏览器把之前上面四个写操作的渲染队列都给清空了。剩下的 console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。</p><pre class="line-numbers language-none"><code class="language-none">div.style.left &#x3D; &#39;10px&#39;;div.style.top &#x3D; &#39;10px&#39;;div.style.width &#x3D; &#39;20px&#39;;div.style.height &#x3D; &#39;20px&#39;;console.log(div.offsetLeft);console.log(div.offsetTop);console.log(div.offsetWidth);console.log(div.offsetHeight);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>样式集中改变</li></ol><pre class="line-numbers language-none"><code class="language-none">div.style.left &#x3D; &#39;10px&#39;;div.style.top &#x3D; &#39;10px&#39;;div.style.width &#x3D; &#39;20px&#39;;div.style.height &#x3D; &#39;20px&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然现在大部分浏览器有渲染队列优化，不排除有些浏览器以及老版本的浏览器效率仍然低下：<br>建议通过改变 class 或者 csstext 属性集中改变样式</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; badvar left &#x3D; 10;var top &#x3D; 10;el.style.left &#x3D; left + &quot;px&quot;;el.style.top  &#x3D; top  + &quot;px&quot;;&#x2F;&#x2F; goodel.className +&#x3D; &quot; theclassname&quot;;&#x2F;&#x2F; goodel.style.cssText +&#x3D; &quot;; left: &quot; + left + &quot;px; top: &quot; + top + &quot;px;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>缓存布局信息</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; bad 强制刷新 触发两次重排div.style.left &#x3D; div.offsetLeft + 1 + &#39;px&#39;;div.style.top &#x3D; div.offsetTop + 1 + &#39;px&#39;;&#x2F;&#x2F; good 缓存布局信息 相当于读写分离var curLeft &#x3D; div.offsetLeft;var curTop &#x3D; div.offsetTop;div.style.left &#x3D; curLeft + 1 + &#39;px&#39;;div.style.top &#x3D; curTop + 1 + &#39;px&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>离线改变 dom</p><ul><li>隐藏要操作的 dom<br>在要操作 dom 之前，通过 display 隐藏 dom，当操作完成之后，才将元素的 display 属性为可见，因为<br>不可见的元素不会触发重排和重绘。<br>`              dom.display = 'none'<br>// 修改dom样式<br>dom.display = 'block'</li></ul></li></ol><p>  `</p><ul><li>通过使用 DocumentFragment 创建一个 dom 碎片,在它上面批量操作 dom，操作完成之后，再添加到文档中，这样只会触发一次重排。</li><li>复制节点，在副本上工作，然后替换它！</li></ul><ol start="5"><li>position 属性为 absolute 或 fixed<br>position 属性为 absolute 或 fixed 的元素，重排开销比较小，不用考虑它对其他元素的影响</li><li>优化动画</li></ol><p>可以把动画效果应用到 position 属性为 absolute 或 fixed 的元素上，这样对其他元素影响较小<br>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量：<br>比如实现一个动画，以 1 个像素为单位移动这样最平滑，但是 reflow 就会过于频繁，大量消耗 CPU 资源，如果以 3 个像素为单位移动则会好很多。</p><p>启用 GPPU 加速<br>此部分来自优化 CSS 重排重绘与浏览器性能<br>GPU(图像加速器)：<br>GPU 硬件加速是指应用 GPU 的图形性能对浏览器中的一些图形操作交给 GPU 来完成，因为 GPU 是专门为处理图形而设计，所以它在速度和能耗上更有效率。<br>GPU 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3 转换（transitions），CSS3 3D 变换（transforms），WebGL 和视频(video)。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* * 根据上面的结论 * 将 2d transform 换成 3d * 就可以强制开启 GPU 加速 * 提高动画性能 *&#x2F;div &#123;  transform: translate3d(10px, 10px, 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>V8 中，将堆内存分为<strong>新生代（副垃圾回收器）</strong>，<strong>老生代（主垃圾回收器）</strong>。<strong>新生代</strong>组要存储一些存活时间短的对象，<strong>老生代</strong>存储存活时间长的对象。</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><ol><li>标记空间中活动对象和非活动对象。活动对象就是还在使用的对象，非活动对象就是可以进行回收的对象</li><li>回收非活动对象占据的内存。即在标记完成之后，统一清理非活动对象的内存</li><li>做内存整理，一般在频繁的垃圾回收后，会出现大量不连贯的内存空间，叫做<strong>内存碎片</strong>。当内存中出现大量的内存碎片后，就可能出现内存不足的情况。所以需要整理。但这一步是可选的，因为有的垃圾回收器不会产生<strong>内存碎片</strong>，如<strong>副垃圾回收器</strong></li></ol><h4 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h4><p><strong>新生代</strong>采用<strong>Scavenge 算法</strong> ，即将<strong>新生代</strong>一分为二，分别为对象区域，空闲区域。如下图：<br><img src="https://user-images.githubusercontent.com/18700225/72214201-4b8a0a80-3538-11ea-9916-e134c94a3896.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/72214201-4b8a0a80-3538-11ea-9916-e134c94a3896.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="scavenge"></p><p>当对象区域快要占满时，就会执行一次垃圾回收操作。在垃圾回收的过程中标记非活动对象，标记完成后就进入垃圾清理阶段，副垃圾回收器会将存活的对象复制到空闲区域，并进行有序的排列。这个过程中就已经进行了内存整理。</p><p>然后对象区域和空闲区域的角色对换。</p><p>因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中</p><h4 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h4><p>V8 中的主垃圾回收器采用<strong>Mark-Sweep（标记-清除）</strong>，该算法会产生大量不连续的内存碎片。<br>所以又有了<strong>标记 - 整理（Mark-Compact）</strong> 它会先将所有存活的对象排列在一起，然后清理端另一边的非存活对象</p><h4 id="全停顿（Stop-The-World）"><a href="#全停顿（Stop-The-World）" class="headerlink" title="全停顿（Stop - The - World）"></a>全停顿（Stop - The - World）</h4><p>由于 js 是运行在主线程上的，一旦执行垃圾回收算法，会阻塞所有 js 脚本执行。在清理过程中，主线程无法执行任何操作，会明显的影响到用户体验。</p><p>为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为增量标记（Incremental Marking）算法<br><img src="https://user-images.githubusercontent.com/18700225/72214337-c2c09e00-353a-11ea-8bde-9ffb891a53ef.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/72214337-c2c09e00-353a-11ea-8bde-9ffb891a53ef.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="increase"></p><p>使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求一个url时发生了什么?</title>
      <link href="/2023/09/04/wang-luo/qing-qiu-url-fa-sheng-liao-shi-me/"/>
      <url>/2023/09/04/wang-luo/qing-qiu-url-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://juejin.cn/user/588993961408685/posts">我的掘金</a></p></blockquote><p>网上的信息都比较碎片化，所以想自己画一张完整的图并总结</p><h2 id="宏观分析"><a href="#宏观分析" class="headerlink" title="宏观分析"></a>宏观分析</h2><p>下图为网络连接的大致流程</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a67039b87f1c42fa9d734121d230a935~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a67039b87f1c42fa9d734121d230a935~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="网络的连接.png"></p><h2 id="TODO-步骤分析"><a href="#TODO-步骤分析" class="headerlink" title="TODO: 步骤分析"></a>TODO: 步骤分析</h2><h3 id="用户输入-url"><a href="#用户输入-url" class="headerlink" title="用户输入 url"></a>用户输入 url</h3><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><h3 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h3><h3 id="IP-寻址"><a href="#IP-寻址" class="headerlink" title="IP 寻址"></a>IP 寻址</h3><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次关于vscode在mac中卡顿的问题</title>
      <link href="/2023/06/24/kai-fa-wen-ti-ji-lu/ru-he-jie-jue-vscode-qia-dun-wen-ti/"/>
      <url>/2023/06/24/kai-fa-wen-ti-ji-lu/ru-he-jie-jue-vscode-qia-dun-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>公司发的机器是 19 款 MacBook Pro Intel i7 的，一开始就是在 vscode 官网下载的默认的 Universal 版本的。然后在用了一段时间后，突然就很卡。无论是滚动，还是点击鼠标和选中代码。</p><p>一开始定位的问题是下载的插件比较多，然后是设置问题，然后在网上找到了如下配置：</p><ol><li><p>在 首选项-&gt; 设置中，搜素<code>search.follow</code>配置，然后将“控制是否在搜索中跟踪符号链接”的 √ 去掉</p></li><li><p>还是在设置中搜索<code>exclude</code>，然后在<code>Files:exclude</code>下面有一个添加模式，输入<code>**/node_modules</code>，设置忽略 node_modules 这个文件夹</p></li><li><p>还有一个是关闭<code>editor.formatOnSave</code>。但是这个在项目开发中对代码格式的规范非常有用。所以没有关</p></li></ol><p>在进行了上面的操作后，感觉到稍微好了点，但是作用不大。</p><p>所以又继续 google,找到了一篇<a href="https://www.v2ex.com/t/939225">文章</a></p><p>感觉和我的问题基本一样，不同的只是电脑的 cpu,</p><p>所以，我下载了<code>intel</code>版的 vscode，然后再次打开项目，速度飞起</p>]]></content>
      
      
      <categories>
          
          <category> 开发问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发H5页面，各种问题介绍</title>
      <link href="/2023/06/03/qian-duan/yi-dong-duan/yi-dong-duan-gai-nian-shu-li/"/>
      <url>/2023/06/03/qian-duan/yi-dong-duan/yi-dong-duan-gai-nian-shu-li/</url>
      
        <content type="html"><![CDATA[<p>本文主要用于梳理移动端开发的一些概念</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><p>平时，我们所说的手机<strong>屏幕尺寸</strong>指的就是<strong>手机显示屏对角线的长度</strong>，单位是<code>英寸</code>，而<code>一英寸 = 25.4毫米</code>。可以通过勾股定理的公式先算出对角线的长度，然后再计算出屏幕的尺寸</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18fbce8c34f84999a61db4bf4d88080a~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18fbce8c34f84999a61db4bf4d88080a~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>不同手机的<strong>屏幕尺寸</strong>不同，厂商在生产的时候就已经规定了。记住，千万别和机身尺寸搞混了。我们以<code>iphone8</code>为例</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a97b11283a74de796aa45b50b856db4~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a97b11283a74de796aa45b50b856db4~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>我们可以看到，<code>iphone8</code>的屏幕尺寸是 4.7 英寸，也就是通过测量屏幕的宽高计算出来的(<strong>这个数据官方没有，如果你有工具，可以自己测量一下屏幕的宽高来计算验证一下</strong>)。</p><p>而机身尺寸是<code>138.4mm * 67.3mm * 7.3mm(厚度)</code>（该数据来自官方）</p><p>其他设备的同样尺寸计算方式也同上</p><h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><p>手机的物理像素原理基于液晶（**LCD（Liquid-crystal-display)**）的工作原理，将屏幕表面分成许多微小的像素。每个像素由一个液晶元素和一个透明的导电膜组成。</p><p>比如，iphone8 是<code>1334 x 750 像素分辨率</code>, 对应的就表示在 iphone8 的屏幕中有<strong>1334 * 750 个发光单元</strong>，这也就是他的物理像素。</p><blockquote><p>通常，设计师给的 UI 设计稿上的“px”指的就是物理像素。</p></blockquote><h3 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h3><p>逻辑像素是指一个像素点在不同设备的显示效果，通常指的是在相同的物理像素密度下（像素总数除以设备的尺寸），使用不同的倍频渲染技术，在不同设备上呈现的不同效果。例如，iPhone 8 拥有 750x1334 的分辨率，这意味着手机屏幕具有<strong>750 个物理像素宽和 1334 个物理像素高</strong>。然而，逻辑像素是由<strong>Retina Display</strong>技术生成的一种像素概念，它将 iPhone 8 屏幕的物理像素分成 2x 逻辑像素和 3x 逻辑像素。2x 逻辑像素显示法在屏幕上显示 750x1334 的分辨率，而 3x 逻辑像素则呈现了 1125x2001 的分辨率，此结果在正确的屏幕大小下，可以呈现更清晰、更细腻的显示效果。</p><h2 id="其他详细内容"><a href="#其他详细内容" class="headerlink" title="其他详细内容"></a>其他详细内容</h2><ol><li><a href="https://www.cnblogs.com/onepixel/p/12144364.html">深入浅出 Viewport</a></li><li><a href="https://juejin.cn/post/7025540612111728653">移动端开发-物理像素、逻辑像素、DPR 等概念梳理</a></li><li><a href="https://juejin.cn/post/7064189873002905608">移动端 H5 页面开发指南</a></li><li><a href="https://juejin.cn/post/6844903930216841223">H5 页面适配 iPhone 刘海，就是那么简单</a></li></ol><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://support.apple.com/kb/SP767?locale=zh_CN">https://support.apple.com/kb/SP767?locale=zh_CN</a></li><li><a href="https://zhuanlan.zhihu.com/p/37651650">OLED 屏幕和 LCD 屏幕的区别与优劣</a></li><li><a href="http://iosres.com/">iosRes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发H5页面，各种问题介绍</title>
      <link href="/2023/06/03/qian-duan/yi-dong-duan/h5-kai-fa-chang-jian-wen-ti/"/>
      <url>/2023/06/03/qian-duan/yi-dong-duan/h5-kai-fa-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="移动端如何进行适配"><a href="#移动端如何进行适配" class="headerlink" title="移动端如何进行适配"></a>移动端如何进行适配</h3><ol><li>使用 viewprot 配合 vw&#x2F;vh。<br>首先给 html 文件增加 viewport 配置</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用插件<code>postcss-px-to-viewport</code>，根据设计稿的尺寸配置视口的宽高。然后该插件在构建过程中就会将 px 转成 vw。</p><ol start="2"><li>使用 viewport 配合 rem；<br>rem 是以 html 元素的 font-size 为单位的尺寸;</li></ol><p>首先给 html 文件增加 viewport 配置，将布局视口调整为设备的可视宽高</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假设设计稿是按照 iphone6 来设计的，那么设计稿中采用的应该是<code>750*1334px</code>的物理像素;</p><p>那么，我们可以设置 html 根元素的尺寸为<code>font-size: 100px</code>;</p><p>为什么是 100px？定为 100px 的话，我们就是将 750 的设计稿分成了 7.5rem，1rem 为 100px;</p><p>所以，根元素的字体为 100px;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">750</span> <span class="token operator">/</span> <span class="token number">7.5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是到了不同尺寸的手机中，根元素就不能为 100px 了，但是我们还是希望简单的使用 <strong>设计稿物理像素 &#x2F; 100 &#x3D; ?rem</strong> 的方式计算出元素的 rem。那么字体就需要根据不同的手机的<code>逻辑像素(视口宽度)</code>来计算；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">750</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，在项目中就可以愉快的将所有设计稿尺寸除以 100 来算 rem 了</p><h3 id="移动端-input-内的文字和同行文本在-android-中不对齐"><a href="#移动端-input-内的文字和同行文本在-android-中不对齐" class="headerlink" title="移动端 input 内的文字和同行文本在 android 中不对齐"></a>移动端 input 内的文字和同行文本在 android 中不对齐</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[0-9]*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>其他内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个问题在 ios 中是不存在的，并且如果将 input 和同行的文本都设置高度和 line-height，虽然在 android 中会对齐，但是 ios 中 input 内的文字又会往下掉。。。所以，我使用了两套 css，ios 中不处理，android 中增加居中的一些样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isIPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\biPhone\\b|\\biPod\\b"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>  window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="移动端滚动穿透"><a href="#移动端滚动穿透" class="headerlink" title="移动端滚动穿透"></a>移动端滚动穿透</h3><blockquote><p>当某个页面高度超过了屏幕并且可以滚动，且这个页面中有模态框。当模态框打开后，底下的页面还是可以滚动。可以使用一下的方法来解决</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fixScroll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> oBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">visible</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      oBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"fixed"</span><span class="token punctuation">;</span>      oBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"hidden"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      oBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"static"</span><span class="token punctuation">;</span>      oBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"visible"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fixScroll(true) 在显示弹框的时候调用</span><span class="token comment">// fixScroll(false) 在隐藏弹框的时候调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H5-和-webview-回退刷新问题"><a href="#H5-和-webview-回退刷新问题" class="headerlink" title="H5 和 webview 回退刷新问题"></a>H5 和 webview 回退刷新问题</h3><p>项目是一个运行在 webview 中中的 h5 页面，在页面中需要跳转到第三方的页面，且回退后需要刷新页面。然后就遇到了 bfcache</p><p><strong>什么是 bfcache</strong></p><p>bfcache（back-forward cache），也可叫做“往返缓存”。是为了用户在使用浏览器的“返回”和“前进”按钮时，加快页面的转换速度。它实际上是将整个页面（数据、DOM、js）保存在了内存中。如果页面位于 bfcache 中，那么再次打开这个页面则不会触发 onload 事件</p><p><strong>解决方案</strong></p><p><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/1.5/Using_Firefox_1.5_caching">Firefox 提供的思路</a></p><p>JS 监听 pageshow 事件阻止页面进入 bfcache</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"pageshow"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于-ios-下通过-navigator-geolocation-getCurrentPosition-获取经纬度信息"><a href="#关于-ios-下通过-navigator-geolocation-getCurrentPosition-获取经纬度信息" class="headerlink" title="关于 ios 下通过 navigator.geolocation.getCurrentPosition 获取经纬度信息"></a>关于 ios 下通过 navigator.geolocation.getCurrentPosition 获取经纬度信息</h3><p>在 ios 中，需要使用 https，才能调用 <code>navigator.geolocation.getCurrentPosition</code> 获取经纬度信息。</p><p>可以通过 iframe 的方式绕过 ios 的限制（但是无法绕过谷歌浏览器的限制）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">enableHighAccuracy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">maximumAge</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">12000</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">showPosition</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">showError</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">PERMISSION_DENIED</span><span class="token operator">:</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"用户不允许地理定位!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">POSITION_UNAVAILABLE</span><span class="token operator">:</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无法获取当前位置!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token operator">:</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"操作超时!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">UNKNOWN_ERROR</span><span class="token operator">:</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未知错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">locationCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> position</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">showError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">showPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span>  <span class="token string">'&lt;iframe src="javascript:(function()&#123; '</span> <span class="token operator">+</span>  <span class="token string">"window.navigator.geolocation.getCurrentPosition("</span> <span class="token operator">+</span>  <span class="token string">"function(position)&#123;parent &amp;&amp; parent.locationCallback &amp;&amp; parent.locationCallback(null,position);&#125;, "</span> <span class="token operator">+</span>  <span class="token string">"function(err)&#123;parent &amp;&amp; parent.locationCallback &amp;&amp; parent.locationCallback(err);&#125;, "</span> <span class="token operator">+</span>  <span class="token string">"&#123;enableHighAccuracy : "</span> <span class="token operator">+</span>  options<span class="token punctuation">.</span>enableHighAccuracy <span class="token operator">+</span>  <span class="token string">", maximumAge : "</span> <span class="token operator">+</span>  options<span class="token punctuation">.</span>maximumAge <span class="token operator">+</span>  <span class="token string">", timeout :"</span> <span class="token operator">+</span>  options<span class="token punctuation">.</span>timeout <span class="token operator">+</span>  <span class="token string">"&#125;)"</span> <span class="token operator">+</span>  <span class="token string">';&#125;)()" style="display:none;">&lt;/iframe>'</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Typescript和rollup开发一个工具库,并使用github actions来自动发布npm包</title>
      <link href="/2023/05/21/qian-duan/gong-cheng-hua/gong-cheng-hua-1-ts-rollup-kai-fa-gong-ju-ku/"/>
      <url>/2023/05/21/qian-duan/gong-cheng-hua/gong-cheng-hua-1-ts-rollup-kai-fa-gong-ju-ku/</url>
      
        <content type="html"><![CDATA[<p>在日常开发中，经常会遇到一些通用的逻辑，导致每次都需要复制粘贴。而我们作为 coder，可以将一些常用业务逻辑封装成通用的函数库，并发布到 npm 中。<br>这样，每次遇到新的项目时，只需要 install 一下即可</p><p><strong>这里我们已经有了一个<a href="https://github.com/SaebaRyoo/fe-utils">fe-utils</a> 前端日常开发工具库，也是本文最后的产物，并且后续也会持续更新。如果你有一个开源的心，但是没信心去为大的项目提 pr，不妨从这个封装日常通用逻辑的项目做起，我们一起进步！！！</strong></p><p>接下来我们就尝试自己动手实现一个工具库</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先在自己的 github 上创建一个项目，然后拉取。进入到该仓库中，执行<code>yarn init</code>。一路 enter 下去。</p><h2 id="主要目录结构"><a href="#主要目录结构" class="headerlink" title="主要目录结构"></a>主要目录结构</h2><pre class="line-numbers language-none"><code class="language-none">- .github    - workflows        - xx.yml- .husky- src    - __test__    - index.ts    - sum.ts- .editorconfig- .gitignore- .npmignore- commitlint.config.js- jest.config.mjs- package.json- rollup.config.js- tsconfig.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><h3 id="1-安装-rollup-和-ts"><a href="#1-安装-rollup-和-ts" class="headerlink" title="1. 安装 rollup 和 ts"></a>1. 安装 rollup 和 ts</h3><p><code>yarn add rollup typescript -D</code></p><h3 id="2-配置-typescript-配置文件"><a href="#2-配置-typescript-配置文件" class="headerlink" title="2. 配置 typescript 配置文件"></a>2. 配置 typescript 配置文件</h3><p><code>yarn tsc --init</code>生成一个默认的配置文件，然后根据我们的项目，改成如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span> <span class="token comment">/* 编译目标 */</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span> <span class="token comment">/* 项目模块类型 */</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES2018"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 是否允许js代码 */</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 检查js代码错误 */</span><span class="token punctuation">,</span>    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 自动创建声明文件(.d.ts) */</span><span class="token punctuation">,</span>    <span class="token property">"declarationDir"</span><span class="token operator">:</span> <span class="token string">"./lib"</span> <span class="token comment">/* 声明文件目录 */</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 自动生成sourcemap文件 */</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"lib"</span> <span class="token comment">/* 编译输出目录 */</span><span class="token punctuation">,</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span> <span class="token comment">/* 项目源码根目录，用来控制编译输出的目录结构 */</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 启用严格模式 */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/index.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"lib"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置-rollup-config-js"><a href="#3-配置-rollup-config-js" class="headerlink" title="3. 配置 rollup.config.js"></a>3. 配置 rollup.config.js</h3><p>在配置之前，我们需要安装几个 rollup 插件<br><code>yarn add @rollup/plugin-node-resolve @rollup/plugin-typescript @rollup/plugin-commonjs rollup-plugin-terser -D</code></p><p>这几个分别是如下作用<br>@rollup&#x2F;plugin-node-resolve 处理路径<br>@rollup&#x2F;plugin-typescript 支持 ts<br>@rollup&#x2F;plugin-commonjs 处理 commonjs<br>rollup-plugin-terser 压缩 umd 规范的输出文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-node-resolve"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> typescript <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-typescript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-commonjs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> terser <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"rollup-plugin-terser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"cjs"</span><span class="token punctuation">,</span>        <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">"[name].cjs.js"</span><span class="token punctuation">,</span>        <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否输出sourcemap</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"esm"</span><span class="token punctuation">,</span>        <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">"[name].esm.js"</span><span class="token punctuation">,</span>        <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否输出sourcemap</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>        <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">"[name].umd.js"</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"FE_utils"</span><span class="token punctuation">,</span> <span class="token comment">// umd模块名称，相当于一个命名空间，会自动挂载到window下面</span>        <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token string">"ESNext"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-修改-package-json"><a href="#4-修改-package-json" class="headerlink" title="4. 修改 package.json"></a>4. 修改 package.json</h3><p>我们直接看完整的 package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@lxnxbnq/utils"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.2-alpha"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/index.cjs.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"lib/index.esm.js"</span><span class="token punctuation">,</span>  <span class="token property">"jsnext:main"</span><span class="token operator">:</span> <span class="token string">"lib/index.esm.js"</span><span class="token punctuation">,</span>  <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token string">"lib/index.umd.js"</span><span class="token punctuation">,</span>  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"lib/index.d.ts"</span><span class="token punctuation">,</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/SaebaRyoo/fe-utils.git"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"SaebaRyoo &lt;yuanddmail@163.com>"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"rollup -c"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"@rollup/plugin-babel"</span><span class="token operator">:</span> <span class="token string">"^6.0.3"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-commonjs"</span><span class="token operator">:</span> <span class="token string">"^23.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-node-resolve"</span><span class="token operator">:</span> <span class="token string">"^15.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-typescript"</span><span class="token operator">:</span> <span class="token string">"^10.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"@types/jest"</span><span class="token operator">:</span> <span class="token string">"^29.2.4"</span><span class="token punctuation">,</span>    <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token string">"^29.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"rollup"</span><span class="token operator">:</span> <span class="token string">"^3.7.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-terser"</span><span class="token operator">:</span> <span class="token string">"^7.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"ts-jest"</span><span class="token operator">:</span> <span class="token string">"^29.0.3"</span><span class="token punctuation">,</span>    <span class="token property">"tslib"</span><span class="token operator">:</span> <span class="token string">"^2.4.1"</span><span class="token punctuation">,</span>    <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"^4.9.4"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"前端业务代码工具库"</span><span class="token punctuation">,</span>  <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/SaebaRyoo/fe-utils/issues"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/SaebaRyoo/fe-utils#readme"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中需要注意的有如下几个字段</p><p>告知使用者不同的规范引用哪个文件</p><ul><li>“main”: “lib&#x2F;index.cjs.js”, &#x2F;&#x2F; 当使用 commonjs 规范时会使用这个包</li><li>“module”: “lib&#x2F;index.esm.js”, &#x2F;&#x2F; 使用 esm 时，会使用这个包</li><li>“jsnext:main”: “lib&#x2F;index.esm.js”, &#x2F;&#x2F;这个同上，不过这个是社区规范，上面是官方规范</li><li>“browser”: “lib&#x2F;index.umd.js”, &#x2F;&#x2F; umd 规范，当直接在浏览器中开发时，可以直接下载 release 包并在浏览器中使用 script 导入</li></ul><p>ts 类型文件</p><ul><li>“types”: “lib&#x2F;index.d.ts”,</li></ul><p>使用<code>yarn run build</code>打包项目</p><ul><li>“scripts”: {<br>“build”: “rollup -c”,<br>},</li></ul><p>files 字段是用于约定在发包的时候 NPM 会发布包含的文件和文件夹。</p><p>“files”: [<br>“lib”<br>],</p><h3 id="5-安装-jest-lint-prettier-husky-commit-msg-对代码的质量进行约束"><a href="#5-安装-jest-lint-prettier-husky-commit-msg-对代码的质量进行约束" class="headerlink" title="5. 安装 jest + lint + prettier + husky + commit-msg 对代码的质量进行约束"></a>5. 安装 jest + lint + prettier + husky + commit-msg 对代码的质量进行约束</h3><p>首先是安装安装测试框架 jest，因为项目时基于 ts 写的，所以需要配置 jest 来支持 ts<br><code>yarn add -D jest ts-jest @types/jest</code></p><ol><li><p>创建配置文件<br><code>yarn jest --init</code></p></li><li><p>修改配置文件,完整如下</p></li></ol><p>jest 的默认环境是 node，但是我们这个工具库是面向前端的，肯定需要操作 dom，所以需要安装<code>yarn add jest-environment-jsdom -D</code>来支持 DOM 和 BOM 操作</p><p>然后就是在使用到 DOM 或者 BOM 对象的测试文件的顶部加上这一行注释即可运行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @jest-environment jsdom */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者在配置文件中修改运行环境为<code>testEnvironment: &#39;jsdom&#39;</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * For a detailed explanation regarding each configuration property, visit: * https://jestjs.io/docs/configuration */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">clearMocks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">"coverage"</span><span class="token punctuation">,</span>  <span class="token literal-property property">coverageProvider</span><span class="token operator">:</span> <span class="token string">"v8"</span><span class="token punctuation">,</span>  <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">"ts-jest"</span><span class="token punctuation">,</span>  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">"jsdom"</span><span class="token punctuation">,</span> <span class="token comment">// 支持测试环境访问dom</span>  <span class="token comment">// 配置测试环境ua</span>  <span class="token literal-property property">testEnvironmentOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">userAgent</span><span class="token operator">:</span>      <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在 package.json 的 script 中添加 cli 命令</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span><span class="token punctuation">,</span>    <span class="token property">"coveralls"</span><span class="token operator">:</span> <span class="token string">"jest --coverage"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>最后按照<a href="https://juejin.cn/post/7179185223760871483">这篇文章</a>的步骤来配置规范代码的文件</li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>我们先在 src 的目录下写一个简单的 sum 方法以及一个单元测试</p><p>src&#x2F;sum.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> prev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在入口中导入并导出</p><p>src&#x2F;index.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./sum"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写一个 sum 的单元测试</p><p>src&#x2F;<strong>test</strong>&#x2F;sum.test.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../index"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should work"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这，基本上一个最简单的 npm 包就开发完了，接下来就是需要发布</p><h2 id="npm-包发布"><a href="#npm-包发布" class="headerlink" title="npm 包发布"></a>npm 包发布</h2><h3 id="1-手动发布"><a href="#1-手动发布" class="headerlink" title="1. 手动发布"></a>1. 手动发布</h3><p>首先需要准备一个账号，然后进行登录，输入你的 npm 账号、密码、邮箱<br><code>npm login</code></p><p>可以用<code>npm logout</code>退出当前账号</p><p><code>npm who am i</code>查询当前登录的账号</p><blockquote><p>Scoped packages default to restricted, but you can either publish them as public using npm publish –access&#x3D;public, or set their access as public using npm access public after the initial publish.<br>范围内的软件包默认为限制性的，但你可以使用<code>npm publish --access=public</code>将其发布为公共的，或者在初始发布后使用<code>npm access public</code>将其访问权限设置为公共的。</p></blockquote><p>登录成功就可以通过<code>npm publish</code>将包推送到服务器上</p><p>如果某版本的包有问题，可以使用<code>npm unpublish [pkg]@[version]</code>将其撤回</p><p><strong>注意：如果使用<code>@[scope]/package</code>的命名形式，[scope]一定要写你的账号名，不然发布的时候会提示 404</strong></p><h3 id="2-使用-github-action-发布-npm、创建-release-以及处理一些工作流程"><a href="#2-使用-github-action-发布-npm、创建-release-以及处理一些工作流程" class="headerlink" title="2. 使用 github action 发布 npm、创建 release 以及处理一些工作流程"></a>2. 使用 github action 发布 npm、创建 release 以及处理一些工作流程</h3><p>如果不了解 github action 的话, 建议先学习一下<a href="https://docs.github.com/en/actions">github actions</a>的一些概念</p><p>在根目录下创建<code>.github/workflows/node.js.yml</code>CI 配置文件（这里也可以在仓库上的 tab 栏中找到 Actions 生成）</p><p><strong>注意：如果你需要不同的 actions，可以在<a href="https://github.com/marketplace">Marketplace</a>中查找需要的 action</strong></p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ol><li>自动发布 npm 包</li><li>创建 release 并上传对应 asset</li><li>跑单元测试，生成测试覆盖率提交到 coveralls</li></ol><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>在 npm 中生成 token</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d25fb73438c471f8fad6e84ec15c47c~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d25fb73438c471f8fad6e84ec15c47c~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="npm_access_token"></p><ol start="2"><li>然后复制 token 到 github 对应仓库的秘钥中</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1723d8e466c42df98a86fde8e853955~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1723d8e466c42df98a86fde8e853955~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="actions secrets"></p><ol start="3"><li>设置一个变量名，我们这里设置的是<code>NPM_ACCESS_TOKEN</code>，后面可以在 CI 中通过<code>secrets.NPM_ACCESS_TOKEN</code> 获取到</li></ol><h4 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h4><p>有了以上的思路来看下面的整体代码</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node</span><span class="token comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Node.js CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>18.x<span class="token punctuation">]</span>        <span class="token comment"># See supported Node.js release schedule at https://nodejs.org/en/about/releases/</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">"yarn"</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn      <span class="token comment"># 测试，并生成测试覆盖率文件</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn run coveralls      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn run build      <span class="token comment"># 上报</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Coveralls        <span class="token key atrule">uses</span><span class="token punctuation">:</span> coverallsapp/github<span class="token punctuation">-</span>action@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github-token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># publish-npm任务</span>  <span class="token key atrule">publish-npm</span><span class="token punctuation">:</span>    <span class="token comment"># 在ubuntu最新版本的虚拟机执行</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token comment"># 设置变量</span>    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>18.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment"># 检查并切换到main分支</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 检查main分支        <span class="token comment"># 使用actions/checkout插件</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3      <span class="token comment"># 初始化缓存</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 缓存        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>runner.OS<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>hashFiles('<span class="token important">**/yarn.lock')</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 安装node</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 设置Node.js        <span class="token comment"># 使用actions/setup-node插件</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># node版本</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn run build      <span class="token comment"># 读取当前版本号</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 读取当前版本号        <span class="token key atrule">id</span><span class="token punctuation">:</span> version        <span class="token key atrule">uses</span><span class="token punctuation">:</span> notiz<span class="token punctuation">-</span>dev/github<span class="token punctuation">-</span>action<span class="token punctuation">-</span>json<span class="token punctuation">-</span>property@release        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 读取版本号</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"./package.json"</span>          <span class="token key atrule">prop_path</span><span class="token punctuation">:</span> <span class="token string">"version"</span>      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>steps.version.outputs.prop<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 创建Release</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> release        <span class="token comment"># 原本使用的 actions/create-release@latest来发版， actions/upload-release-asset@v1上传release-asset</span>        <span class="token comment"># 不过这两个action官方已经停止维护了，所以换成如下</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> softprops/action<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>release@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">files</span><span class="token punctuation">:</span> ./lib/index.umd.js          <span class="token key atrule">name</span><span class="token punctuation">:</span> v$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>steps.version.outputs.prop<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">tag_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>steps.version.outputs.prop<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 发布NPM包</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 发布NPM包        <span class="token comment"># 执行发布代码</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN          npm publish</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token comment"># 配置 npm access token 环境变量</span>          <span class="token key atrule">NPM_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>secrets.NPM_ACCESS_TOKEN<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 刷新缓存</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 刷新缓存        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          curl https://purge.jsdelivr.net/npm/iemotion-pic@latest/lib/name.json</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-readme-添加-badge-徽章"><a href="#为-readme-添加-badge-徽章" class="headerlink" title="为 readme 添加 badge(徽章)"></a>为 readme 添加 badge(徽章)</h2><p>我们会发现在一个开源项目中，readme 通常都会写的很好，而且还有很多的 badge,如 ant-design 的 readme</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89d6d77ff1cb47549efff3c34806ad3c~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89d6d77ff1cb47549efff3c34806ad3c~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>那么这一切都是怎么完成的呢？一些简单的 badge 可以直接在<a href="https://shields.io/">shields</a>中输入仓库名即可生成。</p><p>比如：</p><p>workflow 工作流状态： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b685d42f946452d9f203c47fa332849~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b685d42f946452d9f203c47fa332849~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="GitHub Workflow Status"></p><p>npm 包版本： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/672520d5f7e24fd5a4cd385fc88424a5~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/672520d5f7e24fd5a4cd385fc88424a5~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="npm"></p><p>license: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d888e9488a5e4fe7a1a2f12cc422959b~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d888e9488a5e4fe7a1a2f12cc422959b~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="GitHub"></p><p>我们也可以根据自己需要来创建不同的 badge</p><p>不过要添加测试覆盖率的 badge 会稍稍有些麻烦。</p><ol><li><p>首先进入<a href="https://coveralls.io/">coveralls 官网</a>，进去后需要通过 github 的授权</p></li><li><p>授权后点击左侧侧边栏的 ADD REPOS 会进入如下页面</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c665490a1314097ac2ad996345bb3f7~tplv-k3u1fbpfcp-zoom-1.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c665490a1314097ac2ad996345bb3f7~tplv-k3u1fbpfcp-zoom-1.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>然后我们将需要生成 badge 徽章的库设置为 on 即可</p><ol start="3"><li>后面的流程就是在 CI 中执行测试脚本并生成测试覆盖率的文件然后上传到 coveralls 就可以了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始一个前端可视化搭建平台</title>
      <link href="/2023/05/20/qian-duan/gong-cheng-hua/cong-ling-kai-fa-yi-ge-ye-mian-ke-shi-hua-da-jian-ping-tai/"/>
      <url>/2023/05/20/qian-duan/gong-cheng-hua/cong-ling-kai-fa-yi-ge-ye-mian-ke-shi-hua-da-jian-ping-tai/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7208745710764867640">文章同步于我的掘金</a></p><blockquote><p><a href="https://github.com/SaebaRyoo/VLayout#%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B">VLayout</a> 是一个学习页面可视化搭建的项目, 使用了 React + TS 技术来开发。如果您有好的建议，欢迎提出，如果感觉帮助到了您，不妨点个赞或<a href="https://github.com/SaebaRyoo/VLayout">star</a>。</p></blockquote><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>首先开始一个项目时，我们需要理清他有哪些功能。以下页面可视化搭建的基础功能列表</p><ol><li>数据协议(JSON Schema)</li><li>自定义组件库</li><li>编辑器(画布）</li><li>可拖拽</li><li>放大缩小</li><li>组件属性编辑功能</li><li>图层管理</li><li>复制粘贴</li><li>持久化存储、预览</li></ol><p>后续会在这篇文章的基础上添加如下功能:</p><ol start="9"><li>事件绑定</li><li>支持动画</li><li>…</li></ol><p>有了上面的功能设计，我们可以通过画图来更清晰的理解流程</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ca3d162d11d419f8f5e16886bf34be1~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ca3d162d11d419f8f5e16886bf34be1~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="可视化搭建.png"></p><p>总的来说，我们需要一个<strong>自定义组件库</strong>，它需要支持我们定义的<strong>数据协议(JSON Schema)<strong>。而</strong>编辑器</strong>则是通过对一个组件的<strong>JSON Schema</strong>进行编辑，然后输出最终用于在页面中展示的数据, 用现在流行的前端框架的展示逻辑就是**UI &#x3D; f(JSON Schema)**。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>项目管理工具： lerna</li><li>构建工具：<ul><li>编辑器： vite</li><li>自定义组件库: rollup</li></ul></li><li>前端框架&#x2F;库: ts + react + redux-toolkit + redux-persist + react-router + react-dnd + antd</li><li>代码规范以及提交规范: eslint + prettier + husky + lint-stage + commitlint</li><li>单元测试: jest + react-testing-library</li></ul><h2 id="项目管理-（如果想看实现逻辑，可直接到下面的功能实现）"><a href="#项目管理-（如果想看实现逻辑，可直接到下面的功能实现）" class="headerlink" title="项目管理 （如果想看实现逻辑，可直接到下面的功能实现）"></a>项目管理 （如果想看实现逻辑，可直接到下面的功能实现）</h2><p>通过上面我会发现，一个可视化搭建项目至少会包含两个子项目：</p><ol><li>自定义的组件库</li><li>用于可视化编辑的管理页面</li></ol><p>上面的子项目 1 目前是只实现了 React 版本的组件库，但是我觉的一个公司业务规模比较大的时候可能不止一种技术栈。可能会有 Vue、微信小程序等</p><p>所以，为了项目的可扩展性，我们使用<strong>lerna</strong>来做 <strong>monorepo</strong></p><p><strong>monorepo</strong>不是框架也不是库，它是一种项目管理的概念。它表示将多个项目放在一个仓库中统一开发，便于管理，使用统一标准开发，当有多个依赖项目的时候也便于发布。而<strong>lerna</strong>是基于这个概念实现的项目管理工具。</p><h3 id="lerna-简单介绍"><a href="#lerna-简单介绍" class="headerlink" title="lerna 简单介绍"></a>lerna 简单介绍</h3><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p><code>yarn global add lerna</code> 或者<code>npm install lerna -g</code></p><h4 id="创建项目根目录"><a href="#创建项目根目录" class="headerlink" title="创建项目根目录"></a>创建项目根目录</h4><p><code>mkdir lerna-demo &amp;&amp; lerna init</code></p><p>执行完 init 后会多出一个<code>packages</code>目录和<code>lerna.json</code>，并且会配置一个<code>workspace</code></p><h4 id="创建不同的子项目"><a href="#创建不同的子项目" class="headerlink" title="创建不同的子项目"></a>创建不同的子项目</h4><p>然后我们可以在 packages 中创建不同的项目,具体代码可以查看<a href="https://github.com/SaebaRyoo/Demos/tree/main/lerna-demo/packages">lerna-demo</a></p><blockquote><p>代码里有个需要注意的点就是打包配置中设置的打包方式要和你引入的方式是一致的，或者直接在打包配置中设置<code>esm</code>、<code>cjs</code>和<code>umd</code>三种方式，然后根据不同的规范去引入不同的代码。</p></blockquote><p>这里我们有三个项目<code>header</code>, <code>footer</code>, <code>website</code></p><p>webstite 就是我们的项目，其他两个是组件库。而我们需要在 website 中使用它们。那么就需要在 website 的 package.json 中导入，方法如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"header"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token property">"footer"</span><span class="token operator">:</span> <span class="token string">"*"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就相当于告诉 lerna 去 link workspace 中的<code>header</code>和<code>footer</code>，就像<code>npm install</code>了一样。</p><p>然后再<code>yarn</code>执行一下命令</p><h4 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h4><p>如果需要打包所有的项目则直接运行<code>lerna run build</code></p><p>lerna 会按照依赖顺序，先打包<code>header</code>和<code>footer</code>，最好再打包<code>website</code></p><p>也可以使用<code>--scope</code>配置 指定需要打包的项目<code>lerna run build --scope header --scope footer</code>,这样，website 项目就不会被打包。</p><p>运行单元测试也同上。</p><h4 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h4><p>打包好了两个依赖项目后，就可以运行<code>website</code>了，</p><p><code>lerna run dev --scope=website</code></p><p>也可以不加<code>--scope</code>,因为其他两个项目中并没有<code>dev</code>这个运行命令。</p><p>最后就可以直接访问了</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1-数据协议-JSON-Schema"><a href="#1-数据协议-JSON-Schema" class="headerlink" title="1. 数据协议(JSON Schema)"></a>1. 数据协议(JSON Schema)</h3><p>定义一个通用的数据协议，我们以一个 Button 组件为例，它接收的<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/r-material/src/custom-components/Button/schema.ts">Schema 数据</a>如下:<br>其他的自定义组件也都是接收这种格式的数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'Button'</span><span class="token punctuation">,</span>  <span class="token literal-property property">propValue</span><span class="token operator">:</span> <span class="token string">'点击'</span><span class="token punctuation">,</span> <span class="token comment">// 组件所使用的值</span>  <span class="token literal-property property">animations</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 动画列表</span>  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 事件列表</span>  <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 组件样式</span>    <span class="token literal-property property">boxSizing</span><span class="token operator">:</span> <span class="token string">'border-box'</span><span class="token punctuation">,</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">borderStyle</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    <span class="token literal-property property">lineHeight</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">letterSpacing</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以看到上面的数据中有一个<strong>type: Button</strong>字段，这个字段就是每个组件库中的唯一的字段，标识了是什么组件。</p><p>接着，进入自定义组件的<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/r-material/src/index.tsx">入口处</a>，我们使用的<strong>策略模式</strong>根据 schema 的 type 来判断加载哪个组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 懒加载</span><span class="token keyword">const</span> ComponentMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  Button<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./custom-components/Button/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Text<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./custom-components/Text/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Image<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./custom-components/Image/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MaterialProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Material<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>MaterialProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> schema <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> Comp <span class="token operator">=</span> ComponentMap<span class="token punctuation">[</span>schema<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Component `&#123;schema.type&#125;` is loading!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comp</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义组件"><a href="#2-自定义组件" class="headerlink" title="2. 自定义组件"></a>2. 自定义组件</h3><p>我们还是以实现一个<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/r-material/src/custom-components/Button/Button.tsx">Button</a>组件为例,目前只需要将 style 渲染到组件中即可.</p><p>**PS: 只要修改组件库，就需要使用 lerna run build –scope [your-components]**来从新打包，不然依赖这个组件库的项目无法使用到你更改后的版本</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> schema<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span><span class="token operator">:</span> MaterialProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> propValue<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span> <span class="token operator">=</span> schema<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>propValue <span class="token operator">||</span> <span class="token string">"按钮"</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且，每个组件都对应着一个初始的<strong>schema</strong> 和 <strong>template</strong>。 前者我们已经说过了，我们主要说一下后者。**<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/r-material/src/custom-components/Button/template.ts">template</a>** 它相对比较简单，就是定义这个组件的一些基础信息,用于在编辑器中展现出一个可拖拽的组件列表</p><p>**PS: template 中的 type 必须要和 schema 中的 type 是一致的，因为我们后续需要通过这个 type 获取对应的 schema</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> Button<span class="token operator">:</span> T_Template <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">"Button"</span><span class="token punctuation">,</span>  h<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  icon<span class="token operator">:</span> btn<span class="token punctuation">,</span>  displayName<span class="token operator">:</span> <span class="token string">"按钮组件"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编辑器-画布"><a href="#3-编辑器-画布" class="headerlink" title="3. 编辑器(画布)"></a>3. 编辑器(画布)</h3><p>画布主要有两个部分</p><ul><li>可拖拽的组件目标</li><li>用于放置拖拽目标的画布容器</li></ul><p>有了上面的<strong>template</strong>，我们只需要实现一个通用的拖拽 Box 组件，用于传递<strong>默认的 schema</strong> 主要代码如下:</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">Box</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> tpl <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// @ts-ignore</span>  <span class="token comment">// 自定义组件库中默认的schmea</span>  <span class="token keyword">const</span> cSchema <span class="token operator">=</span> schema<span class="token punctuation">[</span>tpl<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> drag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDrag</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> ItemTypes<span class="token punctuation">.</span><span class="token constant">BOX</span><span class="token punctuation">,</span>    item<span class="token operator">:</span> <span class="token punctuation">&#123;</span> cSchema <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">collect</span><span class="token operator">:</span> <span class="token punctuation">(</span>monitor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      isDragging<span class="token operator">:</span> monitor<span class="token punctuation">.</span><span class="token function">isDragging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      handlerId<span class="token operator">:</span> monitor<span class="token punctuation">.</span><span class="token function">getHandlerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>drag<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>tpl<span class="token punctuation">.</span>displayName<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，直接遍历<strong>template</strong>生成组件列表即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a44241ca4b44355a9116a66c463f165~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a44241ca4b44355a9116a66c463f165~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>上面的代码中我们可以看到通过<strong>react-dnd</strong>的<code>useDrag</code> 传输了对应的<strong>默认 schema</strong>到<code>item</code>属性中。这是组件能在画布中展示的核心逻辑，对应到<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/features/Editor/index.tsx">画布容器</a>中，有对应的<code>useDrop</code>来接收这个<code>item</code></p><p>代码实现如下:</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// ...</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> drop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDrop</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  accept<span class="token operator">:</span> ItemTypes<span class="token punctuation">.</span><span class="token constant">BOX</span><span class="token punctuation">,</span>  <span class="token function-variable function">drop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> cSchema <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> monitor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span> <span class="token operator">=</span> monitor<span class="token punctuation">.</span><span class="token function">getClientOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 拷贝一下schema数据，避免指针出错</span>    <span class="token function">addSchema</span><span class="token punctuation">(</span><span class="token function">clone</span><span class="token punctuation">(</span>cSchema<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">collect</span><span class="token operator">:</span> <span class="token punctuation">(</span>monitor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    isOver<span class="token operator">:</span> monitor<span class="token punctuation">.</span><span class="token function">isOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    canDrop<span class="token operator">:</span> monitor<span class="token punctuation">.</span><span class="token function">canDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到了<strong>Schema</strong>数据后，我们通过一个<code>schemaList</code>来保存插入的数据。然后就是通过遍历<code>schemaList</code>来生成对应的组件。这里的组件，就是我们在另一个子项目中的自定义组件库中的一个组件。下面是主要逻辑</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token punctuation">&#123;</span>  schemaList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Material</span></span>        <span class="token attr-name">onMouseDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleMouseDown</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> schema<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>schema<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">schema</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>schema<span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-可拖拽"><a href="#4-可拖拽" class="headerlink" title="4. 可拖拽"></a>4. 可拖拽</h3><p>上面只是简单的实现了将组件拖拽到了画布中。但是，我们希望的是在画布中也可以拖拽组件来完成布局。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/918d53da2b634e5bb65a0ee97554fbce~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/918d53da2b634e5bb65a0ee97554fbce~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="拖拽.gif"></p><p>因为我们采用的是定位的布局方式，那么实际需要的就是<strong>移动的元素位于画布的坐标</strong><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97cef5eafe33455398b10b2ba782134e~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97cef5eafe33455398b10b2ba782134e~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="截屏2023-03-10 11.19.00.png"></p><p>获取<code>left</code>和<code>top</code>主要实现逻辑大致如下：</p><ol><li>监听<code>mousedown</code>事件</li><li>获取到画布位于浏览器的坐标</li><li>通过 1 获取到鼠标位于画布的坐标</li><li>通过 2 获取到鼠标位于当前元素的坐标</li><li>在<code>mousedown</code>中监听<code>mousemove</code>事件</li><li>通过<code>mousemove</code> 的事件对象和 画布位于浏览器的坐标计算出 鼠标在画布中移动的坐标</li><li>然后然后再通过 6 的坐标 减去 4 的坐标 获取到移动元素位于画布的坐标</li><li>处理超出画布的边界情况</li><li>在<code>mousedown</code>中监听<code>mouseup</code>事件，并解绑<code>mousemove</code>和<code>mouseup</code></li></ol><p>我们看<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/features/Editor/index.tsx#L131">核心代码实现</a>:</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 处理画布内元素移动</span><span class="token keyword">const</span> <span class="token function-variable function">handleMouseDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setCurSchemaId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开右击键</span>    <span class="token function">setMenuTag</span><span class="token punctuation">(</span><span class="token constant">ITEM_MENU_TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">toggleRightClick</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">selectCurSchema</span><span class="token punctuation">(</span>schemaList<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> Schema<span class="token punctuation">;</span>  <span class="token comment">// 计算鼠标位于画布中的坐标</span>  <span class="token keyword">const</span> pointX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> canvasInfo<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">const</span> pointY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> canvasInfo<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token comment">// 获取鼠标位于当前元素的位置</span>  <span class="token keyword">const</span> targetX <span class="token operator">=</span> pointX <span class="token operator">-</span> schema<span class="token operator">?.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token keyword">const</span> targetY <span class="token operator">=</span> pointY <span class="token operator">-</span> schema<span class="token operator">?.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token punctuation">(</span>moveEvent<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    moveEvent<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> moveX <span class="token operator">=</span> moveEvent<span class="token punctuation">.</span>clientX <span class="token operator">-</span> canvasInfo<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">const</span> moveY <span class="token operator">=</span> moveEvent<span class="token punctuation">.</span>clientY <span class="token operator">-</span> canvasInfo<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token comment">// 计算元素最后的坐标</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> moveX <span class="token operator">-</span> targetX<span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> moveY <span class="token operator">-</span> targetY<span class="token punctuation">;</span>    <span class="token comment">// 处理超出画布的边界情况</span>    <span class="token keyword">const</span> caclRes <span class="token operator">=</span> <span class="token function">calcPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> caclRes<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    y <span class="token operator">=</span> caclRes<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">updateSchemaPos</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">up</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-放大缩小"><a href="#5-放大缩小" class="headerlink" title="5. 放大缩小"></a>5. 放大缩小</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edb2c819f1044d558eacd207e6a6d35d~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edb2c819f1044d558eacd207e6a6d35d~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="放大缩小.gif"></p><p>它的实现思路是通过在拖拽组件的外面包裹一个节点，然后再加上三个 point(圆点)，通过当前组件的 schema 计算出包裹层的坐标，然后将三个 point 依据包裹层定位，再通过在 point 上添加对应的事件来监听即可，这里就不贴代码了。如果想看实现细节可直接到 <a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/features/Editor/PointsWrapper.tsx#L102">PointWrapper</a> 查看</p><h3 id="6-组件属性编辑"><a href="#6-组件属性编辑" class="headerlink" title="6. 组件属性编辑"></a>6. 组件属性编辑</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2364576baab41779974dcde5a67e8a5~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2364576baab41779974dcde5a67e8a5~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="样式编辑.gif"></p><p>当我们选中画布中的一个组件时，右侧就会显示出当前组件对应的 schema，目前只实现了样式的编辑。<br>实现这个功能的核心就是需要定义与样式对应的 map<br><a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/utils/attr.ts#L2">styleMap</a></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> styleMap<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  rotate<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"旋转角度"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  width<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"宽"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  height<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"高"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  color<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"颜色"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"color"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  backgroundColor<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"背景色"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"color"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  borderWidth<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"边框宽度"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  borderStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"边框风格"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"select"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  borderColor<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"边框颜色"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"color"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  borderRadius<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"边框半径"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  fontSize<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"字体大小"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  fontWeight<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"字体粗细"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  lineHeight<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"行高"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  letterSpacing<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"字间距"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  textAlign<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"左右对齐"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"select"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  verticalAlign<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"上下对齐"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"select"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  opacity<span class="token operator">:</span> <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">"不透明度"</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">"number"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在组件中遍历这个<code>map</code>，并通过不同的<code>type</code>生成不同的输入框。然后将数据和功能绑定即可</p><p><a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/features/AttrToolTabs/Attrs.tsx">Attrs.tsx</a></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">renderComp</span> <span class="token operator">=</span> <span class="token punctuation">(</span>style<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> styleProp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> style<span class="token punctuation">[</span>styleProp<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputNumber</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>styleProp<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>styleProp<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"select"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>styleProp<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>optionMap<span class="token punctuation">[</span>styleProp<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"color"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorPicker</span></span>        <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>styleProp<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-图层管理"><a href="#7-图层管理" class="headerlink" title="7. 图层管理"></a>7. 图层管理</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edffd8923b4e46dab45253b24fa94353~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edffd8923b4e46dab45253b24fa94353~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图层.gif"></p><p>图层管理相对比较简单，因为我们是基于<code>absolute</code>定位做的。且已经有了对应<code>schemaList</code>数据，那么我们需要做的就是移动当前组件对应的<code>schema</code>数据在<code>schemaList</code>中的数据就行了</p><p>核心的实现就是一个<code>[swapSchema](https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/features/Editor/editor.slice.ts)</code>方法，通过数据的索引切换位置</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function-variable function">swapSchema</span><span class="token operator">:</span> <span class="token punctuation">(</span>  state<span class="token punctuation">,</span>  action<span class="token operator">:</span> PayloadAction<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> curIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> targetIdx<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> curIdx<span class="token punctuation">,</span> targetIdx <span class="token punctuation">&#125;</span> <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> state<span class="token punctuation">.</span>schemaList<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>  state<span class="token punctuation">.</span>schemaList<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">.</span>schemaList<span class="token punctuation">[</span>targetIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>  state<span class="token punctuation">.</span>schemaList<span class="token punctuation">[</span>targetIdx<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-复制粘贴"><a href="#8-复制粘贴" class="headerlink" title="8. 复制粘贴"></a>8. 复制粘贴</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57c2d9dbd1ff42348e5f99112b54c0ce~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57c2d9dbd1ff42348e5f99112b54c0ce~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="复制粘贴.gif"></p><p>复制粘贴的实现需要屏蔽浏览器的默认右击事件，所以我在项目中写了一个<a href="https://github.com/SaebaRyoo/VLayout/blob/main/packages/website/src/components/RightClickMenu/RightClick.tsx">RightClick 组件</a>,实现细节我就不贴代码了。</p><p>主要逻辑还是复制一份当前操作的组件的<code>schema</code>数据，然后粘贴的时候调用显示<code>RightClick</code>组件的方法，通过<code>RightClick</code>组件获取当前右击的鼠标位置，来确定粘贴后的组件的坐标。</p><h3 id="9-持久化存储和预览"><a href="#9-持久化存储和预览" class="headerlink" title="9. 持久化存储和预览"></a>9. 持久化存储和预览</h3><p>持久化存储使用的是<code>redux-presist</code><br>因为并没有接入后端，所以希望通过在 localStorage 中长期存储，防止刷新丢失数据。</p><p>预览页面的实现就是获取<code>schemaList</code>数据，然后生成最终的展示页面即可。</p><h3 id="10-事件绑定"><a href="#10-事件绑定" class="headerlink" title="10. 事件绑定"></a>10. 事件绑定</h3><p>关于事件绑定，在<code>schema</code>中，有一个<code>events</code>对象，我的思路是在<code>events</code>对象中存放如下结构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">onClick</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">window.location.href = 'http://www.baidu.com'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接通过编辑开放画布，让用户直接通过代码去做一些交互，比如上面的就是添加了一个点击事件，后面就是需要执行点击逻辑，在自定义组件中通过<code>new Function(string code)</code>构建一个 function。</p><p>然后给组件添加一个<code>isEdit</code>属性，让组件来判断是否为编辑状态，编辑状态下取消所有事件</p><p>关于安全问题，后续也可以通过定义各种功能的代码块的方式，限制用户只能添加特定的 js 逻辑。这样也方便扩展。</p><h2 id="发包"><a href="#发包" class="headerlink" title="发包"></a>发包</h2><p>需要先<code>npm login</code>登录</p><p>然后在根目录使用 lerna 命令<code>lerna publish --force-publish</code>,</p><p>使用<a href="https://lerna.js.org/docs/faq#how-do-i-retry-publishing-if-publish-fails">–force-publish</a>的原因如下</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过自己造轮子，确实收获颇多。当你独立去做一个项目的时候，你就会从整体上出发，思考项目的管理，技术的选型等等。最重要的是能够实践你的所学。</p><p><strong>PS: 后续会继续迭代未完成的功能，如果您有好的建议，感谢您能提出。如果觉得有帮助可以帮我点个赞或者<a href="https://github.com/SaebaRyoo/VLayout">star</a></strong></p><h2 id="站在巨人肩上"><a href="#站在巨人肩上" class="headerlink" title="站在巨人肩上"></a>站在巨人肩上</h2><ol><li><a href="https://github.com/woai3c/Front-end-articles/issues/19">可视化拖拽组件库的技术要点分析</a></li><li><a href="https://github.com/MrXujiang/h5-Dooring">h5-doording</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React如何利用浏览器的事件循环来实现并发特性</title>
      <link href="/2023/05/10/qian-duan/react/react-de-bing-fa-te-xing/"/>
      <url>/2023/05/10/qian-duan/react/react-de-bing-fa-te-xing/</url>
      
        <content type="html"><![CDATA[<p>本文只是用于将学习到的知识做一个梳理与总结</p><h2 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h2><p>现代浏览器通常采用多进程架构。每个进程都有独立的内存空间，相互隔离，提高浏览器的稳定性、安全性和性能。</p><p>以 Chrome 为例，浏览器的进程包含以下几个主要进程：</p><ul><li>浏览器主进程: 负责协调整个浏览器的运行，包括用户界面、网络请求、子进程的创建和销毁等。</li><li>渲染进程: 将 HTML&#x2F;CSS&#x2F;JS 转化为用户可以交互的网页</li><li>网络进程: 处理网络请求、响应、DNS 等</li><li>GPU 进程:负责处理图形渲染相关的任务，如 2D、3D 绘图等</li><li>插件进程:运行浏览器插件</li></ul><h2 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h2><p>对于我们的页面来说，最重要的就是<code>渲染进程</code>，它包含了以下的多个<code>线程</code>:</p><ol><li>主线程：负责处理用户输入、JavaScript 执行和页面布局计算等任务，是渲染进程中最重要的线程之一。</li><li>渲染线程：负责将 HTML、CSS 和 JavaScript 转换为可视化的页面，其中包括页面布局、样式计算、绘制和合成等任务。</li><li>合成线程：负责将页面中的多个图层合成为最终的显示内容，并将其发送到 GPU 进行渲染。</li><li>JavaScript 引擎线程：JavaScript 引擎线程负责解析和执行页面中的 JavaScript 代码</li><li>事件线程：负责处理用户输入事件，如鼠标点击、键盘输入等，以及页面中的事件触发和处理</li><li>IO 线程: 负责接收其他进程传进来的消息</li><li>…</li></ol><p><strong>在这当中，主线程最为繁忙，既要处理 DOM，又要计算样式，还要处理布局，同时还需要处理 JavaScript 任务以及各种输入事件</strong>。而浏览器则通过在<code>主线程</code>中实现<code>消息队列</code>和<code>事件循环系统</code>来调度这么多不同类型的任务。</p><p>我们可以通过下面的图片来了解<code>主线程</code>、<code>事件循环</code>、<code>消息队列</code>和其他线程之间的关系</p><p><img src="/imgs/react/1.png" class="lazyload placeholder" data-srcset="/imgs/react/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>但是，<code>消息队列</code>是<strong>先进先出</strong>的。<code>主线程</code>所有执行任务都来自于<code>消息队列</code>。会面临以下两个问题</p><h3 id="1-如何处理高优先级的任务"><a href="#1-如何处理高优先级的任务" class="headerlink" title="1. 如何处理高优先级的任务"></a>1. 如何处理<strong>高优先级的任务</strong></h3><p>比如，如何监控 DOM 节点的变化情况（节点的插入、修改、删除等动态变化），然后根据变化来处理相应的业务逻辑。一个通用设计就是利用 js 设计一套监听接口，当变化发生时，渲染引擎同步调用这些接口，这是一个典型的观察者模式。</p><p>不过这个模式有个问题，因为 DOM 变化非常频繁，如果每次发生变化的时候，都直接调用相应的 JavaScript 接口，那么这个当前的任务执行时间会被拉长，从而导致<strong>执行效率的下降</strong>。如果将这些 DOM 变化做成异步的消息事件，添加到消息队列的尾部，那么又会影响到监控的实时性，因为在添加到消息队列的过程中，可能前面就有很多任务在排队了。</p><p>这也就是说，如果 DOM 发生变化，采用同步通知的方式，会影响当前任务的<strong>执行效率</strong>；如果采用异步方式，又会影响到<strong>监控的实时性</strong>。</p><h3 id="2-如何解决单个任务执行时长过久的问题。"><a href="#2-如何解决单个任务执行时长过久的问题。" class="headerlink" title="2. 如何解决单个任务执行时长过久的问题。"></a>2. 如何解决单个任务执行时长过久的问题。</h3><p><img src="/imgs/react/2.png" class="lazyload placeholder" data-srcset="/imgs/react/2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>从图中可以看到，所有任务都是在单线程中执行的，而由于每一帧的时间有限，如果某一个 js 任务非常的耗时，那么下面的任务(DOM 解析、JS 事件、布局计算、用户输入事件等)就需要等待很长时间。这也就是我们页面中<strong>卡顿</strong>的由来。</p><p>第一个问题就可以通过下面的<code>微任务</code>来解决</p><h2 id="宏任务，微任务"><a href="#宏任务，微任务" class="headerlink" title="宏任务，微任务"></a>宏任务，微任务</h2><p>首先，我们需要知道<code>任务队列</code>中包含有以下两种类型的任务</p><p><strong>宏任务</strong></p><ul><li>渲染事件（如解析 DOM、计算布局、绘制）；</li><li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）；</li><li>JavaScript 脚本执行事件；</li><li>网络请求完成、文件读写完成事件。</li><li><code>setTimeout</code>的回调函数属于<code>宏任务</code></li></ul><p><strong>微任务</strong></p><ul><li><code>Promise</code>的回调属于<code>微任务</code></li><li><code>MutationObserver</code> 的回调函数：当被观察的 DOM 节点发生变化时，<code>MutationObserver</code> 的回调函数会被添加到微任务队列中。</li><li><code>queueMicrotask</code> 方法：该方法可以将回调函数添加到微任务队列中，等待执行。该方法是 ES2020 标准中新增的。</li></ul><p><code>宏任务</code>与<code>微任务</code>的最主要区别在于它们的<strong>执行时机</strong></p><p><code>宏任务</code>是添加一个新的任务到<code>消息队列</code>中，如果使用<code>setTimeout</code>来异步执行一个操作时，时间间隔无法精准掌控，对于一些<code>高实时性</code>的需求不太符合。比如你在程序中使用<code>setTimeout</code>延迟<code>1000ms</code>去执行某个任务时，可能在这<code>1000ms</code>中已经触发了很多系统级的任务，它们已经被插入到了<code>消息队列</code>中。等到过了<code>1000ms</code>后<code>setTimeout</code>才将会它的回调插入到<code>消息队列</code>中，这就需要等待队列前的任务全部执行完了才能到它的回调</p><p><code>微任务</code>是 在当前<code>宏任务</code>结束前再执行<code>微任务</code>，每个<code>宏任务</code>都关联了一个<code>微任务队列</code>。所以，只要在当前<code>宏任务</code>中触发了<code>微任务</code>，所有微任务的回调都会被添加到<code>微任务队列</code>中等待执行。这样，你再怎么交互，生成的<code>宏任务</code>都会排在当前的<code>宏任务</code>之后。这样，<code>实时性</code>问题就解决了。</p><h2 id="React-如何利用浏览器的特性来做“并发”"><a href="#React-如何利用浏览器的特性来做“并发”" class="headerlink" title="React 如何利用浏览器的特性来做“并发”"></a>React 如何利用浏览器的特性来做“并发”</h2><p>在了解了前面关于浏览器的特性以及相关问题后。我们再回到 react 中看 React 为了<strong>并发特性</strong>做了哪些改动。</p><h3 id="time-slice-与-fiber"><a href="#time-slice-与-fiber" class="headerlink" title="time slice 与 fiber"></a>time slice 与 fiber</h3><p>在 react16 之前，一直是递归更新。而 16 之后，react 提出了一个新的概念 <strong>time slice</strong>，便于将任务切分，然后在浏览器的空闲时间来执行任务，超出了空闲时间则将剩余任务往后推。但由于<strong>递归更新中断后无法再继续</strong>，所以 react 重构了它的代码，将递归更新改成了 fiber 这种链表结构。这样即使是暂停了，还能从暂停出的链表继续执行。这样就解决了组件<code>单个执行任务过长</code>的问题。</p><h3 id="异步更新"><a href="#异步更新" class="headerlink" title="异步更新"></a>异步更新</h3><p>我们可以在 react 的<a href="https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberSyncTaskQueue.js#L23">react-reconciler 包</a>中找到<code>scheduleSyncCallback</code>方法，所有的<code>更新操作</code>都保存到了<code>syncQueue</code>队列中，然后通过<code>scheduleMicrotask</code>这个方法创建微任务，<code>flushSyncCallbacks</code>就是这个微任务的异步回调，而<code>flushSyncCallbacks</code>当中执行的就是所有的<code>更新操作</code>。这就解决了组件<code>更新效率</code>的问题。</p><h3 id="Scheduler-调度器"><a href="#Scheduler-调度器" class="headerlink" title="Scheduler 调度器"></a>Scheduler 调度器</h3><p>现在，有了可中断的任务，并且<code>同步任务</code>被放到了<code>微任务</code>中执行。而且因为一般主流浏览器刷新频率为 60Hz，即每 16.6ms（1000ms &#x2F; 60Hz）浏览器刷新一次。</p><p>所以 react 需要解决的就是如何利用每一帧中预留给 js 线程的时间来更新组件(在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L119">scheduler 源码</a>中，react 预留了 5ms)。当超过预留时间后，react 就会中断更新，等待下一帧的空闲时间继续从<code>被中断的fiber</code>处执行。这样就尽可能的避免了任务执行时间过长而出现<code>掉帧</code>、<code>卡顿</code>的现象</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>react 利用浏览器的渲染进程主线程的<code>事件循环</code>以及<code>宏任务</code>、<code>微任务</code>的特点，将原有的数据结构改变为<code>Fiber</code>这种可中断的链表结构。<br>并且通过将所有的<code>更新操作</code>使用<code>微任务</code>来执行，解决组件更新的<code>实时性</code>问题。然后再实现了<code>调度器</code>来完成任务的中断和继续来解决<code>任务执行时间过长</code>的问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://time.geekbang.org/column/intro/100033601?tab=catalog">浏览器工作原理与实践</a></li><li><a href="https://react.iamkasong.com/#%E5%AF%BC%E5%AD%A6%E8%A7%86%E9%A2%91">react 技术揭秘</a></li><li><a href="https://appjiz2zqrn2142.pc.xiaoe-tech.com/p/t_pc/goods_pc_detail/goods_detail/p_638035c1e4b07b05581d25db">从零实现 React 18</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React18中的useTransition和useDeferredValue</title>
      <link href="/2023/05/09/qian-duan/react/react18-zhong-de-usetransition-yu-usedeferredvalue/"/>
      <url>/2023/05/09/qian-duan/react/react18-zhong-de-usetransition-yu-usedeferredvalue/</url>
      
        <content type="html"><![CDATA[<p>React18 引入了一个关键概念 <code>并发性（Concurrency）</code>。 并发则涉及到多个<code>更新操作</code>的同时执行，这可以说是 React18 中最重要的功能。<br>除了并发，React18 新增了两个 hook ，也就是<code>useTransition</code>和<code>useDeferredValue</code>。它们的作用都是降低<code>更新操作</code>的优先级，但问题是，何时应该使用它们？</p><h2 id="并发-Concurrent"><a href="#并发-Concurrent" class="headerlink" title="并发(Concurrent)"></a>并发(Concurrent)</h2><p>在实现”并发”之前，渲染是同步的(<strong>所谓的同步，就是指如果 react 的某个组件执行时间长，它无法中断，会一直执行，直到组件完成渲染到 DOM。在这个过程中，由于 Javascript 是单线程的，因此渲染任务会占满 JavaScript 线程，阻塞浏览器的主线程，从而导致用户无法进行交互操作</strong>)。</p><p>然而，有了并发渲染（<strong>并发指的就是通过 time slice 将任务拆分为多个，然后 react 根据优先级来完成调度策略，将低优先级的任务先挂起，将高优先级的任务分配到浏览器主线程的一帧的空闲时间中去执行，如果浏览器在当前一帧中还有剩余的空闲时间，那么 React 就会利用空闲时间来执行剩下的低优先级的任务</strong>），react 的渲染和更新可以被中断和恢复。那么如果在执行某个组件更新过程中又有了新的更新请求到达。比如我们下面的<code>input输入事件</code>，那么 React 就会创建一个<code>新的更新版本</code>。这种情况下，在某个时间段内可能会同时存在多个<code>更新版本</code>。</p><p>为了优化上述问题，React 18 提供了新的 Hook 函数 <code>useTransition</code>，它可以将<code>多个版本的更新</code>打包到一起，在未来的某一帧空闲时间内执行，从而优化应用的性能和响应时间。而<code>useDeferredValue</code> 的作用是将某个值的更新推迟到未来的某个时间片内执行，从而避免不必要的重复渲染和性能开销。</p><h2 id="没有使用任何优化手段，同步更新"><a href="#没有使用任何优化手段，同步更新" class="headerlink" title="没有使用任何优化手段，同步更新"></a>没有使用任何优化手段，同步更新</h2><p>假设我们有一个包含从 0 到 19,999 数字的数组。这些数字在用户界面上显示为一个列表。该用户界面还有一个文本框，允许我们过滤这些数字。例如，我可以通过在文本框中输入数字 99 来过滤掉以 99 开头的数字。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useTransition <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setQuery</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span>          query <span class="token operator">?</span> <span class="token punctuation">(</span>            i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于数组中有 20,000 个元素，过滤将是一个有点耗时的过程。当我们试图在文本框中输入一个数字时，我们可以观察到这一点。输入的数值出现在文本框中会有一个滞后，因为每一个按键之后的渲染都会花费一些时间。</p><h2 id="useTransition"><a href="#useTransition" class="headerlink" title="useTransition"></a>useTransition</h2><p>接下来我们使用<code>useTransition</code>来修改一下上面的代码</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setQuery</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span>        query <span class="token operator">?</span> <span class="token punctuation">(</span>          i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>query<span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>isPending <span class="token operator">?</span> <span class="token string">"Loading..."</span> <span class="token operator">:</span> list<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面可以看到<code>useTransation</code>返回一个包含两个子项的数组。</p><p><code>isPending</code>: 告诉你目前是否有一些<code>更新操作</code>任然在等待中（尚未被 React 执行，并以较低的优先级处理）<br><code>startTransition</code>: React 会以一个较低的优先级调度被它包装的<code>更新操作</code>。</p><p>这样，就确保了用户和输入框的交互操作保持流畅。然后再通过<code>isPending</code>来判断是否可以更新 UI。</p><h2 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h2><p><code>useDeferredValue</code>的作用和<code>useTransition</code>一致，都是用于在不阻塞 UI 的情况下更新状态。但是使用场景不同。</p><p><code>useTransition</code>是让你能够完全控制哪个<code>更新操作</code>应该以一个比较低的优先级被调度。但是，在某些情况下，可能无法访问实际的<code>更新操作</code>（例如，状态是从父组件上传下来的）。这时候，就可以使用<code>useDeferredValue</code>来代替。</p><p>用 React 团队成员 Dan 的话说<code>useDeferredValue</code>主要是:</p><blockquote><p>useful when the value comes “from above” and you don’t actually have control over the corresponding setState call.</p></blockquote><p>它的意思就是: 当值来自 “上面”，而你实际上不能控制相应的 setState 调用时，这个方法很有用。</p><p>这就比较契合我们上面所举例子的场景。</p><p>那我们就需要将上面的例子改成如下:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useDeferredValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setQuery</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">query</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> query <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> defQuery <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span>        defQuery <span class="token operator">?</span> <span class="token punctuation">(</span>          i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>defQuery<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>defQuery<span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如上所述，<code>useTransition</code>直接控制<code>更新状态的代码</code>，而<code>useDeferredValue</code>控制一个受状态变化影响的值。它们做的是同样的事,帮助提高用户体验(UX)，不应该同时使用这两者。</p><p>相反，如果你可以访问<code>更新操作</code>，并且有一些<code>更新操作</code>应该以较低的优先级处理，就使用<code>useTransition</code>。如果你没有这种权限，就使用<code>useDeferredValue</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.bitsrc.io/usetransition-and-usedeferredvalue-in-react-18-5d8a09f8c3a7">useTransition and useDeferredValue in React 18</a><br><a href="https://blog.openreplay.com/usetransition-vs-usedeferredvalue-in-react-18/">UseTransition() Vs UseDeferredValue() In React 18</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端日常-基于React-Router(V6)的权限控制</title>
      <link href="/2023/05/02/qian-duan/react/react-router-quan-xian-xiang-guan/"/>
      <url>/2023/05/02/qian-duan/react/react-router-quan-xian-xiang-guan/</url>
      
        <content type="html"><![CDATA[<p>在一个后台管理系统中，安全是很重要的。不光后端需要做权限校验，前端也需要做权限控制。<br>我们可以大致将权限分为 3 种： <strong>接口权限</strong>、<strong>页面权限</strong>、<strong>按钮权限</strong>。</p><p>在这当中，前端主要关注点则是<strong>页面权限</strong>，<strong>按钮权限</strong>，而前端做这些的主要目的则是：</p><ul><li>禁止用户访问一些无权限访问的页面</li><li>过滤不必要的请求，减少服务器压力</li></ul><p>这是具体的<a href="https://github.com/SaebaRyoo/Demos/tree/main/react-auth-demo/client">代码实现</a>，下面主要是思路的整理，以及一些核心实现</p><h2 id="接口权限"><a href="#接口权限" class="headerlink" title="接口权限"></a>接口权限</h2><p>接口权限一般是用户登录后，后端根据账号密码来<code>认证</code>和<code>授权</code>，并颁发<code>token</code>或者<code>session</code>等来保存用户登录状态。</p><p>后续客户端请求一般是在<code>header</code>中携带<code>token</code>，后端通过对 token 进行<code>鉴权</code>是否合法来控制是否可以访问接口。</p><p>最后，一般后台会通过用户的角色等来做<code>权限控制</code>。</p><p>而需要我们前端做的是在请求中携带好登录后回传的<code>token</code>,我们以<strong>axios</strong>为例</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"access_token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> request<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//token过期或者错误</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面权限"><a href="#页面权限" class="headerlink" title="页面权限"></a>页面权限</h2><p>首先，我们先完成<code>路由配置</code></p><p><code>src/routes/routes.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RoutesType</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  element<span class="token operator">:</span> ReactElement<span class="token punctuation">;</span>  children<span class="token operator">?</span><span class="token operator">:</span> RoutesType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> routers<span class="token operator">:</span> RoutesType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/foo/auth-button"</span><span class="token punctuation">,</span>        element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyAuthButtonPage</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/protected"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Protected</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/unauthorized"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UnauthorizedPage</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 配置404，需要放在最后</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/*"</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NotFound</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是基于<code>路由配置</code>来生成对应的路由组件</p><p><code>src/routes/root.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">Root</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个有子节点的Route</span>  <span class="token keyword">const</span> <span class="token function-variable function">CreateHasChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>          <span class="token attr-name">index</span>          <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRoute</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">              </span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>element<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthRoute</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">&#125;</span></span>        <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>route<span class="token operator">?.</span>children <span class="token operator">&amp;&amp;</span> <span class="token function">RouteAuthFun</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个没有子节点的Route</span>  <span class="token keyword">const</span> <span class="token function-variable function">CreateNoChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthRoute</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>element<span class="token punctuation">&#125;</span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthRoute</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 处理我们的routers</span>  <span class="token keyword">const</span> <span class="token function-variable function">RouteAuthFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>routeList<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> routeList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>route<span class="token operator">:</span> RoutesType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> element<span class="token operator">:</span> ReactElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>route<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        element <span class="token operator">=</span> <span class="token function">CreateHasChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        element <span class="token operator">=</span> <span class="token function">CreateNoChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">RouteAuthFun</span><span class="token punctuation">(</span>routers<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是只需要在入口中写入<code>Root</code>组件即可</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Root</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只是完成了基本的配置，下面才是权限相关</p><p>路由权限主要分为两个方向：</p><h3 id="1-菜单权限"><a href="#1-菜单权限" class="headerlink" title="1. 菜单权限"></a>1. 菜单权限</h3><p>一般来说，后台通过维护<code>user</code>、<code>role</code>、<code>menu</code>、<code>user_role</code>、<code>menu_role</code>这几张表来做相应的权限设计。</p><p>所以，在登录接口中，一般后台会返回用户对应的<code>角色</code>、<code>菜单</code>等信息。我们通过<code>redux-toolkit</code>保存登录数据。大致信息如下(<strong>未真正请求接口，只写了初始数据</strong>):</p><p><code>src/pages/login/Login.slice.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">LoginState</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  role<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  menuLists<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Define the initial state using that type</span><span class="token class-name"><span class="token keyword">const</span></span> initialState<span class="token operator">:</span> LoginState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token string">"ryo"</span><span class="token punctuation">,</span>  role<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  menuLists<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-home"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-foo"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token string">"2-1"</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">"auth-button"</span><span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"icon-auth-button"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> <span class="token string">"/foo/auth-button"</span><span class="token punctuation">,</span>      parent_id<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>role</code>表示当前用户的角色,<code>menuLists</code>为用户可访问的菜单</p><p>然后在首页中生成菜单列表</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> getMenuItem <span class="token operator">=</span> <span class="token punctuation">(</span>menus<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> menus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menu<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span><span class="token function">getMenuItem</span><span class="token punctuation">(</span>menu<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>menu<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> parentId <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent_id <span class="token operator">===</span> parentId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>item <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      menu<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> menu<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> menuLists <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuTree <span class="token operator">=</span> <span class="token function">genMenu</span><span class="token punctuation">(</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">home page</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token function">getMenuItem</span><span class="token punctuation">(</span>menuTree<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，只<strong>根据权限列表来动态生成菜单</strong>并不能完全实现权限相关的目的。用户还可以通过<strong>在地址栏输入 url</strong>的方式来访问没有在菜单中显示的页面。</p><h3 id="2-路由权限"><a href="#2-路由权限" class="headerlink" title="2. 路由权限"></a>2. 路由权限</h3><p>我们可以通过实现一个<code>AuthRoute</code>来解决上述的问题。</p><p>首先是实现一个<code>AuthRoute</code></p><p><code>src/routes/AuthRoute.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 无需权限认证的白名单</span><span class="token comment">// 一般是前端的一些报错页</span><span class="token keyword">const</span> <span class="token constant">DONT_NEED_AUTHORIZED_PAGE</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/unauthorized"</span><span class="token punctuation">,</span> <span class="token string">"/*"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">AuthRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> children<span class="token punctuation">,</span> path <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 该flag用于控制 受保护页面的渲染时机，需要等待useEffect中所有的权限验证条件完成后才表示可以渲染</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>canRender<span class="token punctuation">,</span> setRenderFlag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuLists <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>menuLists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> menuUrls <span class="token operator">=</span> menuLists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span> <span class="token operator">=></span> menu<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">// 在白名单中的无需验证，直接跳转</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DONT_NEED_AUTHORIZED_PAGE</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用户未登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"token 过期，请重新登录!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 已登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 已登录需要通过logout来控制退出登录或者是token过期返回登录界面</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 已登录，根据后台传的可访问列表做判断</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>menuUrls<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/unauthorized"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 当上面的权限控制通过后，再渲染受保护的页面</span>    <span class="token function">setRenderFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>token<span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canRender<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> children<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AuthRoute<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在我们生成<code>Route</code>的时候在<code>element</code>属性中使用<code>AuthRoute</code>,这一步，我们已经在上面<code>src/routes/root.tsx</code>这个文件中写进去了。</p><p>到这里，我们就通过实现<code>AuthRoute</code>来拦截页面访问，做权限相关处理。</p><p>然后我们可以运行该<a href="https://github.com/SaebaRyoo/Demos/tree/main/react-auth-demo/client">仓库</a><br>代码来看效果。</p><p>目前没有实现登录相关功能，所以需要手动在<code>localStorage</code>中添加<code>access_token</code>来模拟登录。</p><ul><li><strong>如果没有登录(没有 access_token)或者登录已过期，访问任何路由都会被路由到<code>/login</code>。</strong></li><li><strong>如果已经登录，但是再访问登录页面，会被路由到<code>/</code>首页</strong></li><li><strong>如果已经登录，但是访问了一个你无访问的页面,如<code>/protected</code>，则会被路由到<code>/unauthorized</code>页面</strong></li></ul><h2 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h2><p>按钮级别的权限，根据当前用户角色的不同，可以看到的按钮和操作不同。这里我只简单实现了一个<code>AuthButton</code></p><p><code>src/coponents/auth-button/index.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> ButtonProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useAppSelector <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../hooks/typedHooks"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">AuthButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">ButtonProps</span> <span class="token punctuation">&#123;</span>  roles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> AuthButton<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>AuthButtonProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> roles<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>roles<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AuthButton<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法如下，新增了一个<code>roles</code>属性，表示哪些角色可以看见该按钮</p><p><code>src/pages/foo/auth-button.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> ButtonPermission<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Button Permission</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">编辑</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthButton</span></span> <span class="token attr-name">roles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">删除</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ButtonPermission<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以手动的修改<code>Login.slice.ts</code>中的<code>role</code>来查看不同的情况。</p><p>这种实现方式比较简单，大伙可以根据自己的具体场景选择更好的方案</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.hyhblog.cn/2018/04/25/user_login_auth_terms/">认证、授权、鉴权和权限控制</a></li><li><a href="https://segmentfault.com/a/1190000020887109">https://segmentfault.com/a/1190000020887109</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常见问题</title>
      <link href="/2023/04/12/mian-shi-zong-jie/3-js/"/>
      <url>/2023/04/12/mian-shi-zong-jie/3-js/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包-和-作用域"><a href="#闭包-和-作用域" class="headerlink" title="闭包 和 作用域"></a>闭包 和 作用域</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是指在程序中定义变量的区域，作用域规定了变量与函数的活动范围。</p><p>在 es6 之前，js 中只有全局作用域和函数作用域。在这之后，引入了 let 和 const ，它们会创建块级作用域。</p><p>在函数调用栈中，当内部函数查找一个外部变量，则 js 引擎就会向上级作用域中查找。这个查找的链条称为作用域链。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包的目的是能在函数的外部作用域中访问函数内部的上下文。通过作用域以及作用域链，我们知道了当前作用域中（outer）的上下文(变量)，会在当前调用栈结束调用后被 gc 销毁。但是通过作用域链，我们可以在一个内部函数（inner）中访问 outer 作用域中的变量，创建引用关系。这样，就算调用栈执行完毕后也不会销毁 outer 中被引用的执行上下文。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// outer</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getA</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// inner</span>      <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">setA</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// inner</span>      a <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？"><a href="#你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？" class="headerlink" title="你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？"></a>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</h3><p>正常些 js 方法时使用模块模式，一个 IIFE 就算是一个模块，互相之间不影响。</p><p>继承在 react 跟 node 中也是比较常用的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> jspy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">incrementCount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    _count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">getCount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">incrementCount</span><span class="token operator">:</span> incrementCount<span class="token punctuation">,</span>    <span class="token literal-property property">getCount</span><span class="token operator">:</span> getCount<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数的典型用法"><a href="#匿名函数的典型用法" class="headerlink" title="匿名函数的典型用法"></a>匿名函数的典型用法</h3><p>匿名函数就是没有名称的函数, 如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宿主对象-host-object-和原生对象-native-object-、内置对象的区别"><a href="#宿主对象-host-object-和原生对象-native-object-、内置对象的区别" class="headerlink" title="宿主对象(host object) 和原生对象(native object)、内置对象的区别"></a><a href="https://blog.csdn.net/weixin_40387601/article/details/80431670">宿主对象(host object) 和原生对象(native object)、内置对象的区别</a></h3><h3 id="请指出以下代码的区别：function-Person-、var-person-Person-、var-person-new-Person-？"><a href="#请指出以下代码的区别：function-Person-、var-person-Person-、var-person-new-Person-？" class="headerlink" title="请指出以下代码的区别：function Person(){}、var person &#x3D; Person()、var person &#x3D; new Person()？"></a>请指出以下代码的区别：function Person(){}、var person &#x3D; Person()、var person &#x3D; new Person()？</h3><ol><li>定义了一个名为 Person 的函数</li><li>普通的调用 Person 函数，并将返回值赋值到 person 变量上。</li><li>使用 new 关键字，将 Person 作为构造函数实例化</li></ol><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/11">call, apply 实现</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/12">bind 实现</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this传参为null则指向window</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arguments['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn('</span> <span class="token operator">+</span> args <span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arr['</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn(+'</span> args <span class="token string">'+)'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> outerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例</span>    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> outerArgs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="new-实现"><a href="#new-实现" class="headerlink" title="new 实现"></a><a href="https://github.com/mqyqingfeng/Blog/issues/13">new 实现</a></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fakeNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> Constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> ret <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数防抖和函数节流"><a href="#函数防抖和函数节流" class="headerlink" title="函数防抖和函数节流"></a>函数防抖和函数节流</h3><p><strong>防抖函数概念：</strong></p><blockquote><p>该函数只能在指定延时结束后才能调用，如果在过程中重复调用，则重新计时。</p></blockquote><p><strong>应用场景:</strong></p><ol><li>用户在搜索框输入时的数据查询，指定<code>n</code> 毫秒 延时，只能在输入完后过了<code>n</code>毫秒后才会去搜索，中间的持续输入则会重新计时</li><li>在监听 window.onresize 事件，并触发某些操作时。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> timer<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_self<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数节流:</strong></p><blockquote><p>在规定时间内，函数只能被调用一次。如果单位时间内多次触发，则忽略</p></blockquote><p><strong>应用场景：</strong></p><ol><li>点击搜索按钮时的防重复。</li><li>监听 scroll 事件时</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">>=</span> interval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      last <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么情况下会使用-document-write"><a href="#什么情况下会使用-document-write" class="headerlink" title="什么情况下会使用 document.write()"></a>什么情况下会使用 document.write()</h3><ul><li>加载需要配合 js 脚本使用的外部 css 文件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>scirpt<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;link  rel="stylesheet" href="style_neads_js.css">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在新打开的页面中写入数据时<br>由于 document.write 会重写整个页面，异步调用会影响本页面的文档，如果在新窗口空白页调用，就没影响了。新开一个窗口，把本页面取到的数据在新窗口展示。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="特性检测、特性推断、浏览器-UA-字符串嗅探"><a href="#特性检测、特性推断、浏览器-UA-字符串嗅探" class="headerlink" title="特性检测、特性推断、浏览器 UA 字符串嗅探"></a><a href="https://blog.csdn.net/qq402164452/article/details/54882332">特性检测、特性推断、浏览器 UA 字符串嗅探</a></h3><h3 id="Ajax-工作原理"><a href="#Ajax-工作原理" class="headerlink" title="Ajax 工作原理"></a><a href="https://cloud.tencent.com/developer/article/1129601">Ajax 工作原理</a></h3><h3 id="跨域方案"><a href="#跨域方案" class="headerlink" title="跨域方案"></a><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1">跨域方案</a></h3><p><a href="https://www.cnblogs.com/xiaohuochai/p/6567712.html">图片 Ping</a><br>图片 Ping 是客户端向服务器的单向通信，因为 src 请求资源不属于同源策略，所以一般可以用来做埋点、前端监控，比如监听网页的 PV(Page View)，UV(Unique Visitor)。<br>最好是采用 1 * 1 像素的透明 gif 图，因为：</p><ol><li>能够完成整个 HTTP 请求+响应（尽管不需要响应内容）</li><li>触发 GET 请求之后不需要获取和处理数据、服务器也不需要发送数据</li><li>跨域友好</li><li>执行过程无阻塞</li><li>相比 XMLHttpRequest 对象发送 GET 请求，性能上更好</li><li>GIF 的最低合法体积最小（最小的 BMP 文件需要 74 个字节，PNG 需要 67 个字节，而合法的 GIF，只需要 43 个字节）</li></ol><h3 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a><a href="https://github.com/lxnxbnq/blog/issues/12">变量声明提升</a></h3><h3 id="js-冒泡机制"><a href="#js-冒泡机制" class="headerlink" title="js 冒泡机制"></a><a href="https://blog.csdn.net/luanlouis/article/details/23927347">js 冒泡机制</a></h3><h3 id="property-属性-和-attribute-特性"><a href="#property-属性-和-attribute-特性" class="headerlink" title="property(属性)和 attribute(特性)"></a>property(属性)和 attribute(特性)</h3><ul><li><p>DOM 有其默认的基本属性，而这些属性就是所谓的“property”，无论如何，它们都会在初始化的时候再 DOM 对象上创建。</p></li><li><p>HTML 标签中定义的属性和值会保存该 DOM 对象的 attributes 属性里面；</p></li><li><p>这些 attribute 属性的 JavaScript 中的类型是 Attr，而不仅仅是保存属性名和值这么简单；</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_2<span class="token punctuation">"</span></span> <span class="token attr-name">sth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whatever<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> in2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"in_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>in2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// id: "in_2"</span><span class="token comment">// value: null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span>attibutes<span class="token punctuation">.</span>sth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'sth="whatever"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="document-load-和-document-DOMContentLoaded"><a href="#document-load-和-document-DOMContentLoaded" class="headerlink" title="document load 和 document DOMContentLoaded"></a>document load 和 document DOMContentLoaded</h3><ul><li>load 方法在网页中所有的资源（HTML,CSS,image）都完全加载后才触发</li><li>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载</li></ul><h3 id="和-有什么不同"><a href="#和-有什么不同" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 有什么不同"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 有什么不同</a></h3><h3 id="同源策略-same-origin-policy"><a href="#同源策略-same-origin-policy" class="headerlink" title="同源策略 (same-origin policy)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">同源策略 (same-origin policy)</a></h3><h3 id="strict-模式"><a href="#strict-模式" class="headerlink" title="strict 模式"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">strict 模式</a></h3><h3 id="为何通常会认为保留网站现有的全局作用域-global-scope-不去改变它，是较好的选择"><a href="#为何通常会认为保留网站现有的全局作用域-global-scope-不去改变它，是较好的选择" class="headerlink" title="为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择"></a>为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择</h3><ul><li>减少命名冲突</li><li>有利于模块化</li></ul><h3 id="请解释什么是单页应用-single-page-app-以及如何使其对搜索引擎友好-SEO-friendly"><a href="#请解释什么是单页应用-single-page-app-以及如何使其对搜索引擎友好-SEO-friendly" class="headerlink" title="请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)"></a>请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)</h3><p>单页应用是指在浏览器中运行的应用，它们在使用期间不会重新加载页面。像所有的应用一样，它旨在帮助用户完成任务，比如“编写文档”或者“管理 Web 服务器”。可以认为单页应用是一种从 Web 服务器加载的富客户端</p><p>使用<a href="http://www.alloyteam.com/2015/10/8783/">服务端渲染</a></p><h3 id="Promise-如何使用，实现"><a href="#Promise-如何使用，实现" class="headerlink" title="Promise 如何使用，实现"></a><a href="https://github.com/xieranmaya/blog/issues/3">Promise 如何使用，实现</a></h3><h3 id="可变对象和不可变对象"><a href="#可变对象和不可变对象" class="headerlink" title="可变对象和不可变对象"></a><a href="https://blog.csdn.net/hustzw07/article/details/77946698">可变对象和不可变对象</a></h3><h4 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h4><p>我们知道，JavaScript 中对象是弱类型的。一般情况下，可以不受限制的为对象添加属性，修改属性，删除属性。大部分情况下，我们使用的都是可变对象。</p><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><p>对应的，我们不希望代码中某些对象被任意修改，比如添加、修改、删除等。这就是我们的不可变对象。JavaScript 为我们提供了一些原生方法，借助它们可以讲一些可变对象转变成不可变对象。一共有三种：不可扩展，密封，冻结。</p><ol><li><strong>Object.preventExtensions(obj)</strong> 不可扩展（无法阻止深层属性的扩展）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止扩展属性</span>person1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;name: 'william'&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"william"</span><span class="token punctuation">,</span>  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">"183cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>person2<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"male"</span><span class="token punctuation">;</span> <span class="token comment">// 可以扩展深层属性</span>person2<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sex<span class="token punctuation">;</span> <span class="token comment">// male</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p><strong>Object.seal(obj)</strong> 方法可以让一个对象密封，并返回被密封后的对象。密封对象将会阻止向对象添加新的属性。另外也会 改变属性的 configurable 描述。</p></li><li><p><strong>Object.freeze(obj)</strong> 方法可以冻结一个对象。冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。</p></li></ol><h3 id="什么是事件循环"><a href="#什么是事件循环" class="headerlink" title="什么是事件循环"></a><a href="https://zhuanlan.zhihu.com/p/33058983">什么是事件循环</a></h3><h3 id="let-var-const"><a href="#let-var-const" class="headerlink" title="let var const"></a><a href="https://github.com/lxnxbnq/blog/issues/12">let var const</a></h3><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">数组的方法</a></h3><h3 id="web-worker"><a href="#web-worker" class="headerlink" title="web worker"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">web worker</a></h3><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a><a href="https://github.com/mqyqingfeng/Blog/issues/42">函数柯里化</a></h3><h3 id="创建对象的三种方法"><a href="#创建对象的三种方法" class="headerlink" title="创建对象的三种方法"></a>创建对象的三种方法</h3><ul><li>构造函数: <code>var obj = new Object();</code></li><li>对象字面量: <code>var obj = &#123;&#125;;</code></li><li><code>Object.create(obj[, otherobj])</code>;</li></ul><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a><a href="https://juejin.im/post/59ac1c4ef265da248e75892b">深拷贝和浅拷贝</a></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"william"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token literal-property property">other</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">work</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span>    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"胡萝卜"</span><span class="token punctuation">,</span> <span class="token string">"西瓜"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> newData<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span> <span class="token operator">&amp;&amp;</span>        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Array]"</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newData<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"[object Array]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span> <span class="token operator">&amp;&amp;</span>        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Array]"</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        newData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> newData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网页上各种高度"><a href="#网页上各种高度" class="headerlink" title="网页上各种高度"></a><a href="https://blog.csdn.net/gs6511/article/details/53900761">网页上各种高度</a></h3><h3 id="实现页面加载进度条"><a href="#实现页面加载进度条" class="headerlink" title="实现页面加载进度条"></a><a href="https://github.com/rstacruz/nprogress/">实现页面加载进度条</a></h3><h3 id="箭头函数和普通函数有什么区别"><a href="#箭头函数和普通函数有什么区别" class="headerlink" title="箭头函数和普通函数有什么区别"></a>箭头函数和普通函数有什么区别</h3><p><a href="https://zhuanlan.zhihu.com/p/59376805">箭头函数</a></p><table><thead><tr><th></th><th>箭头函数</th><th>普通函数</th></tr></thead><tbody><tr><td>写法</td><td>var fn &#x3D; () &#x3D;&gt; {}</td><td>function fn() {}</td></tr><tr><td>arguments</td><td>无</td><td>有</td></tr><tr><td>this</td><td>运行时向父作用域查找，直到 window</td><td>1. 作为函数调用，指向 window 2. 作为对象的方法调用，指向当前对象</td></tr><tr><td>new</td><td>不能使用</td><td>函数作为构造函数</td></tr><tr><td>原型属性</td><td>没有原型属性<code>console.log(fn.prototype) //undefined</code></td><td>有原型属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化篇</title>
      <link href="/2023/04/12/mian-shi-zong-jie/5-qian-duan-xing-neng-you-hua/"/>
      <url>/2023/04/12/mian-shi-zong-jie/5-qian-duan-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="你会用什么工具来查找代码中的性能问题？"><a href="#你会用什么工具来查找代码中的性能问题？" class="headerlink" title="你会用什么工具来查找代码中的性能问题？"></a>你会用什么工具来查找代码中的性能问题？</h1><ol><li><strong>Network</strong></li></ol><p>首先可以通过 Network 查看各类资源的响应时间，看看是否是后端接口过慢导致的过慢。</p><ol start="2"><li><strong>Performance</strong></li></ol><p>可以通过 Performance 来记录页面的渲染快照。<br>如果是首页加载的白屏时间过长，那么可以将上面的时间线放在快照记录中白屏开始处和白屏结束的处，然后查看 network，看这次首次选人那中哪些静态资源或者接口占用时间过长。然后针对优化。<br>如果想看页面的解析、渲染时间以及函数的执行时间，那么可以打开 Main 的下拉选项。然后具体分析</p><hr><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><ol><li><p>高性能滚动 scroll</p><ol><li>防抖动：防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</li><li>节流函数：只允许一个函数在 X 毫秒内执行一次，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。</li><li>rAF：越 16.7ms 触发一次 handler，降低了可控性，但是提升了性能和精确度。</li><li>避免在 scroll 事件中修改样式属性，将样式操作从 scroll 事件中剥离</li><li>滑动过程中尝试使用 pointer-events: none 禁止鼠标事件 （这是一个 css 样式，用于禁止鼠标行为，比如 hover、click 失效，即元素不会变成鼠标事件的 target，这样增加滚动是的帧频，特别是移动端的时候。滚动时在 body 上添加 pointer-events: none，停止滚动时就去掉。）</li></ol></li><li><p>减少重排、重绘、合成<br><a href="https://segmentfault.com/a/1190000014520786">https://segmentfault.com/a/1190000014520786</a></p></li><li><p>css 动画和 js 动画区别</p><ol><li><p>功能涵盖面，JS 比 CSS3 大</p><ul><li><p>定义动画过程的@keyframes 不支持递归定义，如果有多种类似的动画过程，需要调节多个参数来生成的话，将会有很大的冗余（比如 jQuery Mobile 的动画方案），而 JS 则天然可以以一套函数实现多个不同的动画过程</p></li><li><p>时间尺度上，@keyframes 的动画粒度粗，而 JS 的动画粒度控制可以很细</p></li><li><p>CSS3 动画里被支持的时间函数非常少，不够灵活</p></li><li><p>以现有的接口，CSS3 动画无法做到支持两个以上的状态转化</p></li></ul></li><li><p>实现&#x2F;重构难度不一，CSS3 比 JS 更简单，性能调优方向固定</p></li><li><p>对于帧速表现不好的低版本浏览器，CSS3 可以做到自然降级，而 JS 则需要撰写额外代码</p></li><li><p>CSS 动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS 则需要自己写事件</p></li><li><p>CSS3 有兼容性问题，而 JS 大多时候没有兼容性问题</p></li></ol></li><li><p>将 css 资源,如<code>&lt;link&gt;</code>标签放置在<code>&lt;head&gt;</code>标签中，让页面逐步呈现，提高用户体验</p></li><li><p>页面中引入<code>&lt;script src=&#39;...&#39;&gt;&lt;/script&gt;</code>样式时最好的做法是加上<code>defer</code>，当为 <strong><code>&lt;script defer/&gt;</code></strong> 时，渲染进程不会停止 html 解析，而是并行下载 script，然后等到 html 解析完成后，<strong>DOMContentLoaded</strong> 事件触发之前执行。</p></li><li><p>使用懒函数</p></li></ol><h3 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h3><ol><li><p><a href="https://zhuanlan.zhihu.com/p/55311726">图片懒加载</a></p></li><li><p>React 项目的页面懒加载，基于前端路由的代码分割</p></li><li><p>使用 iconfont 或者雪碧图代替小图标，减少 http 请求 (雪碧图用起来比较麻烦)</p></li></ol><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ol><li><p>DNS 预解析</p></li><li><p>选择合适的 http 缓存策略</p></li><li><p>http2.0&#x2F;http3.0</p></li><li><p>预加载</p></li><li><p>CDN</p><blockquote><p>首先使用 cdn 的场景是你的项目覆盖范围足够广。用户群体比较大。<br>cdn 的原理就是在全国各地，乃至全世界范围内部署缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中去。在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的缓存服务器上，由缓存服务器直接相应用户请求。解决网络拥塞（同一个域名，浏览器最多只能建立 6 个 tcp 连接）的状况，提高用户访问速度。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Hook</title>
      <link href="/2023/04/12/qian-duan/react/react-hook/"/>
      <url>/2023/04/12/qian-duan/react/react-hook/</url>
      
        <content type="html"><![CDATA[<h2 id="类组件的不足（Hooks-要解决的问题）"><a href="#类组件的不足（Hooks-要解决的问题）" class="headerlink" title="类组件的不足（Hooks 要解决的问题）"></a>类组件的不足（Hooks 要解决的问题）</h2><h3 id="缺少逻辑复用机制"><a href="#缺少逻辑复用机制" class="headerlink" title="缺少逻辑复用机制"></a>缺少逻辑复用机制</h3><p>为了复用逻辑增加无实际渲染效果的组件（高阶组件、渲染属性），它们增加了组件层级显示十分臃肿，增加了调试的难度以及运行效率的降低</p><h3 id="类组件经常会变得很复杂难以维护"><a href="#类组件经常会变得很复杂难以维护" class="headerlink" title="类组件经常会变得很复杂难以维护"></a>类组件经常会变得很复杂难以维护</h3><ul><li>将一组相干的业务逻辑拆分到了很多个生命周期函数中</li><li>在一个生命周期函数内存在多个不相干的业务逻辑</li></ul><h3 id="类成员方法不能保证-this-指向的正确性"><a href="#类成员方法不能保证-this-指向的正确性" class="headerlink" title="类成员方法不能保证 this 指向的正确性"></a>类成员方法不能保证 this 指向的正确性</h3><ul><li>通过 bind 修改 this 指向</li><li>箭头函数</li></ul><h2 id="React-Hooks-是用来干什么的"><a href="#React-Hooks-是用来干什么的" class="headerlink" title="React Hooks 是用来干什么的"></a>React Hooks 是用来干什么的</h2><p>它的作用就是对函数型组件进行增强，让函数型组件可以存储状态，可以拥有处理副作用的能力。让开发者在不使用类组件的情况下，实现相同的功能</p><p>在 React 中，副作用指的是只要不是将数据变为视图的操作都视为副作用，如：</p><ul><li>获取 dom 元素</li><li>发起 ajax 请求</li></ul><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><ul><li>接收唯一的参数即状态初始值，初始值可以为任意类型</li></ul><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><ul><li>useReducer 和 redux 中 reducer 很像</li><li>useState 内部就是靠 useReducer 来实现的</li><li>useState 的替代方案，它接收一个形如 (state, action) &#x3D;&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法</li><li>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"increment"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"decrement"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> initialState <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Count: </span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"increment"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"decrement"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>用于跨组件传递状态，比如下面这个主题数据传输</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">light</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">foreground</span><span class="token operator">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#eeeeee"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">dark</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">foreground</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#222222"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>themes<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>themes<span class="token punctuation">.</span>dark<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Toolbar</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemedButton</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">ThemedButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">background</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>foreground <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      I am styled by theme context!    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect()"></a>useEffect()</h2><h3 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h3><ul><li>useEffect( () &#x3D;&gt; {})<ul><li>只传入一个回调函数，那么这个钩子会在组件每次挂载时，和更新时被调用。相当于 componentDidMount 和 componentDidUpdate</li></ul></li><li>useEffect(() &#x3D;&gt; {}, [])<ul><li>传入一个函数和空数组,只会在挂载时被调用，相当于 componentDidMount</li><li>第二个参数可以用于监控当前组件的状态和传入的 props 中的状态，确保回调在特定的数据变化时才触发更新</li></ul></li><li>useEffect(() &#x3D;&gt; () &#x3D;&gt; {}])<ul><li>传入一个回调函数，在回调中返回一个函数，这个被返回的函数会在组件销毁前调用,相当于 componentDidUnMount</li></ul></li></ul><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><h3 id="获取-dom-元素对象"><a href="#获取-dom-元素对象" class="headerlink" title="获取 dom 元素对象"></a>获取 dom 元素对象</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handler<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存数据（跨组件周期）"><a href="#保存数据（跨组件周期）" class="headerlink" title="保存数据（跨组件周期）"></a>保存数据（跨组件周期）</h3><p>即使组件重新渲染，保存的数据任然还在。保存的数据被更改不会触发组件重新渲染。</p><p>通常用<code>useRef</code>保存程序在运行当中的一些辅助数据</p><p>比如，我们要设置一个定时累加的任务，并且需要一个停止的方法。<br>但是将 timerId 定义在组件中时，每隔 1 秒，count 都会更新一次，组件也会重新渲染，timerId 就会被重新赋值一次：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">stopCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>stopCount<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">停止</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候我们就需要用到 useRef 来保存这个数据,组件重新渲染后，数据也不会消失</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    timerId<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">stopCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerId<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>stopCount<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">停止</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="失控的-Ref"><a href="#失控的-Ref" class="headerlink" title="失控的 Ref"></a>失控的 Ref</h3><p>对于<code>Ref</code>，什么叫失控？</p><p>首先是不失控的情况：</p><ul><li>执行<code>ref.current</code>的<code>focus</code>,<code>blur</code>等方法</li><li>执行<code>ref.current.scrollIntoView</code>使<code>element</code>滚动到视野内</li><li>执行<code>ref.current.getBoundingClientRect</code>测量 DOM 尺寸</li></ul><p>这些情况，虽然操作了<code>DOM</code>，但涉及的都是 React 控制范围外的因素，所以不算失控</p><p>但是下面的情况：</p><ul><li>执行<code>ref.current.remove</code>移除 DOM</li><li>执行<code>ref.current.appendChild</code>插入子节点</li></ul><p>同样是操作 DOM，但是这些原本应该在 React 控制范围内的操作，通过<code>ref</code>执行就属于失控的情况</p><h3 id="限制失控"><a href="#限制失控" class="headerlink" title="限制失控"></a>限制失控</h3><p>所以在 react 中，函数组件可以访问自己的<code>宿主元素</code>的 DOM 节点，但父函数组件是无法直接通过<code>ref</code>来访问到子函数组件内的宿主元素的 DOM。这样就将<code>ref失控</code>的范围控制在了单个组件内，不会出现跨层级的失控<br>比如以下代码，点击了就会报错:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyInput</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">input聚焦</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-forwardRef-取消限制"><a href="#使用-forwardRef-取消限制" class="headerlink" title="使用 forwardRef 取消限制"></a>使用 forwardRef 取消限制</h3><p>但是在某些场景下，比如组件库开发，就需要通过<code>forwardRef</code>将<code>ref</code>暴露给使用者。<br>当然，这种是将整个 DOM 通过 ref 传递给了使用者，需要使用者自己来承担误用的风险</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> MyInput <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Focus the input</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useImperativeHandle-限制-ref-中的方法"><a href="#useImperativeHandle-限制-ref-中的方法" class="headerlink" title="useImperativeHandle 限制 ref 中的方法"></a>useImperativeHandle 限制 ref 中的方法</h3><p>比如，还是用上面的<code>MyInput</code>组件举例，这个组件，我们在封装是只能暴露给用户<code>focus</code>方法，需要屏蔽其他增删改的方法。那么就可以使用<code>useImerativeHandle</code>修改<code>MyInput</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> MyInput <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> realInput <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useImerativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      realInputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<code>Form</code>组件中通过<code>inputRef.current</code>只能取到如下结构:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">&#123;</span>  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    realInputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这样就杜绝了开发者通过 ref 取到 DOM 后，执行不该被使用的 API，出现 ref 失控的情况。</strong></p><h3 id="使用-useImperativeHandle-回传子组件内定义的方法"><a href="#使用-useImperativeHandle-回传子组件内定义的方法" class="headerlink" title="使用 useImperativeHandle 回传子组件内定义的方法"></a>使用 useImperativeHandle 回传子组件内定义的方法</h3><p>在一些情况下，父组件不光需要获取子组件的 DOM,可能还需要获取子组件内的方法。那我们也可以通过<code>useImperativeHandle</code>来将方法绑定到 ref 上，然后再传给父组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">ChildRef</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">getBoundingClientRect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> DOMRect <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Father<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>ChildRef<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    childRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">father page</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">父组件添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>childRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Father<span class="token punctuation">;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>ChildRef<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 子组件内重新定义ref获取子组件的dom</span>  <span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取子组件DOM的getBoundingClientRect 方法</span>      <span class="token function-variable function">getBoundingClientRect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> divRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 获取子组件自定义的 handleClick 方法</span>      <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>divRef<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>useCallback 返回一个 memoized 回调函数。一般和<code>React.memo()</code>一起用于性能优化。</p><p>我们首先可以看下面这个没有使用<code>useCallback</code>的例子,即使使用了 React.memo，且<code>DemoChildren</code>的依赖看上去并没有变化（每次都是传入 getInfo 方法）<br>但是无论是<code>input</code>还是<code>number</code>产生变化都会触发<code>DemoChildren</code>更新。这是因为无论哪一个，只要触发了更新，<code>App</code>这个函数组件都会被重新渲染。<br>然后<code>getInfo</code>这个函数的引用就会被重新分配，所以即使看上去<code>getInfo</code>没有变化，但是到了<code>React.memo</code>的默认<code>compair</code>中还是判断组件发生了变化，<br>进而导致子组件<code>DemoChildren</code>重新渲染。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> DemoChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子组件更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    props<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">"子组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>input<span class="token punctuation">,</span> setInput<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tmp</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>input<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setInput</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">增加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DemoChildren</span></span> <span class="token attr-name">getInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>getInfo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在看这个例子，这个子组件<code>DemoChildren</code>只有两种情况下会产生更新</p><ul><li>初始化</li><li>父组件的<code>number</code>state 变化时</li></ul><p>因为在父组件中对<code>getInfo</code>函数使用了<code>useCallback</code>进行函数缓存。所以子组件使用了 React.memo 后发现 props 并没有更新</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> DemoChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子组件更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    props<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">"子组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>input<span class="token punctuation">,</span> setInput<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> getInfo <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">tmp</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>number<span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>input<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setInput</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">增加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DemoChildren</span></span> <span class="token attr-name">getInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>getInfo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p><strong>作用：</strong> 它可以针对耗时计算来缓存值，并根据依赖项是否更新决定是否再一次进行耗时计算</p><p>比如，组件内需要展示一个耗时计算的数据.<br>这时，可以通过 useMemo 来进行一个性能优化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">computeExpensiveValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do some expensive operations;</span>  <span class="token keyword">return</span> expensiveValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义的-hooks"><a href="#自定义的-hooks" class="headerlink" title="自定义的 hooks"></a>自定义的 hooks</h2><p><strong>作用：</strong> 将自定义 hook 内的内容平铺到组件内部</p><p>首先我们先写一个简单的 useTimeout，该 hook 就是在指定时间后返回一个数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">useTimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">wait</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码等价于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再比如项目中有一些接口请求需要加上 loading 并根据这个 loading 加一些样式，例如 tab, 分页，下拉框或者下拉刷新这类的请求。<br>但是这个逻辑其实都是一样的，都是变一下 true 和 false。<br>那么通过对 hook 的认知，我们可以自定义一个 useRequest</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// utils/hooks.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> dependencies</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>setData<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// App.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils/hooks"</span><span class="token punctuation">;</span><span class="token comment">// 这个是请求库</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"./utils/request"</span><span class="token punctuation">;</span><span class="token comment">// 该页面中有一个分页请求，组件用的是antd的Table</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> current<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> total <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> paginationChange<span class="token punctuation">]</span> <span class="token operator">=</span>    useState <span class="token operator">&lt;</span>    PaginationConfig <span class="token operator">></span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当页面发生改变后就产生请求，并loading，然后返回数据以及loading的状态</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/getData"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> current<span class="token punctuation">,</span> pageSize <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>current<span class="token punctuation">,</span> pageSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleOnChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> current<span class="token punctuation">,</span> total<span class="token punctuation">,</span> pageSize <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">paginationChange</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> current<span class="token punctuation">,</span> total<span class="token punctuation">,</span> pageSize <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span>        <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>loading<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>columns<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleOnChange<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">pagination</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">current</span><span class="token operator">:</span> current<span class="token punctuation">,</span>          <span class="token literal-property property">total</span><span class="token operator">:</span> total<span class="token punctuation">,</span>          <span class="token literal-property property">pageSize</span><span class="token operator">:</span> pageSize<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">rowKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，我们也可以将一些鼠标事件封装在 hook 中，例如获取鼠标位置的操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// useMousePosition.js</span><span class="token keyword">const</span> <span class="token function-variable function">useMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>position<span class="token punctuation">,</span> setPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">updateMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> position<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// App.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> useMousePosition <span class="token keyword">from</span> <span class="token string">"./useMousePosition"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>x<span class="token operator">:</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>y<span class="token operator">:</span> <span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hooks-解决了什么问题"><a href="#Hooks-解决了什么问题" class="headerlink" title="Hooks 解决了什么问题"></a>Hooks 解决了什么问题</h2><h3 id="1-组件之间复用状态逻辑很难"><a href="#1-组件之间复用状态逻辑很难" class="headerlink" title="1. 组件之间复用状态逻辑很难"></a>1. 组件之间复用状态逻辑很难</h3><p>React 没有提供将一些将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）。常见的解决方案为 ”render prop“和”高阶组件“。但是它们需要<strong>重新组织你的组件结构</strong>，这会使你的代码变得非常难以理解和维护。我们可以在 React DevTools 中观察到，由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。<br>而 Hooks 则解决了：<strong>为共享状态逻辑提供更好的原生途径</strong>的问题。</p><p>举个例子，项目中有一些接口请求需要加上 loading 并根据这个 loading 加一些样式，例如 tab, 分页，下拉框或者下拉刷新这类的请求。但是这个状态逻辑其实都是一样的。都是变 true 和 false。那么，在使用了 hooks 之后，我们可以这么写一个 hooks。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// utils/hooks.js</span><span class="token keyword">const</span> <span class="token function-variable function">useLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>nul<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>setData<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-复杂组件变得难以理解"><a href="#2-复杂组件变得难以理解" class="headerlink" title="2. 复杂组件变得难以理解"></a>2. 复杂组件变得难以理解</h3><p>期初，组件都很简单，但是逐渐被状态逻辑和副作用占据。每个生命周期常常包含一些不相关的逻辑。例如，组件常常 componentDidMount 和 compoentDidUpdate 中获取数据。但是，同一个 componentDidMout 中可能也包含很多其他的逻辑，如事件监听，而之后需要在 componentWillUnMount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。</p><p>且在多数情况下，由于一个状态逻辑在一个组件中无处不在，不可能将组件拆分成更小的粒度。虽然可以通过引入状态管理工具来结合使用。但是，这回增加额外的抽象概念。</p><p>而 hooks 可以将相互关联的部分拆分为更小的函数，而非强制按照生命周期划分。</p><p>如下，我们将一个鼠标移动事件封装在一个 hooks 中, 而 useEffect hooks 则可以代替<code>componentDidMount</code>、<code>compoentDidUpdate</code>和<code>componentWillUnMount</code>。使得逻辑更加的清晰</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// useMousePosition.js</span><span class="token keyword">const</span> <span class="token function-variable function">useMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>position<span class="token punctuation">,</span> setPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">updateMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> position<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// App.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> useMousePosition <span class="token keyword">from</span> <span class="token string">"./useMousePosition"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">x: </span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">y: </span><span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，如果我们使用 Class 的话，需要使用 render prop 获取 children prop 才能解决以上这种横切问题（封装状态或行为共享给其他需要相同状态的组件）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MousePosition</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">updateMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateMousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MousePosition</span></span>        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">x: </span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">y: </span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者 HOC</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">withMousePosition</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MousePosition</span></span>          <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Comp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">x: </span><span class="token punctuation">&#123;</span>data<span class="token operator">?.</span>x<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">y: </span><span class="token punctuation">&#123;</span>data<span class="token operator">?.</span>y<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">withMousePosition</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-难以理解的-Class"><a href="#3-难以理解的-Class" class="headerlink" title="3. 难以理解的 Class"></a>3. 难以理解的 Class</h3><p>除了代码的复用和管理困难外，学习 Class 你还需要理解 this 的指向问题。现在，我们可以通过箭头函数来避免 this 的指向问题。</p><p>但是，我们需要知道，在不支持箭头函数之前，事件函数都需要通过 bind 这类方法来修正 this 的指向。否则，在调用一个事件处理函数时，this 会指向 window；</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>hooks 解决了 class 组件难以解决的状态或行为复用问题,可以创建涵盖各种场景的自定义 Hook，如表单处理、动画、订阅声明、计时器等</li><li>hooks 可以有效避免在书写复杂组件时使用 render prop 或者高阶组件所带来的的让组件难以理解的问题。</li><li>减少了多个生命周期的概念，学习和使用成本降低</li><li>避免 class 中 this 的指向问题</li></ol><h2 id="React-Hooks-踩坑记录"><a href="#React-Hooks-踩坑记录" class="headerlink" title="React Hooks 踩坑记录"></a>React Hooks 踩坑记录</h2><h3 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a>只在最顶层使用 Hook</h3><p>React 是通过 Hook 的调用顺序来确定 state 对应的<code>useState</code>。</p><p>所以，我们需要保证 Hook 的调用顺序在多次渲染之间保持一致。</p><p><strong>看一下官网的例子</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// ------------</span><span class="token comment">// 首次渲染</span><span class="token comment">// ------------</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 使用 'Mary' 初始化变量名为 name 的 state</span><span class="token function">useEffect</span><span class="token punctuation">(</span>persistForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 添加 effect 以保存 form 操作</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 使用 'Poppins' 初始化变量名为 surname 的 state</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 添加 effect 以更新标题</span><span class="token comment">// -------------</span><span class="token comment">// 二次渲染</span><span class="token comment">// -------------</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 读取变量名为 name 的 state（参数被忽略）</span><span class="token function">useEffect</span><span class="token punctuation">(</span>persistForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 替换保存 form 的 effect</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 读取变量名为 surname 的 state（参数被忽略）</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 替换更新标题的 effect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如果我们将一个 Hook (例如 persistForm effect) 调用放到一个条件语句中,在第一次渲染中 name !&#x3D;&#x3D; ‘’ 这个条件值为 true，所以我们会执行这个 Hook。<br>但是在下一次渲染时我们可能清空了表单，表达式值变为 false。此时的渲染会跳过 hook</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"formData"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 读取变量名为 name 的 state（参数被忽略）</span><span class="token comment">// useEffect(persistForm)  // 此 Hook 被忽略！</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 （之前为 3）。读取变量名为 surname 的 state 失败</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 （之前为 4）。替换更新标题的 effect 失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hook-的依赖项"><a href="#hook-的依赖项" class="headerlink" title="hook 的依赖项"></a>hook 的依赖项</h3><p>在 hook 中，<code>useEffect</code>、<code>useCallback</code>、<code>useMemo</code>等都提供第二个参数，它是一个依赖项数组（当我们不传时，每一次的状态更新都会被调用）。<br>当在第一个参数的回调函数中使用了 props 和 state，就需要在依赖项中标明。不然，使用的都是初始值。</p><p>在 useEffect 等中，</p><ul><li>当依赖项指定为 <code>[]</code> 数组时，则只会在首次更新时调用回调</li><li>当不指定依赖项时，则任意 state 更新都会触发回调</li><li>当指定依赖项时，则只在依赖项发生改变时执行回调</li></ul><p>在 useCallback、useMemo 中，</p><ul><li>当依赖项指定为 <code>[]</code> 数组时，都会执行，但是回调中的 state 都是初始值</li><li>当不指定依赖项时，则任意 state 更新都会触发回调</li><li>当指定依赖项时，则只在依赖项发生改变时执行回调</li></ul><h3 id="useEffect-和-useLayoutEffect-的区别"><a href="#useEffect-和-useLayoutEffect-的区别" class="headerlink" title="useEffect 和 useLayoutEffect 的区别"></a>useEffect 和 useLayoutEffect 的区别</h3><p>简单的说，就是调用时机不同，<code>useLayoutEffect</code>和原来<code>componentDidMount</code>、<code>componentDidUpdate</code>一致。<br>在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。而 <code>useEffect</code> 是会在整个页面渲染完才会调用的代码。</p><h3 id="状态修改是异步的"><a href="#状态修改是异步的" class="headerlink" title="状态修改是异步的"></a>状态修改是异步的</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- 0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">value: </span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>useState 返回的修改函数是异步的，调用后并不会直接生效，因此立马读取 value 获取到的是旧值（0）<br>React 这样设计的目的是为了性能考虑，争取把所有状态改变后只重绘一次就能解决更新问题，而不是改一次重绘一次，也是很容易理解的。</p><h3 id="在-timeout-中读不到其他状态的新值"><a href="#在-timeout-中读不到其他状态的新值" class="headerlink" title="在 timeout 中读不到其他状态的新值"></a>在 timeout 中读不到其他状态的新值</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>anotherValue<span class="token punctuation">,</span> setAnotherValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setAnotherValue"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- 0</span>      <span class="token function">setAnotherValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      Value：</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token plain-text">, AnotherValue：</span><span class="token punctuation">&#123;</span>anotherValue<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为在生成 timeout 闭包时，value 的值是 0。<br>虽然之后通过 setValue 修改了状态，但 React 内部已经指向了新的变量，而旧的变量仍被闭包引用，所以闭包拿到的依然是旧的初始值，也就是 0。</p><p>我们可以通过使用 useRef</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>anotherValue<span class="token punctuation">,</span> setAnotherValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> valueRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  valueRef<span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setAnotherValue"</span><span class="token punctuation">,</span> valueRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- 0</span>      <span class="token function">setAnotherValue</span><span class="token punctuation">(</span>valueRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      Value：</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token plain-text">, AnotherValue：</span><span class="token punctuation">&#123;</span>anotherValue<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/87713171">https://zhuanlan.zhihu.com/p/87713171</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《从零实现React18》学习总结</title>
      <link href="/2023/04/12/qian-duan/react/big-react/"/>
      <url>/2023/04/12/qian-duan/react/big-react/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文章是用来总结卡颂大佬的<a href="https://appjiz2zqrn2142.h5.xiaoeknow.com/p/decorate/homepage">《从零实现 React18》</a>课程的。</p></blockquote><h2 id="章节-1"><a href="#章节-1" class="headerlink" title="章节 1"></a>章节 1</h2><p>主要讲解了一个项目的搭建应该从以下几个角度出发：</p><ul><li>项目结构（是选择 Multi-repo 还是 Mono-repo）</li><li>打包工具</li><li>如何定义开发规范</li></ul><h2 id="章节-2"><a href="#章节-2" class="headerlink" title="章节 2"></a>章节 2</h2><p>这一章主要讲了如何去实现 jsx 这个与宿主环境无关的方法，它在 react 包中。虽然是和宿主环境无关，但是这个方法是 react 中的基础，它会在运行时将已经转化后的 jsx 元素变为 ReactElement</p><h2 id="章节-3-5"><a href="#章节-3-5" class="headerlink" title="章节 3 - 5"></a>章节 3 - 5</h2><p>因为<code>ReactElement</code>是 React 中用来描述 jsx 中单一节点的数据结构，无法表达节点间的关系，且无法拓展(如：表达状态)。所以在<code>Reconciler</code>中还实现了<code>FiberNode</code>作为介于<code>ReactElement</code>和<code>真实DOM</code>间的<code>虚拟DOM</code>。然后实现<code>workLoop</code>的工作循环，而这一流程主要为<code>beginWork</code>、<code>completeWork</code>和<code>commit</code>.</p><p><code>JSX语法</code>在<code>编译时</code>被 babel 编译为被编译成<code>ReactElement</code>,然后在<code>beginWork</code>阶段通过<code>ReactElement</code>生成<code>FiberNode</code>，最后在<code>commit</code>阶段将<code>离屏DOM</code>插入到 Continaer 中编程真正的<code>DOM</code></p><p>在<code>ReactDOM.render</code>时创建<code>fiberRootNode</code>和<code>rootFiber</code>且<code>beginWork</code>流程中通过 diff 来对更新<code>wip</code>。并添加对应的<code>flags</code>。</p><p>然后在<code>completeWork</code>中将<code>flags</code>冒泡到父节点中，标记<code>subtreeflags</code>,为后续 commit 提供基础</p><p>在第四章中还实现了通用的更新机制<code>Update</code>和<code>UpdateQueue</code>，并在<code>ReactDOM</code>初始化时接入了这套更新机制,<br>不过目前并没有实现完整的 updateQueue 链表结构，只能支持单一 hook 的初始化和更新</p><h2 id="章节-6"><a href="#章节-6" class="headerlink" title="章节 6"></a>章节 6</h2><p>这一章节主要作用是实现<code>commit</code>操作，串联 Reconciler 逻辑与真实 DOM 操作。通过在<code>completeWork</code>中冒泡的<code>flags</code>，在完成所有子树的<code>归</code>的逻辑后，执行插入等 DOM 节点操作</p><p>而 commit 这个过程中会产生<code>突变(Mutation)</code>，所谓<code>Mutation</code>就是将<strong>一个属性的值从 a 直接变为 b,比如 color: red -&gt; color: green</strong>,而<code>Mutation</code>又被<br>分成了三个子阶段</p><ul><li>beforeMotation: 突变前</li><li>mutation</li><li>layout: 突变后</li></ul><p>然后可以在这个<code>Mutation</code>的过程中执行副作用，<br>这章目前只实现了在<code>mutation子阶段</code>插入 DOM 节点和 Text 文本节点创建等基础操作。</p><p>并且后面用的<code>useEffectLayout</code>hook 就是在<code>layout</code>子阶段执行（目前未实现）</p><h2 id="章节-7"><a href="#章节-7" class="headerlink" title="章节 7"></a>章节 7</h2><p>通过在<code>beginWork</code>流程添加对函数组件的<code>tag</code>类型的判断，并实现<code>renderWithHooks</code>方法执行函数组件并获取函数组件的<code>child</code>对应的<code>HostComponent</code>来实现函数组件。</p><h2 id="章节-8"><a href="#章节-8" class="headerlink" title="章节 8"></a>章节 8</h2><p>通过实现<code>Hook</code>数据结构来管理状态，以链表的形式存储多个 hooks，并通过 next 指向下一个 hook ,<br>这也是为什么 react 强调函数组件内 hooks 的调用顺序不能变(定义 useState 等 hooks 只在函数组件的顶层定义，不要在条件中定义).</p><p>不同生命周期中的 hooks 集合不一样，通过实现<code>内部数据共享层</code>获取当前使用的 hooks 集合</p><h2 id="章节-9"><a href="#章节-9" class="headerlink" title="章节 9"></a>章节 9</h2><p>与逻辑无关，介绍了不同的源码调试方法以及 react 官方测试用例</p><h2 id="章节-10"><a href="#章节-10" class="headerlink" title="章节 10"></a>章节 10</h2><p>这一章节主要介绍了 update 流程中的 beginWork、completeWork 和 commitWork 流程。<br>在 beginWork 的<code>reconciler</code>流程中实现了了对单一节点和 text 节点的<code>diff</code>。<br>单节点通过<code>key</code>和<code>type</code>判断当前<code>fiber</code>是否可以复用，如果不能复用则会标记删除再创建。<br>文本节点是只要<code>currentFiber.tag</code>没有变化都会复用原来的 fiber 结构，只更新<code>workInProgress.pendingProps</code>。<br>然后在<code>completeWrok</code>阶段标记更新。最后在<code>commitWork</code>流程中添加了<code>commitUpdate</code>和<code>commitDeleteion</code>方法来分别对应<code>Update</code>和<code>Deletion</code>的副作用操作的执行</p><p>最后就是实现了 update 流程中的<code>useState</code>hook, 实现<code>updateWorkInProgressHook</code>获取存放执行当前 hook 的全局变量<code>workInProgressHook</code>，<br>然后计算出新的 state。</p><h2 id="章节-11"><a href="#章节-11" class="headerlink" title="章节 11"></a>章节 11</h2><p>本章是针对浏览器宿主环境模拟实现的事件模型，主要模拟了浏览器事件捕获、冒泡流程,以及合成事件对象</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于React实现一个内容滑动组件</title>
      <link href="/2023/04/12/qian-duan/react/shi-yong-react-shi-xian-yi-ge-nei-rong-hua-dong-zu-jian/"/>
      <url>/2023/04/12/qian-duan/react/shi-yong-react-shi-xian-yi-ge-nei-rong-hua-dong-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>最近在做项目时遇到一个需求，需要让一个列表能够通过点击按钮进行滚动，每次都是一屏的距离，不足则结束。并且，这个列表项是在<a href="https://github.com/react-grid-layout/react-grid-layout">react-grid-layout</a>中的某一个模块内。所以包裹这个列表的容器会随时发生变化。在完成这个组件后，通过这篇文章总结一下。</p><h2 id="UI-原型分析"><a href="#UI-原型分析" class="headerlink" title="UI&#x2F;原型分析"></a>UI&#x2F;原型分析</h2><p>那么从上面的功能描述以及项目中的 UI，我们可以分析得到这样一个假想图：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b08cd8dcffb247a7b9256f4041993a67~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b08cd8dcffb247a7b9256f4041993a67~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>我们需要实现一个容器来作为我们的<strong>可视区域</strong>，并且这个容器是可以伸缩的。</li><li>列表内容如果超出容器的<strong>可视区域</strong>，那么就会被隐藏。</li><li>需要左右都有按钮，来支持用户左右滑动内容来查看，每次滑动距离为 容器的宽度，也就是<code>可视区域</code></li><li>当在伸缩容器的时候，如果是向右侧伸缩，并且<strong>可视区域</strong>已经被拉伸的超出了列表被隐藏的右侧内容时，右侧的隐藏内容需要有一个<strong>吸附效果</strong>，即跟着被伸缩的容器移动，直到左侧隐藏内容的偏移值为 0。</li></ol><p>话不多说，我们先上简单的最终效果图</p><ul><li><p>有固定宽度，不可伸缩<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1e7d028cbd44d54be496daff25e7076~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1e7d028cbd44d54be496daff25e7076~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="slider-demo.gif"></p></li><li><p>无固定宽度，可伸缩（这里直接用<a href="https://www.binance.com/zh-CN/futures/BTCUSDT">币安</a>的效果来展示，如果你有兴趣，可以自己下载个<code>react-grid-layout</code>或者其他库来试一下效果）</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9ef5d5ca4d644fdaa0c59882647493e~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9ef5d5ca4d644fdaa0c59882647493e~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="mxefs-bl7av.gif"></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="监听元素尺寸变化"><a href="#监听元素尺寸变化" class="headerlink" title="监听元素尺寸变化"></a>监听元素尺寸变化</h3><blockquote><p>工欲善其事必先利其器</p></blockquote><p>在分析完后，我们发现有一个点。如果要支持<code>react-grid-layout</code>这类的伸缩功能，需要能够监听到元素的动态变化。</p><p>那么，我们可以先将这部分逻辑抽离，封装成一个<code>hook</code>:</p><p><code>hooks/useResizeObserver.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useLayoutEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment">// 接收保存被监听dom的ref</span><span class="token keyword">const</span> <span class="token function-variable function">useResizeObserver</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ref<span class="token operator">:</span> React<span class="token punctuation">.</span>RefObject<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>width<span class="token punctuation">,</span> setWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用ResizeObserver来监听DOM的变化</span>    <span class="token keyword">const</span> resizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      resizeObserver<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ref<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> width<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useResizeObserver<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中核心的逻辑是使用<code>ResizeObserver</code>类来监听一个元素的尺寸变化。然后返回变化后的<code>width</code></p><h2 id="组件开发。"><a href="#组件开发。" class="headerlink" title="组件开发。"></a>组件开发。</h2><p>有了上面的分析，再实现代码就是一步步走即可。所以我们直接贴代码：</p><p><code>components/SliderContainer/index.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  useMemo<span class="token punctuation">,</span>  useState<span class="token punctuation">,</span>  useRef<span class="token punctuation">,</span>  useLayoutEffect<span class="token punctuation">,</span>  useEffect<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> ReactElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./index.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ArrowLeft <span class="token keyword">from</span> <span class="token string">"@/assets/arrow-left.svg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ArrowRight <span class="token keyword">from</span> <span class="token string">"@/assets/arrow-right.svg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> useResizeObserver <span class="token keyword">from</span> <span class="token string">"@/hooks/useResizeObserver"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SliderContainerProps</span> <span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  children<span class="token operator">:</span> ReactElement<span class="token punctuation">;</span> <span class="token comment">// 需要包括的内容</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token constant">LEFT</span> <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">RIGHT</span> <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SliderContainer<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>SliderContainerProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  width <span class="token operator">=</span> <span class="token string">"inherit"</span><span class="token punctuation">,</span>  children<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> listRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerWidth <span class="token operator">=</span> <span class="token function">useResizeObserver</span><span class="token punctuation">(</span>containerRef<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>listWidth<span class="token punctuation">,</span> setListWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>translateX<span class="token punctuation">,</span> setTranslateX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 缓存</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>containerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理容器宽度变化时，内部元素的吸附效果</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      containerWidth <span class="token operator">></span> cache<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token comment">// 当容器可拖拽时，表示用户正在向右拖拽</span>      translateX <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 表示左侧有内容被隐藏</span>      listWidth <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>translateX<span class="token punctuation">)</span> <span class="token operator">-</span> containerWidth <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token comment">//表示右侧已经没有被隐藏的内容了</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> distance <span class="token operator">=</span> containerWidth <span class="token operator">-</span> cache<span class="token punctuation">.</span>current<span class="token punctuation">;</span>      <span class="token function">setTranslateX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=></span> cur <span class="token operator">+</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 更新缓存</span>    cache<span class="token punctuation">.</span>current <span class="token operator">=</span> containerWidth<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>containerWidth<span class="token punctuation">,</span> translateX<span class="token punctuation">,</span> listWidth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setListWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span>listRef<span class="token punctuation">.</span>current <span class="token keyword">as</span> HTMLDivElement<span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断按钮是否可见</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>leftArrowVisible<span class="token punctuation">,</span> rightArrowVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> leftArrowVisible<span class="token punctuation">,</span>      rightArrowVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// listWidth - Math.abs(translateX) - containerWidth 为右侧隐藏内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listWidth <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>translateX<span class="token punctuation">)</span> <span class="token operator">-</span> containerWidth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rightArrowVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>translateX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      leftArrowVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>leftArrowVisible<span class="token punctuation">,</span> rightArrowVisible<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>listWidth<span class="token punctuation">,</span> translateX<span class="token punctuation">,</span> containerWidth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleArrowClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>direction<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token constant">LEFT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 左侧隐藏内容</span>      <span class="token keyword">const</span> leftSpaceWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>translateX<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSpaceWidth <span class="token operator">></span> containerWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTranslateX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=></span> cur <span class="token operator">+</span> containerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTranslateX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=></span> cur <span class="token operator">+</span> leftSpaceWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token constant">RIGHT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 右侧隐藏内容</span>      <span class="token keyword">const</span> rightSpaceWidth <span class="token operator">=</span> listWidth <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>translateX<span class="token punctuation">)</span> <span class="token operator">-</span> containerWidth<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSpaceWidth <span class="token operator">></span> containerWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTranslateX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=></span> cur <span class="token operator">-</span> containerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTranslateX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=></span> cur <span class="token operator">-</span> rightSpaceWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>containerRef<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> width<span class="token operator">:</span> width <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>leftArrowVisible <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>            <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span>            <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leftArrow btn<span class="token punctuation">"</span></span>            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleArrowClick</span><span class="token punctuation">(</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>          <span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ArrowLeft<span class="token punctuation">&#125;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linerGrid leftGradient<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>listRef<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>          transform<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>translateX<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>          transition<span class="token operator">:</span> <span class="token string">"all 0.3s linear"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>rightArrowVisible <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linerGrid rightGradient<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>            <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span>            <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rightArrow btn<span class="token punctuation">"</span></span>            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleArrowClick</span><span class="token punctuation">(</span><span class="token constant">RIGHT</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>          <span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ArrowRight<span class="token punctuation">&#125;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件目前设置了两个属性<code>width</code>和<code>children</code></p><ul><li><strong>width</strong>: 如果不传，默认<code>inherit</code>，表示该容器是可伸缩的，那么组件内部会自己计算；如果传了固定宽度，则按照该固定宽度来设置</li><li><strong>children</strong>: 需要滚动的内容</li></ul><p><strong>其中，主要是有 5 个点需要着重理解</strong></p><ol><li>在<code>useLayoutEffect</code>中，需要通过传入的<code>children</code>来判断是否需要更新<code>list</code>的长度，防止计算不准确</li><li>判断按钮何时显示</li><li>按钮点击时需要处理的 UI 逻辑</li><li>如果容器是可伸缩的，需要通过<code>useRef</code>的缓存来判断用户向哪个方向伸缩容器</li><li>使用<code>transform</code>和<code>transition</code>让动画更流畅自然</li></ol><p>对应的 css 样式为:</p><p><code>components/SliderContainer/index.css</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.list</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.leftArrow</span> <span class="token punctuation">&#123;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.rightArrow</span> <span class="token punctuation">&#123;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.linerGrid</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.leftGradient</span> <span class="token punctuation">&#123;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.rightGradient</span> <span class="token punctuation">&#123;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>269.21deg<span class="token punctuation">,</span> #ffffff<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>我们可以通过下面的方式来使用</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项3"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项4"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项6"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项7"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项8"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项9"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"列表项10"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SliderContainer</span></span> <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">300</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">              </span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SliderContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js常见概念</title>
      <link href="/2023/04/12/hou-duan/node/nodejs-gai-nian/"/>
      <url>/2023/04/12/hou-duan/node/nodejs-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>为啥取名为 Node 呢？</p><p>因为 Node 的架构主要分为 4 大部分，<code>Node Standard Library</code>, <code>Node Bindings</code>, <code>V8</code>, <code>Libuv</code></p><p>它通过将一个个节点连接起来，组成 js 的服务端运行时,我们看下面这张图</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4f9d04eb6264ca0b10ce45ba341b57c~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4f9d04eb6264ca0b10ce45ba341b57c~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="node架构.png"></p><ul><li>最上层的<code>Node Standard Library</code>, 是我们每天都在用的标准库， 如 Http, Buffer 模块</li><li><code>Node bindings</code>是沟通 JS 和 C++的桥梁，封装 V8 和 Libuv 的细节，向上层提供基础 API 服务</li><li>最底层是支撑 Node 运行的关键，有 c&#x2F;c++实现<ul><li>V8 是 google 开发的 JavaScript 引擎，提供 JavaScript 运行环</li><li>Libuv 是专门为 Node 开发的封装库，提供跨平台的异步 I&#x2F;O 能力</li><li>C-ares 用于异步请求 DNS，它通过 c 实现</li><li>http_parser 、OpenSSL、zlib 等提供包括 http 解析、SSL、数据压缩等其他功能</li></ul></li></ul><p>上面说到了 Libuv 是为 Node 开发的封装库，但是 node 在一开始时，使用的是 libev 实现<strong>事件循环</strong>来处理异步 I&#x2F;O、定时器和信号等事件。但是，随着 node 的流行，libev 只能在 Unix 环境下运行的缺点暴露了出来，所以就自己实现了<code>libuv</code>来代替<code>libev</code></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Node 作为一个 JavaScript 的后端运行平台，它保留了前端浏览器 JavaScript 中那些熟悉的接口(<code>setTimeout</code>、<code>setInterval</code>)。并且 js 的语言特性并没有改写</p><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>好处：</p><ul><li>不像多线程编程那样处处在意状态的同步，没有死锁</li><li>没有上下文切换的性能开销</li><li>能够处理高并发，并能快速响应</li></ul><p>坏处：</p><ul><li>无法充分利用多核 cpu</li><li>错误会 blocking 整个应用</li><li>大量计算占用 CPU 导致无法继续调用异步 I&#x2F;O</li></ul><p>在浏览器中，JS 长时间执行会导致 UI 渲染和响应被中断(卡顿), 那么浏览器在 HTML5 的标准中引入了<code>Web Worker</code>。 它可以创建一个单独个<code>工作线程</code>，将大计算量的 js 放入到该线程中执行。然后再通过消息传递的方式将结果给到<code>主线程</code>，不过<code>工作线程</code>无法访问到<code>DOM</code>等宿主对象.</p><p>Node 采用了和<code>Web Worker</code>相同的思路来解决单线程中大计算量的问题，那就是<code>child_process</code>。这样，Node 就可以通过<code>child_process</code>来解决程序 <code>健壮性</code>和<code>利用多核CPU</code>的问题。</p><h3 id="EventLoop-事件循环-Timer-和process-nextTick"><a href="#EventLoop-事件循环-Timer-和process-nextTick" class="headerlink" title="EventLoop(事件循环), Timer 和process.nextTick()"></a>EventLoop(事件循环), Timer 和<code>process.nextTick()</code></h3><p><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick">文档</a></p><p><code>事件循环</code>使 Node 能够执行非阻塞 I&#x2F;O(异步 I&#x2F;O)操作，这是因为在 JavaScript 中执行一些 I&#x2F;O 操作时，比如<code>timer</code>、<code>网络任务</code>、<code>文件读写</code>等。 Node 这个<code>runtime</code>会将这些事件都交给操作系统的内核来执行，因为大多数的现代内核都是<code>多线程</code>的，它们可以并行执行多个操作。然后，当某个操作完成后，内核会告诉 Node，以便对应的回调函数可以被添加到<code>队列</code>中，最终被<code>事件循环</code>执行</p><p>下图显示了事件循环的操作顺序的概述</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/903cd57a79944f3f9dfaa8d3eb5e975b~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/903cd57a79944f3f9dfaa8d3eb5e975b~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><blockquote><p>每个框表示事件循环中的一个”阶段(phase)“</p></blockquote><p>每个阶段都有一个<code>先进先出</code>的队列，用于执行回调函数。尽管每个阶段各有特色，但通常情况下，当事件循环进入某个阶段时，它会执行该阶段特定的任意操作，然后执行该阶段队列中的回调函数，直到队列已被耗尽或已执行了最大数量的回调函数为止。当队列已被耗尽或达到回调限制时，事件循环将移动到下一个阶段，一直循环。</p><p>由于这些操作中的任何一个都可能安排更多的操作（耗时的运算），而且在处理轮询事件时由内核排队处理新事件，因此在处理轮询事件时可能会排队轮询事件。因此，长时间运行的回调函数可以使轮询阶段运行时间远远超过定时器的阈值。有关更多详细信息，请参阅计时器和轮询部分。</p><p>以下是各个阶段的描述:</p><ul><li><strong>timer</strong>: 这个阶段执行由<code>setTimeout</code>和<code>setInterval</code>调度的回调函数</li><li><strong>pending callbacks</strong> : 延迟执行 I&#x2F;O 回调函数到下个循环中</li><li><strong>idle, prepare</strong>: 内部使用</li><li><strong>poll</strong> 检索新的 I&#x2F;O 事件，执行 I&#x2F;O 相关的回调函数（除了由关闭回调，定时器安排的回调和<code>setImmediate()外，几乎所有的回调都是如此</code>）；在适当的时候，Node 会阻塞这里</li><li><strong>check</strong>: <code>setTmmediate()</code>回调函数在这里被调用</li><li><strong>close callbacks</strong>: 执行关闭回调，比如<code>socket.on(&#39;close&#39;, callback)</code>这些</li></ul><p>在运行每次事件循环之间，Node.js 会检查是否正在等待任何异步 I&#x2F;O 或定时器，如果没有则会进行清理关闭</p><p><strong>以下是每个阶段的具体信息:</strong></p><h4 id="timers-阶段"><a href="#timers-阶段" class="headerlink" title="timers 阶段"></a>timers 阶段</h4><p>定时器指定了回调函数可执行的阈值，而非用户想要它执行的确切时间。定时器回调将在指定时间段过去后尽早地安排执行，但操作系统调度或其他回调的运行可能会延迟它们的执行。</p><h4 id="pending-callbacks-阶段"><a href="#pending-callbacks-阶段" class="headerlink" title="pending callbacks 阶段"></a>pending callbacks 阶段</h4><p>这个阶段执行一些系统操作的回调，如 TCP 错误的类型。例如，如果一个 TCP 套接字在连接时收到 <code>ECONNREFUSED</code> 错误,一些 Unix&#x2F;Linux 系统会等待一会再报告错误。这将会放到队列中，在<code>pending callbacks</code>阶段执行</p><h4 id="poll-阶段"><a href="#poll-阶段" class="headerlink" title="poll 阶段"></a>poll 阶段</h4><p><code>poll</code>阶段有两个主要的方法:</p><ol><li>计算它应该阻塞和轮询 I&#x2F;O 的时间，然后</li><li>执行<code>poll</code>队列中的事件</li></ol><p>当<code>事件循环</code>进入<code>poll</code>阶段且已经没有以及被调度的<code>timers</code>时，会发生两件事</p><ol><li>如果<code>poll</code> 队列不为空，<code>事件循环</code>将遍历其回调队列，同步执行它们，直到队列被耗尽或达到系统相关的硬限制。</li><li>如果<code>poll</code>队列为空，会发生两件事<ul><li>如果脚本已经通过<code>setImmediate()</code>被执行，事件循环将会结束<code>poll</code>阶段，并且继续到<code>check</code>阶段去执行那些被调度的脚本</li><li>如果没有通过 setImmediate() 执行脚本，事件循环将等待回调被添加到队列中，然后立即执行它们。</li></ul></li></ol><p>一旦<code>poll</code>队列为空，事件循环会检查已经达到时间阈值的定时器。如果有一个或多个定时器准备好了，事件循环将回到定时器阶段，执行这些定时器的回调。</p><h4 id="check-阶段"><a href="#check-阶段" class="headerlink" title="check 阶段"></a>check 阶段</h4><p>该阶段允许在<code>poll(轮询)</code>阶段完成后立即执行回调。如果<code>poll</code>阶段变为空闲，并且使用 <code>setImmediate()</code> 安排了脚本，则事件循环可能会继续到<code>check</code>阶段，而不是等待。</p><h4 id="close-阶段"><a href="#close-阶段" class="headerlink" title="close 阶段"></a>close 阶段</h4><p>当一个 socket 连接或者一个 handle 被突然关闭时（例如调用了<code>socket.destroy()</code>方法），close 事件会被发送到这个阶段执行回调。否则事件会用<code>process.nextTick（）</code>方法发送出去。</p><h3 id="process-nextTick-setTimeout-与-setImmediate-的区别与使用场景"><a href="#process-nextTick-setTimeout-与-setImmediate-的区别与使用场景" class="headerlink" title="process.nextTick,setTimeout 与 setImmediate 的区别与使用场景"></a><strong>process.nextTick,setTimeout 与 setImmediate 的区别与使用场景</strong></h3><p>在 node 中有三个常用的用来推迟任务执行的方法：</p><ul><li>setTimeout（setInterval 与之相同）</li><li>setImmediate</li><li>process.nextTick</li></ul><p>这三者间存在着一些非常不同的区别：</p><h4 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h4><p>您可能已经注意到，在图表中没有显示<code>process.nextTick()</code>，尽管它是异步 API 的一部分。这是因为<code>process.nextTick()</code>实际上并不属于事件循环的一部分。相反，<code>nextTickQueue</code>将在<strong>当前操作</strong>完成后被处理，而不管事件循环的当前阶段如何。在这里，<strong>一个操作</strong>被定义为从底层 C&#x2F;C++处理程序的转换和处理需要执行的 JavaScript。(这里我的理解是解析 JavaScript 时会作为一个任务，被添加到事件队列中，然后<code>事件循环</code>在执行当前这个任务时<code>process.nextTick</code>的回调是永远优先于其他事件的。不过在另一个事件的回调中，调用<code>nexTick</code>只会在当前这个回调中优先于其他事件，我们可以看下面这个例子)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setImmediate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./fakeNew.js"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> setImmediate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> nextTick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> nextTick2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nextTick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到输出如下:</p><pre class="line-numbers language-none"><code class="language-none">nextTicksetTimeoutinner readFile ----&gt; nextTickinner readFile ----&gt; nextTick2setImmediateinner readFile ----&gt; setImmediateinner readFile ----&gt; setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说无论在哪个阶段调用<code>process.nextTick()</code>，所有传递给<code>process.nextTick()</code>的回调都会在事件循环继续之前被解决。这可能会导致一些不良情况，因为它允许通过递归<code>process.nextTick()</code>调用来“饿死”I&#x2F;O，从而防止事件循环达到轮询阶段。</p><p>与执行<code>poll</code> 队列中的任务不同的是，这个操作在队列清空前是不会停止的。这也就意味着，错误的使用<code>process.nextTick()</code>方法会导致 node 进入一个死循环。。直到内存泄漏。</p><p>为什么像这样的东西会被包含在 Node.js 中？部分原因是一种设计哲学，即 API 应该始终是异步的，即使它不必是异步的。例如，考虑这段代码片段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">apiCall</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>      callback<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"argument should be string"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码片段进行参数检查，如果参数不正确，它将把错误传递给回调函数。最近更新的 API 允许将参数传递给<code>process.nextTick()</code>，使其能够接收回调函数之后传递的任何参数，并将其传递给回调函数，因此你不必嵌套函数。</p><p>我们所做的是将错误传递回用户，但仅在允许用户代码的其余部分执行后。通过使用<code>process.nextTick()</code>，我们保证 apiCall()总是在用户代码的其余部分运行并且在允许事件循环继续之前运行其回调函数。为了实现这一点，JS 调用栈允许展开，然后立即执行提供的回调函数，这允许人们对<code>process.nextTick()</code>进行递归调用，而不会导致 v8 的<code>RangeError: Maximum call stack size exceeded</code>。</p><p>这种理念可能导致一些潜在的问题情况。以这个片段为例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> bar<span class="token punctuation">;</span><span class="token comment">// this has an asynchronous signature, but calls callback synchronously</span><span class="token keyword">function</span> <span class="token function">someAsyncApiCall</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// the callback is called before `someAsyncApiCall` completes.</span><span class="token function">someAsyncApiCall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// since someAsyncApiCall hasn't completed, bar hasn't been assigned any value</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户定义了<code>someAsyncApiCall()</code>以具有异步签名，但实际上它是同步操作的。当调用它时，由<code>someAsyncApiCall()</code>提供的回调函数在事件循环的同一阶段中被调用，因为<code>someAsyncApiCall()</code>实际上并没有异步操作。因此，回调函数尝试引用 bar 变量，即使它可能还没有在范围内，因为脚本还没有能够完成运行。</p><p>通过将回调函数放置在<code>process.nextTick()</code>中，脚本仍然可以完全运行，允许在调用回调函数之前初始化所有变量、函数等。它还有一个优点，就是不允许事件循环继续。在允许事件循环继续之前，提醒用户存在错误可能是有用的。以下是使用<code>process.nextTick()</code>的先前示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> bar<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">someAsyncApiCall</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">someAsyncApiCall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面有一个真正用在应用中的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"listening"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个例子中当，当 listen 方法被调用时，除非端口被占用，否则会立刻绑定在对应的端口上。</p><p>这意味着此时这个端口可以立刻触发 listening 事件并执行其回调。然而，这时候<code>on(&#39;listening)</code>还没有将 callback 设置好，自然没有 callback 可以执行。</p><p>为了避免出现这种情况，node 会在 listen 事件中使用<code>process.nextTick()</code>方法，确保事件在回调函数绑定后被触发。</p><h4 id="setTimeout-和-setImmediate"><a href="#setTimeout-和-setImmediate" class="headerlink" title="setTimeout()和 setImmediate()"></a><strong>setTimeout()和 setImmediate()</strong></h4><p>在三个方法中，这两个方法最容易被弄混。实际上，某些情况下这两个方法的表现也非常相似。然而实际上，这两个方法的意义却大为不同。</p><p><code>setTimeout()</code>方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。注意这个<strong>第一时间执行</strong>，这意味着，受到操作系统和当前执行任务的诸多影响，该回调并不会在我们预期的时间间隔后精准的执行。执行的时间存在一定的延迟和误差，这是不可避免的。node 会在可以执行 timer 回调的第一时间去执行你所设定的任务。</p><p><code>setImmediate()</code>方法从意义上讲是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即<code>poll</code>阶段之后。有趣的是，这个名字的意义和上面提到的<code>process.nextTick()</code>方法才是最匹配的。node 的开发者们也清楚这两个方法的命名上存在一定的混淆，他们表示不会把这两个方法的名字调换过来—因为有大量的 node 程序使用着这两个方法，调换命名所带来的好处与它的影响相比不值一提。</p><p>setTimeout()和不设置时间间隔的 setImmediate()表现上极其相似。猜猜下面这段代码的结果是什么？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"immediate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，答案是不一定。没错，就连 node 的开发者都无法准确的判断这两者的顺序谁前谁后。这取决于这段代码的运行环境。运行环境中的各种复杂的情况会导致在同步队列里两个方法的顺序随机决定。</p><p>但是，在一种情况下可以准确判断两个方法回调的执行顺序，那就是在一个 I&#x2F;O 事件的回调中。下面这段代码的顺序永远是固定的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./path"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"read file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> setImmediate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner readFile ----> setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案永远是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">immediate<span class="token function">timeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为在 I&#x2F;O 事件的回调中，<code>setImmediate</code>方法的回调永远在<code>timer</code>的回调前执行。</p><h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p>Node 的模块规范和浏览器的模块规范不同，服务端 node 采用的是<code>Commonjs</code>规范，浏览器采用的<code>ESModule</code>规范</p><p>它们有两个比较大的差异</p><ol><li><code>Commonjs</code>模块输出的是一个<strong>值的拷贝</strong>, <code>ESModule</code>输出的是<strong>值的引用</strong></li></ol><p>因为<code>Commonjs</code>模块输出的是值的拷贝，所以内部的变化影响不到这个值。不过只针对基本数据类型，当<code>module.exports</code>中导出了一个引用类型时，它拷贝的只是一个<strong>引用</strong>，所以还是会改变</p><p>再说回<code>ESModule</code>，它的运行机制是在 JS 引擎对脚本静态分析的时候，遇到<code>import</code>关键字，就会生成一个只读引用。<br>等到脚本真正执行时，再更具这个只读引用，找到对应模块然后取值。所以，只要原始值改变，<code>import</code>加载的内容也会跟着变。<br>因此,<code>ESModule</code>是动态引用，且不会缓存值，模块里面的变量绑定其所在的模块。</p><ol start="2"><li><code>CommonJS</code> 模块是运行时加载，<code>ESModule</code> 是编译时输出接口。</li></ol><p>因为<code>CommonJS</code>加载的是一个对象(即<code>module.exports属性</code>)，该对象只有在脚本运行完才会生成。而<code>ESModule</code>不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段生成</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#6. 发送http请求，理解multipart/form-data</title>
      <link href="/2023/04/11/hou-duan/node/nodejs-ts-6/"/>
      <url>/2023/04/11/hou-duan/node/nodejs-ts-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://wanago.io/2019/03/18/node-js-typescript-6-sending-http-requests-understanding-multipart-form-data/">原文链接</a></p></blockquote><p>HTTP 是一种协议，它允许你请求例如<strong>JSON 数据</strong>和<strong>HTML 文档</strong>这项的资源。它连接<strong>client</strong>和<strong>server</strong>，来帮助你传递和交换信息。当数据从<strong>client</strong>发出就叫<code>request</code>。当数据从<strong>server</strong>发出就叫<code>response</code>。在这篇文章中，我们主要讲的是如何发出<code>request</code>。</p><blockquote><p>本文介绍了使用原生 Node.js 中进行 HTTP 请求的方法。其他可行的解决方案是使用<a href="https://github.com/axios/axios">axios</a>这样的库。</p></blockquote><h2 id="发送一个-http-请求"><a href="#发送一个-http-请求" class="headerlink" title="发送一个 http 请求"></a>发送一个 http 请求</h2><p>想要发送一个 http 请求，我们需要使用<code>http</code>模块。它包含了请求方法。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"http"</span><span class="token punctuation">;</span><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">"jsonplaceholder.typicode.com"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"/todos/1"</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>request</code>方法的第一个参数是一个对象，他们的意思都比较好理解。</p><p>最后一个参数是一个回调函数，这个回调的第一个参数是服务端的<code>response</code>实例。它包含了我们想得到的一些响应信息，比如<code>statusCode(状态码)</code>。</p><p>还有一个重要的东西就是<strong>readable stream</strong>。由于我们在之前的文章中就已经介绍过了，这里就不再赘述，直接上代码。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"http"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createWriteStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">"jsonplaceholder.typicode.com"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"/todos/1"</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个代码中，我们读取了<code>jsonplaceholder.typicode.com/todos/1</code>这个路径下的<code>json</code>资源，然后我们创建了一个可写流，并且将 json 资源的<strong>可读流</strong>写入到了<code>file.txt</code>中</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;userId&quot;: 1,  &quot;id&quot;: 1,  &quot;title&quot;: &quot;delectus aut autem&quot;,  &quot;completed&quot;: false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个我们可能会用到的就是在一个变量中存储<strong>请求 body</strong>。因为它是一个可读流，我们只需要解析它的<code>chunks</code>即可。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">"jsonplaceholder.typicode.com"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"/todos/1"</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> chunks<span class="token operator">:</span> Uint8Array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这当中有很多操作，我们可以通过<code>Promise</code>来简化这一流程</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> object<span class="token punctuation">;</span>  headers<span class="token operator">:</span> IncomingHttpHeaders<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">performRequest</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> statusCode<span class="token punctuation">,</span> headers <span class="token punctuation">&#125;</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">>=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> chunks<span class="token operator">:</span> Uint8Array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> result<span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          data<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>          headers<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  host<span class="token operator">:</span> <span class="token string">"jsonplaceholder.typicode.com"</span><span class="token punctuation">,</span>  path<span class="token operator">:</span> <span class="token string">"/todos1"</span><span class="token punctuation">,</span>  method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会返回一个<code>Not Found</code>的错误信息，因为我们故意将资源的路径写成了<code>todo1</code>。这是为了展示一下通过封装可以处理一些通用的信息。</p><h2 id="http-ClientRequest"><a href="#http-ClientRequest" class="headerlink" title="http.ClientRequest"></a>http.ClientRequest</h2><p><code>request</code>函数返回一个继承与<code>Stream</code>的<code>ClientRequest</code>的实例。我们可以用它来发送一些<code>POST</code>请求。</p><p>在测试这个功能前，我们先用<code>express</code>实现搭建一个 server</p><p>首先先自己创建另一个项目<code>express-demo</code></p><pre class="line-numbers language-none"><code class="language-none">yarn init -yyarn add typescript express ts-node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后配置<code>tsconfig.json</code>:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./src"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>package.json</code>添加脚本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"ts-node ./src/server.ts"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，在<code>src/server.ts</code>中编写接口</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这，一个基础的服务就完成了。</p><hr><p>然后，回到之前的项目中，在<code>index.ts</code>写下请求相关代码</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    port<span class="token operator">:</span> <span class="token string">"5001"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"/upload"</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    author<span class="token operator">:</span> <span class="token string">"Marcin"</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">"Lorem ipsum"</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">"Dolor sit amet"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现每个例子都需要以<code>end</code>函数结尾，这是用来表示请求已经结束。</p><h2 id="使用multipart-form-data上传文件"><a href="#使用multipart-form-data上传文件" class="headerlink" title="使用multipart/form-data上传文件"></a>使用<code>multipart/form-data</code>上传文件</h2><p>另一个需要将请求作为流的就是上传文件。我们需要使用<code>multipart/form-data</code>来上传文件。</p><p><code>FormData</code>提供了一个方法去构造<code>key/value对</code>来作为 form 对象的<code>字段</code>和<code>值</code>。当我们在浏览器环境时，我们可以很简单的使用<code>FormData()</code>构造函数来创建爱你。但 Node 中并没有提供，我们使用一个第三方包<code>form-data</code>来完成。</p><p><code>npm install @typings/form-data form-data</code></p><p><code>Multipart</code>来源于<code>MIME</code>，一个扩展电子邮件格式的标准，代表多用途互联网邮件扩展。该类型的请求将一组或多组数据合并到一个<code>body</code>，并以 <strong>boundary(随机字符串)</strong> 分隔。通常，在发送文件时，我们使用<code>multipart/form-data</code>,这是<code>Multipart</code>的一个子类型，在网络上被广泛支持</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> FormData <span class="token keyword">from</span> <span class="token string">"form-data"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createReadStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./photo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">,</span> readStream<span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"Marcin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"lastName"</span><span class="token punctuation">,</span> <span class="token string">"Wanago"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    port<span class="token operator">:</span> <span class="token string">"5000"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"/upload"</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> form<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>form-data</code>库创建了可读流，我们将其与请求一起发送。上面的代码中有一个有趣的部分是<code>form.getHeaders()</code>。</p><h2 id="Boundary"><a href="#Boundary" class="headerlink" title="Boundary"></a>Boundary</h2><p>当发送<code>multipart/form-data</code>时，我们需要使用适当的 headers。我们可以通过以下示例来看<code>form-data</code>库为我们生成了什么：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> FormData <span class="token keyword">from</span> <span class="token string">"form-data"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createReadStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./photo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">,</span> readStream<span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"Marcin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"lastName"</span><span class="token punctuation">,</span> <span class="token string">"Wanago"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码输出如下:</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &#39;content-type&#39;: &#39;multipart&#x2F;form-data; boundary&#x3D;--------------------------898552055688392969814829&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如你所见，他将内容的类型设置为<code>multipart/form-data</code>，并在其中设置一个每次都不同的随机字符串的<code>boundary</code>。它被传递到<code>headers</code>中去定义一个字符串来划分表单数据的不同部分。</p><p>为了充分理解它，我们需要将我们的<code>form</code>通过<code>pipe</code>写入到一个文件中去读取</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> FormData <span class="token keyword">from</span> <span class="token string">"form-data"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createReadStream<span class="token punctuation">,</span> createWriteStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./photo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">,</span> readStream<span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"Marcin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"lastName"</span><span class="token punctuation">,</span> <span class="token string">"Wanago"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面首先会输出</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &#39;content-type&#39;: &#39;multipart&#x2F;form-data; boundary&#x3D;--------------------------966991448654339731356450&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终，我们可以看到<code>file.txt</code>中的文件如下</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token number">966991448654339731356450</span>Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"photo"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"photo.jpg"</span>Content<span class="token operator">-</span>Type<span class="token operator">:</span> image<span class="token operator">/</span>jpeg���� <span class="token constant">JFIF</span>    �� <span class="token punctuation">;</span><span class="token constant">CREATOR</span><span class="token operator">:</span> gd<span class="token operator">-</span>jpeg v1<span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>using <span class="token constant">IJG</span> <span class="token constant">JPEG</span> v90<span class="token punctuation">)</span><span class="token punctuation">,</span> quality <span class="token operator">=</span> <span class="token number">82</span>�� <span class="token constant">C</span>    <span class="token operator">!</span>'<span class="token string">"#%%%),($+!$%$�� C   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$�� ,,"</span> ��   <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token number">966991448654339731356450</span>Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"firstName"</span>Marcin<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token number">966991448654339731356450</span>Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"lastName"</span>Wanago<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token number">966991448654339731356450</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>form</code>的每一部分都使用生成的<code>boundary</code>来划分，最后一个<code>boundary</code>在最后有两个额外的破折号。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，我们介绍了如何在 Node 中进行 http 请求，要做到这点，需要我们前面所学的关于流的知识。我们实现的功能之一就是上传文件。为了实现这一点，我们解释了<code>multipart/form-data</code>格式。这些知识也适用于前端。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#5. Writable Stream(可写流)</title>
      <link href="/2023/04/11/hou-duan/node/nodejs-ts-5/"/>
      <url>/2023/04/11/hou-duan/node/nodejs-ts-5/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章中，我们会继续讲解<code>stream</code>，不过这次我们重点说的是<code>writable stream</code>和<code>pipe</code>。我们会通过几个例子来理解<code>writable stream</code>的工作原理。同时，我们提供了 Node 环境中<code>process</code>对象中出现的流的例子:<code>stdin</code>,<code>stdout</code>和<code>stderr</code>。</p><h2 id="Writable-Stream"><a href="#Writable-Stream" class="headerlink" title="Writable Stream"></a>Writable Stream</h2><p>在之前文章的例子中，我们使用<code>fs.writeFile</code>方法创建和写入文件:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">,</span> <span class="token string">"hello-world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File created successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过在同一个文件上多次使用 <code>fs.writeFile</code> 会引起文件的并发写入问题，这意味着多个写入操作可能会同时尝试访问同一个文件，并导致数据写入的混乱和不确定性。因此，为了保证文件的数据完整性和安全性，每次使用 <code>fs.writeFile</code> 写入文件时，需要等待前一个操作完成后才能进行下一个操作，这样可以避免并发写入的问题。这种方式虽然简单易用，但不适用于处理大量数据的情况，因为等待时间可能会很长，导致程序的性能下降。我们可以看下面这个例子:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">writeToFile</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> NodeJS<span class="token punctuation">.</span>ArrayBufferView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> flag<span class="token operator">:</span> <span class="token string">"a+"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 连续写入 5 次数据</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">writeToFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Data </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你运行这段代码时，你会发现，可能会出现乱序输出</p><pre class="line-numbers language-none"><code class="language-none">Data 0Data 2Data 1Data 4Data 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比之下，使用 <code>fs.createWriteStream</code> 可以更好地处理大量数据的写入操作，下面是一个简单的例子：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 创建可写流</span><span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> flags<span class="token operator">:</span> <span class="token string">"a+"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入数据</span><span class="token keyword">function</span> <span class="token function">writeToStream</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 连续写入 5 次数据</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">writeToStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Data </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭可写流</span>writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们使用 <code>fs.createWriteStream</code> 创建了一个可写流，并通过 <code>writeStream.write</code> 方法向文件中写入数据。这种方式可以分块逐个写入数据，避免了一次性写入大量数据的问题，因此可以更好地处理大量数据的写入操作，并提高程序的性能。</p><h2 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h2><p><code>pipe()</code> 是一个非常常用的方法，用于将可读流和可写流连接起来，以便从可读流中读取数据并将其写入到可写流中。例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">"./all.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们通过创建了<code>readableStream</code>和<code>writableStream</code>两个流来读取和写数据。<br>然后我们通过<code>pipe</code>方法来将可读流中的数据传输到可写流中，直到可读流结束或者可写流关闭为止。</p><p>这种方式可以非常高效的处理大量数据，且不需要手动控制数据的流动。</p><p>除了将可读流和可写流连接起来，<code>pipe</code>还可以将多个可读流连接起来，并输出给单个可写流。这可以很方便的处理多个源的数据，例如多文件合并为单文件。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> readableStream1 <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readableStream2 <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"file2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream1<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream2<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可写流的原理"><a href="#可写流的原理" class="headerlink" title="可写流的原理"></a>可写流的原理</h2><p><code>fs.createWriteStream</code>不是唯一创建可读流的方法。我们可以自己创建一个可读流。</p><p>每个可读流需要实现一个<code>_write</code>方法。当我们将数据写到流中时，就会间接的调用这个方法</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Writable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"stream"</span><span class="token punctuation">;</span><span class="token keyword">const</span> writable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Writable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writable<span class="token punctuation">.</span><span class="token function-variable function">_write</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>writable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子会输出<code>Hello world!</code></p><p>在上面这个例子中，每次我们写入<code>stream</code>，字符串就会被 console 输出。<code>encoding</code>变量是一个字符串，表示我们数据的编码格式。调用<code>next</code>方法表示数据已经刷新，意味着我们完成了对它的处理。</p><p><code>_write</code>方法也可以通过<code>Writable</code>构造函数，或者继承<code>Writable</code>类来声明。</p><p>有了这些知识，我们可以实现一个简化版的流，把数据写到一个文件中。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">WritableFileStream</span> <span class="token keyword">extends</span> <span class="token class-name">Writable</span> <span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token function">_write</span><span class="token punctuation">(</span>chunk<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> flag<span class="token operator">:</span> <span class="token string">"a+"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> readable <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readable1 <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WritableFileStream</span><span class="token punctuation">(</span><span class="token string">"./output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readable<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span>readable1<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，每次我们写入数据时(使用的是 pipe，会自动调用<code>writable.write</code>)，都会将数据添加到<code>output.txt</code>后。</p><h2 id="Process-流"><a href="#Process-流" class="headerlink" title="Process 流"></a>Process 流</h2><p>在第一章中，我们提到过全局<code>process</code>对象。除了<code>process.argv</code>和<code>process.execPath</code>等属性外，它还包含我们的应用程序可以使用的流。</p><h3 id="process-stdin"><a href="#process-stdin" class="headerlink" title="process.stdin"></a>process.stdin</h3><p><code>process.stdin</code>是一个标准输入流(<code>standard input</code>)，用于读取用户的输入。我们可以通过以下代码创建一个简单的<code>REPL（Read-Eval-Print Loop）</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> readline <span class="token keyword">from</span> <span class="token string">"readline"</span><span class="token punctuation">;</span><span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  input<span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>  output<span class="token operator">:</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rl<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>readline</code> 模块创建了一个 <code>Interface</code> 对象，将 <code>process.stdin</code> 作为输入流传递给它，然后通过 <code>rl.question()</code> 方法向用户提出一个问题，并在用户输入回答后，将回答作为参数传递给回调函数。</p><p><code>process.stdin</code> 可以通过监听 <code>data</code> 事件来读取用户输入的数据，例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码会打印出用户输入的数据。当用户按下回车键时，Node.js 会将输入的数据作为一个 Buffer 对象触发 <code>data</code> 事件，然后程序可以通过该事件的回调函数来处理数据。</p><h3 id="process-stdout-和-process-stderr"><a href="#process-stdout-和-process-stderr" class="headerlink" title="process.stdout 和 process.stderr"></a>process.stdout 和 process.stderr</h3><p><code>process.stdout</code>和<code>process.stderr</code>是一个可写流。它们被用在<code>console.log()</code>和<code>console.error()</code>,向它们写入文本就会在控制台中输出。我们可以轻松地利用它们来记录文件：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> readable <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readable<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们介绍了可写流：如何使用它们来处理文件以及如何通过管道与可读流结合使用。我们还实现了可写流来处理文件，其中包括编写 _write 函数。我们还学习了如何通过 process.stdin 流传递附加数据以及 process.stdout 和 process.stderr 流的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交易相关知识</title>
      <link href="/2023/04/07/web3.0/0.jiao-yi-xiang-guan-zhi-shi/"/>
      <url>/2023/04/07/web3.0/0.jiao-yi-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="常用名词解释"><a href="#常用名词解释" class="headerlink" title="常用名词解释"></a>常用名词解释</h2><h3 id="市场行情"><a href="#市场行情" class="headerlink" title="市场行情"></a>市场行情</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/58963815">数字货币</a></p></li><li><p><a href="https://academy.binance.com/zh/articles/a-beginners-guide-to-candlestick-charts">K 线图</a></p></li><li><p><a href="https://academy.binance.com/zh/articles/what-is-a-spot-market-and-how-to-do-spot-trading">Spot-现货交易</a></p><ul><li><a href="https://zhuanlan.zhihu.com/p/70602930">trade-币币交易&#x2F;交易对</a><ul><li><a href="https://www.fameex.com/zh-CN/announcement/what-is-spot-trading">https://www.fameex.com/zh-CN/announcement/what-is-spot-trading</a></li><li><a href="https://zhuanlan.zhihu.com/p/70602930">https://zhuanlan.zhihu.com/p/70602930</a>)</li></ul></li><li><a href="https://www.binance.com/zh-CN/margin-trading">margin-trading-杠杆交易</a></li></ul></li><li><p>Quant-量化策略</p><ul><li><a href="https://www.binance.com/zh-CN/support/faq/%E4%BB%80%E4%B9%88%E6%98%AF%E7%8E%B0%E8%B4%A7%E7%BD%91%E6%A0%BC%E4%BA%A4%E6%98%93-d5f441e8ab544a5b98241e00efb3a4ab">Spot-Grids-现货网格</a></li><li>Spot-DCA-现货定投</li></ul></li><li><p>Derivatives-衍生品交易</p><ul><li>USDT Perpetual USDT 永续合约<ul><li><a href="https://zhuanlan.zhihu.com/p/354498449">https://zhuanlan.zhihu.com/p/354498449</a></li><li><a href="https://zhuanlan.zhihu.com/p/91731003">https://zhuanlan.zhihu.com/p/91731003</a></li></ul></li><li><a href="https://www.odaily.news/post/5147384">Options 期权交易</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web3.0 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#2. EventEmitter</title>
      <link href="/2023/04/06/hou-duan/node/nodejs-ts-2/"/>
      <url>/2023/04/06/hou-duan/node/nodejs-ts-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个系列是翻译文章，虽然是翻译，但有些地方还是做了一些修改。如果你想要看原版，那可以根据这个<a href="https://wanago.io/2019/02/18/typescript-node-js-eventemitter/">链接</a>去查找。</p></blockquote><p>在这篇文章中，我们继续讲与 Node.js 有关的主要概念。这次我们深入探讨<code>EventEmitter</code>的概念。我们解释了它的同步性和工作原理，这有助于理解 Node.js 的其他功能，因为其中一些功能在底层使用了<code>EventEmitter</code>。</p><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p>事件是 JavaScript 的一个重要部分，因为很多 Node.js 核心功能都依赖于事件驱动架构。你会发现很多对象都继承自 EventEmitter。</p><p>某些对象可以发出事件，我们称它们为<code>事件发射器（emitters）</code>。我们可以监听这些事件，并使用称为<code>监听器（listeners）</code>的回调函数来做出反应。</p><p>EventEmitter 的实例有一个<code>on</code>方法，可以将一个或多个函数附加到该对象上。EventEmitter 的实例还有一个<code>emit</code>方法，用于发出事件并导致所有<code>EventEmitter</code>调用所有监听器。</p><p><code>demo2/index.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> EventEmitter <span class="token keyword">from</span> <span class="token string">"events"</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 3</span><span class="token comment">// one</span><span class="token comment">// two</span><span class="token comment">// three</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的输出，我们可以发现。所有通过<code>on</code>方法监听的名为<code>event</code>的事件的回调函数，在<code>emit</code>触发<code>event</code>事件后会同步调用。</p><blockquote><p><code>on</code>函数是<code>addEventListener</code>的别名，两个函数的作用方式相同。</p></blockquote><p>如果你在<code>emit</code>触发后去监听<code>event</code>事件，<code>EventEmitter</code>则不会去调用它</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Event occured!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// not logged into the console</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个需要牢牢记住的点。</p><h2 id="向监听器传输额外的数据"><a href="#向监听器传输额外的数据" class="headerlink" title="向监听器传输额外的数据"></a>向监听器传输额外的数据</h2><p><code>emit</code>方法允许你发送数据到<code>listener</code>函数。在<code>listener</code>函数内部，<code>this</code>指向<code>EventEmitter</code>的实例</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; key: value &#125;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> eventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  key<span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你遇到的很多<code>emitter(发射器)</code>都会向<code>listeners(监听器)</code>传递额外的参数。</p><p>如果你使用箭头函数，<code>this</code>的指向就不在是<code>EventEmitter</code>的实例，而是一个空对象<code>&#123;&#125;</code>。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> eventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> _self<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为箭头函数的 this 是继承自父级作用域，而在 node 中顶层作用域的 this 就是一个空对象<code>&#123;&#125;</code></p><h2 id="移除-listeners"><a href="#移除-listeners" class="headerlink" title="移除 listeners"></a>移除 listeners</h2><p>如果你不希望某个监听器再被调用，你可以使用<code>removeListener</code>函数。通过它，你从一个特定的事件中移除监听器。要做到这一点，你需要向<code>removeListener</code>函数提供事件的名称，以及对回调函数的引用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Event occurred!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Event occurred!</span>eventEmitter<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/// Nothing happened</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件的同步性质"><a href="#事件的同步性质" class="headerlink" title="事件的同步性质"></a>事件的同步性质</h2><p>如上所述，EventEmitter 同步的调用所有<code>listener</code>。我们可以通过将它们之间互相调用来观察:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"First event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event2"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Second event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Third event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在打印了一堆信息后，你会看到一个错误:</p><blockquote><p>RangeError: Maximum call stack size exceeded</p></blockquote><p>报错是因为上面的监听器实际执行的顺序是这样的：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">event1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"First event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">event2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">event2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Second event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">event3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">event3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Third event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">event1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">event1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>emitter</code>以同步方式执行所有回调函数。每次调用函数时，其上下文都会推送到调用堆栈的顶部。当函数结束时，上下文从堆栈中取出。如果在另一个函数内部调用一个函数，数据可能会在调用堆栈中积累，并最终导致溢出。</p><p>你可以通过使用 setTimeout 函数来改变这种行为。当 Node.js 执行到 setTimeout 函数时，它会设置一个计时器。当计时器到期时，它会将回调函数放到事件循环中<code>timer</code>阶段的队列中去执行（这里原文讲的比较模糊，所以我添加了自己的理解，如果感觉不对，可以去看原文）。由于这样，一个函数就不会在另一个函数内部调用，调用栈也不会超过限制。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"First event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event2"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Second event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Third event here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只执行一次事件"><a href="#只执行一次事件" class="headerlink" title="只执行一次事件"></a>只执行一次事件</h2><p>当你使用<code>on</code>或<code>addEventListener</code>方法注册监听器时，Node.js EventEmitter 在每次发出事件时都会调用它。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> EventEmitter <span class="token keyword">from</span> <span class="token string">"events"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyEventEmitter</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>once</code>代替<code>on</code>，可以让你注册的监听器在某个事件中只被调用一次</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> EventEmitter <span class="token keyword">from</span> <span class="token string">"events"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyEventEmitter</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing happens</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing happens</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 Node.js EventEmitter 的最重要的特性。由于它在 Node.js 的其他核心功能中被广泛使用，因此我们在接下来的系列文章中会遇到它，例如流（streams）等重要概念。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#3. Buffer</title>
      <link href="/2023/04/06/hou-duan/node/nodejs-ts-3/"/>
      <url>/2023/04/06/hou-duan/node/nodejs-ts-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个系列是翻译文章，虽然是翻译，但有些地方还是做了一些修改。如果你想要看原版，那可以根据这个<a href="https://wanago.io/2019/02/25/node-js-typescript-3-the-buffer/">链接</a>去查找。</p></blockquote><p>这篇文章介绍了 Node 中另一个重要的概念:<code>Buffer</code>。为了理解它，我们还会解释什么是二进制数据和为什么我们需要 <strong>character encodings(字符编码)</strong> 。所有这些信息在深入研究 Node.js 的其他部分，例如<code>stream</code>时非常重要。</p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p><code>Buffer</code>是 Node 中的一个全局对象，它不需要<code>require</code>就可以直接使用。它的主要作用是帮助我们处理二进制数据。</p><p>因为服务端不像客户端只需要做一些简单的字符操作或 DOM 操作，服务端需要处理<code>网络协议</code>、<code>数据库操作</code>、<code>图片处理</code>、<code>文件处理</code>、<code>加解密</code>等，在这些操作中，需要处理大量的二进制数据。</p><p>但是它究竟是什么？</p><p>计算机以二进制（0 和 1）表示数据。要存储一个数字，计算机首先将其转换为二进制表示。数字转换通常相对简单，在大多数情况下，不会对其二进制形式产生任何疑问。</p><p>但是数字并不是我们处理的唯一数据类型：我们还有图像、文本、视频等等。为了表示这些数据，我们需要制定一些约定，因为所有数据都是用数字来表示的。当涉及到文本时，有多种字符编码，定义字符集以及如何使用数字来表示它们。其中一个非常流行的编码是<a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>，我们在本文中使用它。</p><h2 id="buffer-是一个数字数组"><a href="#buffer-是一个数字数组" class="headerlink" title="buffer 是一个数字数组"></a>buffer 是一个数字数组</h2><p>buffer 对象，类似于 number 数组，它的每个<strong>元素为 16 进制的两位数（存储的时候还是二进制，显示为 16 进制是因为可读性并且可以减少字符输出）</strong>，表示一个字节。由于单个字节上保存的最大数字为 255 <strong>（因为一个字节可以表示的二进制位数是 8 位（1 个字节 &#x3D; 8 个二进制位）。而每一位的值只有 0 或 1 两种可能，所以 8 位的二进制数可以表示 2^8 种不同的数值，即 256 种（从 0 到 255）。因此，一个字节最多只能表示到 255。）</strong> 因此 buffer 元素不能包含更大的数字：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 255</span>buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">260</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">260</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">516</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">516</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 206</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，如果你尝试分配一个<strong>大于 255</strong>的值，<strong>256</strong>就会除以这个数，并将<strong>余数</strong>分配给该值。</p><p>而负数的处理比较不同。如果你尝试将一个负数赋给一个字节，它将使用<a href="https://en.wikipedia.org/wiki/Two%27s_complement">二进制补码</a>系统进行转换。</p><p>我们可以看到最后一个例子<code>buffer[4] = -50</code>，输出的是 206</p><p>它的计算过程如下：</p><blockquote><p>$-50_{(10)} &#x3D; 11001110_{(U2)}$</p></blockquote><p>上面的公式表示把十进制数-50 转化成二进制补码表示，补码表示方式为<strong>取反加一</strong>。具体过程如下：</p><ol><li>取绝对值，即 50，转化为二进制数：00110010</li><li>取反：11001101</li><li>加一：11001110</li></ol><p>最终得到的<strong>11001110</strong>是 <strong>-50</strong> 在二进制补码表示方式下的值。</p><p>然后在 JavaScript 中输出一个数字的时候，会默认将这个二进制数转换回正常的十进制展示。也就是类似如下，所以输出 206</p><p><code>parseInt(&#39;11001110&#39;, 2); // 206</code></p><p>当你创建一个 buffer，你也可以使用一个值来填充它</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Creates a Buffer of length 5, filled with 1</span><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Creates a Buffer containing 1, 2, 3</span><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串-Buffer"><a href="#字符串-Buffer" class="headerlink" title="字符串 Buffer"></a>字符串 Buffer</h2><p>由于 Buffer 是存储字节数据, 你也可以使用 Buffer 来操作字符串</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，我们需要记住它使用的是<code>UTF-8</code>编码。你可以使用传递给<code>from</code>函数的第二个参数来更改它。</p><p>例如 Buffer 可以使用 toString 方法来轻松读取</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然也并不总是那么简单！有许多 UTF-8 字符需要<strong>多个字节来表示</strong>，这可能会给你带来一些麻烦。让我们看看这个字符串：</p><blockquote><p>Hello 🌎 world!</p></blockquote><p>中间有一个 emoji，由四个字节组成： <code>11110000</code> <code>10011111</code> <code>10001100</code> <code>10001110</code></p><p>我们把这些数据保存在多个 buffer：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> buffers <span class="token operator">=</span> <span class="token punctuation">[</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0b11110000</span><span class="token punctuation">,</span> <span class="token number">0b10011111</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0b10001100</span><span class="token punctuation">,</span> <span class="token number">0b10001110</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">" world!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>0b</code>表示是在 JavaScript 中写一个二进制数据</p></blockquote><p>如果你按块解析一个大的文本文件，然后逐块解析，其中一个块可能只包含字符的一部分，就像上面的例子一样。</p><p>可以看我们下面的输出:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>buffers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  result <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello ��� world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它并没有达到我们想要的效果。这是因为每个 buffer 都被单独处理。我们可以使用<code>StringDecoder</code>进行改进。它提供了一种 API，用于将 Buffer 对象解码为字符串，同时保留多字节字符。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StringDecoder <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"string_decoder"</span><span class="token punctuation">;</span><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> buffers <span class="token operator">=</span> <span class="token punctuation">[</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0b11110000</span><span class="token punctuation">,</span> <span class="token number">0b10011111</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0b10001100</span><span class="token punctuation">,</span> <span class="token number">0b10001110</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">" world!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> buffers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>result<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>decoder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello 🌎 world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StringDecoder</code>可以确保解码后的字符串不包含任何不完整的多字节字符，它通过将不完整的字符保留在内部 buffer 中，直到下一次调用<code>decoder.write()</code>方法。</p><h2 id="读取一个文件"><a href="#读取一个文件" class="headerlink" title="读取一个文件"></a>读取一个文件</h2><p>在该系列的第一部分，我们读取一个指定编码的文件。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cat</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> encoding<span class="token operator">:</span> <span class="token string">"utf-8"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正是因为指定了编码格式，所以我们会接收到一个字符串。如果我们不提供一个编码格式，接收到的就是原始的 buffer。需要通过<code>toString</code>来转换</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content <span class="token keyword">instanceof</span> <span class="token class-name">Buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>readFile</code>方法会一次性读取整个文件的内容。因此，即使文件非常大，它也只会在整个文件处理完后调用一次回调函数。如果想在整个文件内容被加载之前对文件的部分内容执行操作，需要使用<code>createReadStream</code>函数返回一个流。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>buffer</code>是一个<code>字节数组</code>，其中每个元素的值范围从 0 到 255。由于所有类型的数据（如图像和文本）都必须表示为数字，因此我们还解释了<code>字符编码</code>的概念。在讨论即将涉及到的流时，所有这些信息都是很重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#4. Readable Stream(可读流)</title>
      <link href="/2023/04/06/hou-duan/node/nodejs-ts-4/"/>
      <url>/2023/04/06/hou-duan/node/nodejs-ts-4/</url>
      
        <content type="html"><![CDATA[<p>在 Nodejs 中，<code>Stream</code>是非常重要的，我们可以通过<code>Stream</code>来高效的读写数据。比如在处理文件或者处理 http 请求时。在这篇文章中，我们主要讲的是<code>readable stream(可读流)</code></p><h2 id="Readable-Streams"><a href="#Readable-Streams" class="headerlink" title="Readable Streams"></a>Readable Streams</h2><p><code>Stream</code>是一种用于处理无法被一次性完全获取的数据集合。因为有了这种方式，数据不需要一次性全部存在内存中，这使得处理大量数据的时候变得高效。除此之外，你可以在只有部分数据可用时开始处理数据，而不是等待整个数据可用。</p><p>在我们之前的例子中，我们通过下面的方式读取文件：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content <span class="token keyword">instanceof</span> <span class="token class-name">Buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码并不高效，因为它会等待整个文件加载到内存中然后再执行操作。而 Nodejs 为我们提供了<code>fs.createReadableStream</code>API 来编写可读流的操作。</p><p>每一个<code>stream</code>都是<code>EventEmitter</code>的一个实例。通过<code>EventEmitter</code>我们可以监听到数据是否读取到。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"New chunk of data:"</span><span class="token punctuation">,</span> chunk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的方法中，文件被存储在了内部的<code>buffer</code>中。根据<code>createReadStream</code>的第二个参数有一个<code>highWaterMark</code>属性（这里默认是 64kib）。当触发<code>data</code>事件后，会根据它的限制来读取文件，如果文件大于它的阈值，那么就会被分割为多个<strong>chunk</strong>。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">New chunk <span class="token keyword">of</span> data<span class="token operator">:</span> <span class="token operator">&lt;</span>Buffer <span class="token number">68</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">61</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上，每个<code>chunk</code>就是一个<code>buffer</code>实例。你的文件越大，接收到的<code>chunk</code>就越多。</p><p>如果想要将<code>buffer</code>转为字符串有以下几种方法：</p><ol><li><code>buffer.toString()</code></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"New chunk of data:"</span><span class="token punctuation">,</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<code>StringDecoder</code></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StringDecoder <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"string_decoder"</span><span class="token punctuation">;</span><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"New chunk of data:"</span><span class="token punctuation">,</span> decoder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk <span class="token keyword">as</span> Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>还有一种就是通过在<code>createReadStream</code>中明确定义字符编码</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> encoding<span class="token operator">:</span> <span class="token string">"utf-8"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关于流的两个模式"><a href="#关于流的两个模式" class="headerlink" title="关于流的两个模式"></a>关于流的两个模式</h2><p>在上面的示例中，我们通过在<code>data</code>事件上添加监听器，使<code>stream</code>开始发出<code>chunk</code>。</p><p>那么如果我们在创建<code>stream</code>后一段时间再添加回调函数，结果是什么呢？</p><p>我们仍然可以监听到数据。</p><p>想要更好的理解它，我们需要去看一下可读流的模式。<code>readable stream</code>有两个模式:</p><ul><li>paused</li><li>flowing</li></ul><p>我们可以看下面的例子：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">"./file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先创建了一个可读流，然后在<code>setTimeout</code>中延迟读取流。但是最终还是可以正常的读取数据，这是因为<code>可读流</code>和<code>可写流</code>都会将文件存储在了内部的<code>buffer</code>中。且所有<code>stream</code>默认都是使用<code>paused</code>模式。我们需要通过添加一个<code>data</code>事件的监听器来自动切换流的模式到<code>flowing</code>。当切换为<code>flowing</code>模式时，才开始读取数据，所以数据并不会因为延迟调用而丢失。</p><p>还有一种手动将<code>readable stream</code>切换到<code>flowing</code>模式的方法是调用 <code>stream.resume</code> 方法。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">stream<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个例子中，我们是先手动修改模式，不过我们并没有及时的处理。所以当延迟执行后，<code>stream</code>已经丢失了。最终导致上面这个例子什么都不会输出</p><h2 id="Readable-stream的原理是什么"><a href="#Readable-stream的原理是什么" class="headerlink" title="Readable stream的原理是什么"></a><code>Readable stream</code>的原理是什么</h2><p>在使用 <code>fs.createReadableStream</code> 熟悉可读流之后，让我们创建自己的可读流以更好地说明其工作原理。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Readable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"stream"</span><span class="token punctuation">;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>push 方法会将数据添加到<code>内部buffer</code>中，以供用户使用。最后<code>push(null)</code>表示流已经完成数据输入。</p><p>上面的例子会输出</p><pre class="line-numbers language-none"><code class="language-none">HelloWorld!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Readable实例的read方法和readable事件"><a href="#Readable实例的read方法和readable事件" class="headerlink" title="Readable实例的read方法和readable事件"></a><code>Readable</code>实例的<code>read</code>方法和<code>readable</code>事件</h2><p><code>readable.read()</code> 是可读流中用于手动触发读取数据的方法。当可读流处于<code>flowing</code>模式时，数据会自动从底层系统读取到内存中，并被放入<code>buffer</code>中，供用户使用。但是，在某些情况下，你可能需要手动控制数据的读取速度，这时候就可以使用 <code>readable.read()</code> 方法手动触发读取。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Readable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"stream"</span><span class="token punctuation">;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> read <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"read() called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们运行上面代码后，我们可以看到当我们开始读取流时，<code>read</code>函数被多次调用。并且，每次只输出两个字节。</p><pre class="line-numbers language-none"><code class="language-none">read() calledHeread() calledllread() calledoWread() calledorread() calledldread() called!read() calledread() calledread() calledread() called<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以使用<code>readable.on(&#39;readable&#39;)</code> 来读流是否有数据可供读取</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Readable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"stream"</span><span class="token punctuation">;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"readable"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> data<span class="token punctuation">;</span>  <span class="token comment">// 使用一个循环，以确保我们读取所有当前可用的数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>data <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Reached end of stream."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，当可读流被读取时，会先在 <code>read</code> 方法中推送数据到队列中，然后当调用 <code>stream.read()</code> 时，会从<code>buffer</code>中读取数据。<code>readable.on(&#39;readable&#39;)</code> 用于监听可读流是否有新数据可供读取，当可读流中有新数据时，会触发回调函数，循环读取<code>buffer</code>中的数据，直到数据为空为止。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们介绍了流是什么以及如何使用它们。虽然在本系列文章的这一部分中，我们着重讨论了可读流，但在接下来的部分中，我们将涵盖可写流、管道等更多内容。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js TypeScript#1. Modules, process参数, 文件系统基础</title>
      <link href="/2023/04/04/hou-duan/node/nodejs-ts-1/"/>
      <url>/2023/04/04/hou-duan/node/nodejs-ts-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个系列是翻译文章，虽然是翻译，但有些地方还是做了一些修改。如果你想要看原版，那可以根据这个<a href="https://wanago.io/2019/02/11/node-js-typescript-modules-file-system">链接</a>去查找。</p></blockquote><p>在这个系列中，我们介绍了 Node.js 的核心概念。一般来说，在这个系列中，我们关注的是<strong>Node.js</strong>的环境，而不是<strong>JavaScript</strong>本身，同时使用 TypeScript 的静态类型优势。它涵盖了文件系统、事件循环和工作线程等方面。在本文中，我们创建了一个脚本，可以根据执行时传递的参数创建和读取文件。虽然我们在这里没有创建任何特定的 Web 应用程序，但我们学习了 Node.js 如何处理文件和服务器连接，这在许多情况下可能会有帮助。</p><h2 id="Node-基础"><a href="#Node-基础" class="headerlink" title="Node 基础"></a>Node 基础</h2><p>首先，让我们详细解释一下 Node.js 是什么，因为有时会被误解。简而言之，它是一个可以在浏览器外运行 JavaScript 的环境。现在在写前端项目时，大多都会用到 node，因为他附带了<code>Node Package Manager</code>。你可以使用一个简单的命令来查询:</p><p><code>node -v</code></p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>接下来让我们从一段比较奇特的代码开始来了解 Node 的模块是如何工作的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个例子可能看起来有点奇怪，因为 ECMAScript 规范规定如下：</p><blockquote><p>如果一个 ECMAScript 程序包含不在<code>FunctionBody</code>内的<code>return</code>语句，则被视为语法错误。</p></blockquote><p>当你运行它时，你会发现没有报错信息显示并且会输出<code>hello</code>。这是因为在 Node.js 中，每个文件都被视为一个独立的<code>模块</code>。在底层，Node.js 将它们包装在一个类似这样的函数中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// code of the module</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于这个特性，顶层变量的作用域仅限于<code>模块</code>内部，而不是整个项目的全局作用域。可以使用<code>模块</code>对象来导出值：</p><p>utilities.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  add<span class="token punctuation">,</span>  subtract<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要想访问上面<code>utilities.js</code>中导出的模块，我们需要使用<code>require</code>函数;<br>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utilities.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个模块系统是<a href="https://requirejs.org/docs/commonjs.html">CommonJS 规范</a>的实现</p><p>Node.js 调用包装我们模块的函数的方式是，将<code>this</code>关键字引用到<code>module.exports</code>。我们只需要在<code>utilities.js</code>中加上这段，就可以很轻松的证明：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述经常会导致混淆，因为如果在控制台中运行 Node.js，<code>this</code>关键字会引用全局对象。</p><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>作为一个 JS 开发者，你会比较熟悉浏览器中的<code>window</code>对象。在 Nodejs 中，我们有<code>global</code>对象。</p><p>当你在命令行运行 Node 或者是一个文件，Node 不会将你的代码包装在一个 module 中。当在命令行中使用 Node，你是在<code>全局作用域(global scope)</code>，<code>this</code>关键字指向<code>global</code>对象。然后，用<code>var</code>声明的变量被附加到<code>global</code>对象上,你可在终端中运行<code>node</code>，然后执行下面代码验证:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> this <span class="token operator">==</span><span class="token operator">=</span> global// <span class="token boolean">true</span><span class="token operator">></span> var key <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token operator">></span> global.key// <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>global</code>对象在所有模块间共享。如果在这个对象中添加属性，它可以在所有地方访问</p><h2 id="Process-参数"><a href="#Process-参数" class="headerlink" title="Process 参数"></a>Process 参数</h2><p><code>process</code>对象时<code>global</code>对象中的一个属性，因此你可以程序中的任何位置使用它。它非常有用，当我们需要收集有关 Node.js 应用程序环境的信息时，例如当前安装的 Node.js 版本。</p><p>在这个系列中将会深入讲解 process 对象，而今天我们专注于<code>process.argv</code>属性。该属性包含一个数组，其中包含启动 Node.js 进程时传递的<strong>命令行参数</strong>。</p><p>第一个元素与<code>process.execPath</code>相同，它保存了启动 Node.js 进程的可执行文件的绝对路径名。</p><p>第二个元素是被执行的 <code>JavaScript </code>文件的路径，而其余的<code>process.argv</code> 元素则是任何其他的命令行参数。</p><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">argument</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行 main.js<br><code>node ./main.js one two three</code></p><p>然后输出如下信息:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Users&#x2F;xxx&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v14.19.1&#x2F;bin&#x2F;node&#x2F;Users&#x2F;xxx&#x2F;Documents&#x2F;practice&#x2F;Demos&#x2F;node&#x2F;main.jsonetwothree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行一个-Node-js-的-Ts-项目"><a href="#运行一个-Node-js-的-Ts-项目" class="headerlink" title="运行一个 Node.js 的 Ts 项目"></a>运行一个 Node.js 的 Ts 项目</h2><p>首先需要 pnpm 初始化我们的项目，然后安装 typescript 和 ts-node</p><p><code>pnpm init</code></p><p><code>pnpm i ts-node typescript @types/node -D</code></p><p>然后在<code>package.json</code>中添加一个新的脚本来运行<code>ts-node</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"ts-node ./main.ts"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再在<strong>根目录</strong>添加一个<code>tsconfig.json</code>,内容如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span>    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，就可以在<code>Node</code>中使用<code>Typescript</code>了。</p><p>我们可以使用 ES6 的<code>import/export</code>代替<code>module.exports/require</code>了。因为我们使用了<code>ts-node</code>，它可以将我们的 ts 代码编译为<code>CommonJS</code>规范的代码</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><code>fs</code>模块为我们提供了和文件交互的 API。所有的操作都支持<code>同步</code>和<code>异步</code>。但是，强烈建议使用<code>异步</code>函数来为我们的程序提供更高的性能。</p><p><code>异步</code>函数总是把一个回调作为它的最后一个参数。让我们使用<code>Typescript</code>来创建我们的第一个脚本。</p><h3 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile"></a>writeFile</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./newFile.txt"</span><span class="token punctuation">,</span> <span class="token string">"hello-world"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File created successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在 TypeScript 中使用文件系统模块，我们首先需要导入它。由于它是使用<code>CommonJS</code>规范的导出方式创建的，我们可以使用 <code>import * as fs</code> 来导入整个模块。</p><p>这个方法有三个参数</p><ol><li>文件路径</li><li>要写入的输入，可以是 string, buffer 等。但是不能为 null</li><li>回调函数</li></ol><p>当然，相比较回调的写法，我们还可以使用<code>async/await</code>这种语法糖来更简洁的编写上面的代码</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./newFile.txt"</span><span class="token punctuation">,</span> <span class="token string">"hello-world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File created successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该示例中，使用<code>fs.promises.writeFile()</code>方法来写文件。该方法返回一个 Promise 对象，因此可以使用<code>await</code>关键字等待其执行完毕。<code>await</code>关键字会阻塞当前的异步函数,也就是我们自己定义的<code>writeFile</code>，但<strong>不会阻塞整个进程</strong>，因此不会对其他的操作产生影响。</p><p>这里的<strong>不阻塞整个进程</strong>我们可以通过输出来验证。这段代码的输出如下：</p><pre class="line-numbers language-none"><code class="language-none">21File created successfully3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用文字来描述就是:</p><ol><li>这段脚本执行到了<code>writeFile</code>方法，输出<code>2</code></li><li>发现了<code>await</code>关键词。阻塞当前异步函数<code>writeFile</code>,交出权限给主线程</li><li>主线程执行逻辑，执行完后发现还有未执行的异步函数</li><li>回到对应的异步函数，然后输出<code>File created successfully</code></li><li>最后输出<code>3</code></li></ol><p>为了重新创建一些 bash 的功能，让我们使用 <code>process.argv</code> 传递额外的参数到我们的脚本中。我们从一个简单版本的<code>touch</code>脚本开始，它创建一个空文件：</p><p>main.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> touch <span class="token keyword">from</span> <span class="token string">"./utils/touch"</span><span class="token punctuation">;</span><span class="token keyword">const</span> command <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> content <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"touch"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">touch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Unknown command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Command missing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>utils&#x2F;touch.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">touch</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File created successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在运行的命令后加上命令行参数:</p><p><code>pnpm start touch ./file.txt haaaaa</code></p><p>然后，会创建一个<strong>file.txt</strong>文件，内容为<strong>haaaaa</strong></p><h3 id="readFile"><a href="#readFile" class="headerlink" title="readFile"></a>readFile</h3><p>我们实现的第二个函数为<code>cat</code>。他可以读取一个文件</p><p><code>utils/cat.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cat</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> encoding<span class="token operator">:</span> <span class="token string">"utf-8"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>main.ts</code>，添加一个 case 分支:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">case</span> <span class="token string">'cat'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">cat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后运行</p><p><code>pnpm start cat ./file.txt</code></p><p>上面的命令读取的是<code>./file.txt</code>路径下的文件。readFile 方法的第二个参数是一个带有额外选项的对象。我们用它来定义一个文件的编码。没有它，readFile 函数的结果是一个<code>Buffer</code>。</p><p>文件系统可以做得更多，我们将在该系列的后续部分介绍流和文件描述符等功能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，我们介绍了 TypeScript Node.js 的基础知识。其中包括模块的工作原理、全局对象是什么、文件系统的基础知识以及如何在运行 Node.js TypeScript 脚本时传递额外的参数</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础语法</title>
      <link href="/2023/04/01/hou-duan/shu-ju-ku/mysql/1.mysql-ji-chu-yu-fa/"/>
      <url>/2023/04/01/hou-duan/shu-ju-ku/mysql/1.mysql-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><ol><li>数据库的英文单词：DataBase，简称：DB</li><li>什么是数据库？<ul><li>用于存储和管理数据的仓库</li></ul></li><li>数据库的特点：<ul><li>持久化存储数据，本质是一个文件系统</li><li>方便存储和管理数据</li><li>使用统一的方式操作数据库 – SQL</li></ul></li></ol><h2 id="MySQL-8-0安装与配置"><a href="#MySQL-8-0安装与配置" class="headerlink" title="MySQL 8.0安装与配置"></a>MySQL 8.0安装与配置</h2><h3 id="使用Docker安装MySQL"><a href="#使用Docker安装MySQL" class="headerlink" title="使用Docker安装MySQL"></a>使用Docker安装MySQL</h3><ol><li><p>拉取MySQL 8镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据持久化目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /path/to/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行MySQL容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /path/to/mysql/data:/var/lib/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /path/to/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> mysql:8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Docker环境下的配置文件"><a href="#Docker环境下的配置文件" class="headerlink" title="Docker环境下的配置文件"></a>Docker环境下的配置文件</h3><p>Docker中MySQL的主配置文件位于容器内的<code>/etc/mysql/my.cnf</code>，自定义配置可以通过挂载配置文件到<code>/etc/mysql/conf.d</code>目录实现。以下是一个基本的配置文件示例（<code>custom.cnf</code>）：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token comment"># 字符集设置</span><span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span><span class="token key attr-name">collation-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4_unicode_ci</span><span class="token comment"># 连接设置</span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span><span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span><span class="token comment"># InnoDB配置</span><span class="token key attr-name">innodb_buffer_pool_size</span><span class="token punctuation">=</span><span class="token value attr-value">1G</span><span class="token key attr-name">innodb_log_file_size</span><span class="token punctuation">=</span><span class="token value attr-value">256M</span><span class="token key attr-name">innodb_log_buffer_size</span><span class="token punctuation">=</span><span class="token value attr-value">64M</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token comment"># 日志设置</span><span class="token key attr-name">slow_query_log</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">slow_query_log_file</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql/slow.log</span><span class="token key attr-name">long_query_time</span><span class="token punctuation">=</span><span class="token value attr-value">2</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysql</span><span class="token punctuation">]</span></span><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件说明：</p><ul><li>character-set-server：服务器字符集，推荐使用utf8mb4</li><li>max_connections：最大连接数</li><li>innodb_buffer_pool_size：InnoDB缓冲池大小，建议设置为总内存的50%-70%</li><li>innodb_log_file_size：事务日志文件大小</li><li>slow_query_log：开启慢查询日志</li></ul><h3 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h3><ol><li><p>容器内登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql8 mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-h127.0.0.1</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>带参数登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">--host</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token parameter variable">--user</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span>your_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><p>Structured Query Language（结构化查询语言）是所有关系型数据库的标准语言。</p><h3 id="SQL通用语法规则"><a href="#SQL通用语法规则" class="headerlink" title="SQL通用语法规则"></a>SQL通用语法规则</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>可使用空格和缩进提高可读性</li><li>MySQL 8不区分大小写，但建议关键字大写</li><li>注释方式：<ul><li>单行注释：– 注释内容</li><li>单行注释：# 注释内容（MySQL特有）</li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul></li></ol><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ol><li><p>DDL（Data Definition Language）数据定义语言</p><ul><li>用于定义数据库对象：数据库、表、列等</li><li>关键字：CREATE、DROP、ALTER等</li></ul></li><li><p>DML（Data Manipulation Language）数据操作语言</p><ul><li>用于对表中数据进行增删改</li><li>关键字：INSERT、DELETE、UPDATE等</li></ul></li><li><p>DQL（Data Query Language）数据查询语言</p><ul><li>用于查询表中记录</li><li>关键字：SELECT、WHERE等</li></ul></li><li><p>DCL（Data Control Language）数据控制语言</p><ul><li>用于定义数据库访问权限和安全级别</li><li>关键字：GRANT、REVOKE等</li></ul></li></ol><h3 id="DDL：数据库操作"><a href="#DDL：数据库操作" class="headerlink" title="DDL：数据库操作"></a>DDL：数据库操作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_name<span class="token punctuation">;</span><span class="token comment">-- 判断不存在则创建</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> db_name<span class="token punctuation">;</span><span class="token comment">-- 指定字符集创建</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_name <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看所有数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span><span class="token comment">-- 查看创建语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改字符集</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> db_name <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> db_name<span class="token punctuation">;</span><span class="token comment">-- 判断存在则删除</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> db_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DDL：表操作"><a href="#DDL：表操作" class="headerlink" title="DDL：表操作"></a>DDL：表操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">,</span>    score <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birth_date <span class="token keyword">DATE</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    update_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据类型说明：</p><ul><li>INT：整数类型</li><li>VARCHAR：可变长字符串</li><li>DECIMAL：精确小数</li><li>DATE：日期，格式YYYY-MM-DD</li><li>TIMESTAMP：时间戳，自动记录创建和更新时间</li></ul><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改表名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> old_name <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> new_name<span class="token punctuation">;</span><span class="token comment">-- 添加列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> column_name datatype<span class="token punctuation">;</span><span class="token comment">-- 修改列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">MODIFY</span> column_name new_datatype<span class="token punctuation">;</span><span class="token comment">-- 删除列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML：数据操作"><a href="#DML：数据操作" class="headerlink" title="DML：数据操作"></a>DML：数据操作</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 指定列插入</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 全列插入</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token keyword">VALUES</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1<span class="token operator">=</span>value1<span class="token punctuation">,</span> column2<span class="token operator">=</span>value2 <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除满足条件的记录</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span class="token comment">-- 清空表（效率更高）</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DQL：数据查询"><a href="#DQL：数据查询" class="headerlink" title="DQL：数据查询"></a>DQL：数据查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     <span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> column1<span class="token punctuation">,</span> column2<span class="token keyword">FROM</span>     table_name<span class="token punctuation">[</span><span class="token keyword">WHERE</span>     condition<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span>     <span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">HAVING</span>     group_condition<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>     <span class="token keyword">column</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">LIMIT</span>     <span class="token keyword">offset</span><span class="token punctuation">,</span> row_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 比较运算符</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 范围查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- IN查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 模糊查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'张%'</span><span class="token punctuation">;</span><span class="token comment">-- NULL值查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> score <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DCL：权限管理"><a href="#DCL：权限管理" class="headerlink" title="DCL：权限管理"></a>DCL：权限管理</h3><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'username'</span><span class="token variable">@'host'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span class="token comment">-- 修改密码</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'username'</span><span class="token variable">@'host'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'new_password'</span><span class="token punctuation">;</span><span class="token comment">-- 删除用户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 授予权限</span><span class="token keyword">GRANT</span> <span class="token keyword">privileges</span> <span class="token keyword">ON</span> <span class="token keyword">database</span><span class="token punctuation">.</span><span class="token keyword">table</span> <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span class="token comment">-- 撤销权限</span><span class="token keyword">REVOKE</span> <span class="token keyword">privileges</span> <span class="token keyword">ON</span> <span class="token keyword">database</span><span class="token punctuation">.</span><span class="token keyword">table</span> <span class="token keyword">FROM</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span class="token comment">-- 查看权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常见基础写法</title>
      <link href="/2023/04/01/hou-duan/shu-ju-ku/mysql/2.mysql-chang-jian-xie-fa/"/>
      <url>/2023/04/01/hou-duan/shu-ju-ku/mysql/2.mysql-chang-jian-xie-fa/</url>
      
        <content type="html"><![CDATA[<p>本文档旨在为开发者提供一份全面且实用的MySQL常用操作指南。随着Docker容器化技术的普及，在容器环境下使用MySQL已成为一种主流选择。本文将从安装配置开始，系统性地介绍MySQL的各项基础功能，包括基本查询、数据操作、表管理等实践知识。</p><p>这篇文章适合以下读者：</p><ul><li>初学MySQL的开发者</li><li>需要在Docker环境中使用MySQL的工程师</li><li>想要系统回顾MySQL基础知识的程序员</li><li>寻找MySQL常用操作速查手册的开发人员</li></ul><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="使用Docker安装MySQL"><a href="#使用Docker安装MySQL" class="headerlink" title="使用Docker安装MySQL"></a>使用Docker安装MySQL</h3><ol><li><p>拉取MySQL 8镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行MySQL容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> mysql_data:/var/lib/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> mysql:8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查容器状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><ol><li><p>使用命令行连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-P</span> <span class="token number">3306</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用Docker容器内连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql8 mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="常见SQL语句"><a href="#常见SQL语句" class="headerlink" title="常见SQL语句"></a>常见SQL语句</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><h4 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 选择所有列的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 从表中选择某一列</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 当row数据重复时，只列出一条</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="限制和排序"><a href="#限制和排序" class="headerlink" title="限制和排序"></a>限制和排序</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 限制查询多少条</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 排序数据 order by 字句优先级高</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token punctuation">[</span><span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 可通过指定DESC关键字指定为倒序（默认为升序）</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">desc</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 基本过滤</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token comment">-- 不匹配</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token operator">!=</span><span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token comment">-- 空值</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">is</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 范围</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">between</span> a <span class="token operator">and</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- AND操作符</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>col2<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>col3<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token operator">and</span> <span class="token identifier"><span class="token punctuation">`</span>colnam2<span class="token punctuation">`</span></span> <span class="token operator">></span> <span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token comment">-- OR操作符</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>col2<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>col3<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token operator">or</span> <span class="token identifier"><span class="token punctuation">`</span>colnam2<span class="token punctuation">`</span></span> <span class="token operator">></span> <span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token comment">-- IN操作符</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- NOT IN</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IN操作符的优点：</p><ul><li>语法更清楚直观</li><li>计算次序更容易管理</li><li>执行速度通常更快</li><li>可以包含其他SELECT语句</li></ul></blockquote><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用LIKE和通配符</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">like</span> <span class="token string">'xxx%'</span><span class="token punctuation">;</span><span class="token comment">-- 使用正则表达式</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">regexp</span> <span class="token string">'^test'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">regexp</span> <span class="token string">'1$|2$'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token operator">regexp</span> <span class="token string">'[123] Ton'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 拼接字段</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>col2<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> title <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 算术运算</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>num<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span><span class="token operator">*</span><span class="token identifier"><span class="token punctuation">`</span>num<span class="token punctuation">`</span></span> <span class="token keyword">as</span> total <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 函数处理</span><span class="token keyword">select</span> Upper<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col1<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 平均值</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 计数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_count <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 最大值</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> max_col <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 最小值</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> min_col <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 求和</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> sum_col <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建分组</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>*<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> group_count <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 过滤分组</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> group_count <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>table<span class="token punctuation">`</span></span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token identifier"><span class="token punctuation">`</span>col<span class="token punctuation">`</span></span> <span class="token keyword">having</span> group_count <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GROUP-BY注意事项"><a href="#GROUP-BY注意事项" class="headerlink" title="GROUP BY注意事项"></a>GROUP BY注意事项</h4><ol><li>可包含任意数目的列</li><li>嵌套分组时数据在最后规定的分组上汇总</li><li>每个列必须是检索列或有效的表达式</li><li>SELECT中的列必须在GROUP BY中给出</li><li>NULL值会作为一个分组返回</li><li>必须出现在WHERE之后，ORDER BY之前</li></ol><h3 id="表联结"><a href="#表联结" class="headerlink" title="表联结"></a>表联结</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 内联结</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>vend_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_price<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>vendors<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">where</span> products<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> vendors<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="联结注意事项"><a href="#联结注意事项" class="headerlink" title="联结注意事项"></a>联结注意事项</h4><ol><li>必须有WHERE子句，否则结果为笛卡尔积</li><li>多表联结规则保持一致</li><li>联结操作需要耗费资源</li><li>联结表越多，性能下降越快</li></ol><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- UNION示例</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>vend_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_price<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>prod_price<span class="token punctuation">`</span></span> <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">union</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>vend_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_price<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>vend_id<span class="token punctuation">`</span></span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UNION规则"><a href="#UNION规则" class="headerlink" title="UNION规则"></a>UNION规则</h4><ol><li>必须由两个或以上SELECT语句组成</li><li>每个查询必须包含相同的列</li><li>列数据类型必须兼容</li></ol><h3 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建全文本搜索</span><span class="token keyword">create</span> <span class="token keyword">table</span> productnotes <span class="token punctuation">(</span>  note_id     <span class="token keyword">int</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  prod_id     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  note_date   <span class="token keyword">datetime</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  note_text   <span class="token keyword">text</span>      <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>note_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  FULLTEXT<span class="token punctuation">(</span>note_text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM<span class="token punctuation">;</span><span class="token comment">-- 使用全文本搜索</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>note_text<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>productnotes<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>note_text<span class="token punctuation">`</span></span><span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'rabbit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 布尔文本搜索</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>note_text<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>productnotes<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>note_text<span class="token punctuation">`</span></span><span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'heavy'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：导入数据时不要使用FULLTEXT</p></blockquote><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入单条数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>customers<span class="token punctuation">`</span></span><span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_address<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_city<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_state<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_zip<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_country<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>  <span class="token string">'william'</span><span class="token punctuation">,</span>  <span class="token string">'4544 50rd Streat'</span><span class="token punctuation">,</span>  <span class="token string">'Montana'</span><span class="token punctuation">,</span>  <span class="token string">'AB'</span><span class="token punctuation">,</span>  <span class="token string">'12345'</span><span class="token punctuation">,</span>  <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入多条数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>customers<span class="token punctuation">`</span></span><span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_address<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_city<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_state<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_zip<span class="token punctuation">`</span></span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_country<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'william'</span><span class="token punctuation">,</span> <span class="token string">'4544 50rd Streat'</span><span class="token punctuation">,</span> <span class="token string">'Montana'</span><span class="token punctuation">,</span> <span class="token string">'AB'</span><span class="token punctuation">,</span> <span class="token string">'12345'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'ohayo'</span><span class="token punctuation">,</span> <span class="token string">'123 50rd Streat'</span><span class="token punctuation">,</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'AB'</span><span class="token punctuation">,</span> <span class="token string">'12345'</span><span class="token punctuation">,</span> <span class="token string">'CN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 更新数据</span><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">`</span>customers<span class="token punctuation">`</span></span> <span class="token keyword">set</span>   <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'ohayo_update'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_address<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'123 50rd Streat_update'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_city<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'Beijing_update'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_state<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'AB_up'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_zip<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'1234'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_country<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'CN_update'</span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'ohayo'</span><span class="token punctuation">;</span><span class="token comment">-- 删除数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>customers<span class="token punctuation">`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'william'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新和删除的注意事项"><a href="#更新和删除的注意事项" class="headerlink" title="更新和删除的注意事项"></a>更新和删除的注意事项</h4><ol><li>必须带WHERE子句，否则会更新&#x2F;删除所有行</li><li>保证表有主键，并在WHERE中使用</li><li>先用SELECT测试WHERE子句</li><li>使用引用完整性防止误删除</li></ol><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_id<span class="token punctuation">`</span></span>       <span class="token keyword">int</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span>     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_address<span class="token punctuation">`</span></span>  <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>      <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>cust_city<span class="token punctuation">`</span></span>     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>      <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_state<span class="token punctuation">`</span></span>    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>       <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_zip<span class="token punctuation">`</span></span>      <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>       <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>cust_country<span class="token punctuation">`</span></span>  <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>      <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>created_at<span class="token punctuation">`</span></span>    <span class="token keyword">timestamp</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>updated_at<span class="token punctuation">`</span></span>    <span class="token keyword">timestamp</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>cust_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test<span class="token punctuation">`</span></span> <span class="token keyword">add</span> <span class="token identifier"><span class="token punctuation">`</span>cust_phone<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test<span class="token punctuation">`</span></span> <span class="token keyword">drop</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">`</span>cust_phone<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 重命名表</span><span class="token keyword">rename</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test<span class="token punctuation">`</span></span> <span class="token keyword">to</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test1<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 删除表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>customers_test<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> productcustomers <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>cust_contact<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_id<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>customers<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>orders<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>orderitems<span class="token punctuation">`</span></span><span class="token keyword">where</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">and</span> orderitems<span class="token punctuation">.</span>order_num <span class="token operator">=</span> orders<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span><span class="token comment">-- 查看视图定义</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> <span class="token identifier"><span class="token punctuation">`</span>productcustomers<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token identifier"><span class="token punctuation">`</span>productcustomers<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">-- 使用视图</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>cust_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>cust_contact<span class="token punctuation">`</span></span> <span class="token keyword">from</span> productcustomers <span class="token keyword">where</span> prod_id <span class="token operator">=</span> <span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图的用途"><a href="#视图的用途" class="headerlink" title="视图的用途"></a>视图的用途</h3><ul><li>重用SQL语句</li><li>简化复杂的SQL操作</li><li>使用表的部分数据</li><li>保护数据访问权限</li><li>更改数据格式和表示</li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="存储过程的优势"><a href="#存储过程的优势" class="headerlink" title="存储过程的优势"></a>存储过程的优势</h3><ol><li>简化复杂操作</li><li>保证数据完整性</li><li>防止错误</li><li>简化变动管理</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="串数据类型"><a href="#串数据类型" class="headerlink" title="串数据类型"></a>串数据类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR</td><td>1～255个字符的定长串</td></tr><tr><td>VARCHAR</td><td>长度可变，最多255字节</td></tr><tr><td>TEXT</td><td>最大64KB的变长文本</td></tr><tr><td>TINYTEXT</td><td>最大255字节</td></tr><tr><td>MEDIUMTEXT</td><td>最大16KB</td></tr><tr><td>LONGTEXT</td><td>最大4GB</td></tr><tr><td>ENUM</td><td>最多64K个串的集合</td></tr><tr><td>SET</td><td>最多64个串的集合</td></tr></tbody></table><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>BIT</td><td>位字段，1～64位</td></tr><tr><td>TINYINT</td><td>-128～127</td></tr><tr><td>SMALLINT</td><td>-32768～32767</td></tr><tr><td>MEDIUMINT</td><td>-8388608～8388607</td></tr><tr><td>INT</td><td>-2147483648～2147483647</td></tr><tr><td>BIGINT</td><td>-9223372036854775808～9223372036854775807</td></tr><tr><td>FLOAT</td><td>单精度浮点</td></tr><tr><td>DOUBLE</td><td>双精度浮点</td></tr><tr><td>DECIMAL</td><td>精度可变浮点</td></tr></tbody></table><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>HH:MM:SS</td></tr><tr><td>DATETIME</td><td>DATE和TIME的组合</td></tr><tr><td>TIMESTAMP</td><td>功能同DATETIME</td></tr><tr><td>YEAR</td><td>2位或4位年份</td></tr></tbody></table><h3 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h3><table><thead><tr><th>类型</th><th>最大长度</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>255字节</td></tr><tr><td>BLOB</td><td>64KB</td></tr><tr><td>MEDIUMBLOB</td><td>16MB</td></tr><tr><td>LONGBLOB</td><td>4GB</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 配置</title>
      <link href="/2023/03/30/gong-ju/npm/npm-ming-ling/"/>
      <url>/2023/03/30/gong-ju/npm/npm-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="原文地址，本篇仅做记录学习"><a href="#原文地址，本篇仅做记录学习" class="headerlink" title="原文地址，本篇仅做记录学习"></a><a href="https://www.cnblogs.com/PeunZhang/p/5553574.html">原文地址，本篇仅做记录学习</a></h1><h3 id="npm-install-安装模块"><a href="#npm-install-安装模块" class="headerlink" title="npm install 安装模块"></a>npm install 安装模块</h3><ol><li>基础语法</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">(</span>with no args, <span class="token keyword">in</span> package <span class="token function">dir</span><span class="token punctuation">)</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version range<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>tarball file<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>tarball url<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>alias: <span class="token function">npm</span> icommon options: <span class="token punctuation">[</span>-S<span class="token operator">|</span>--save<span class="token operator">|</span>-D<span class="token operator">|</span>--save-dev<span class="token operator">|</span>-O<span class="token operator">|</span>--save-optional<span class="token punctuation">]</span> <span class="token punctuation">[</span>-E<span class="token operator">|</span>--save-exact<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dry-run<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>安装包，默认会安装最新的版本<br><code>npm install gulp</code></p></li><li><p>安装指定版本<br><code>npm install gulp@1.1.1</code></p></li></ol><ul><li>项目对模块的依赖可以使用下面的 3 种方法来表示（假设当前版本号是 1.1.0 ）：</li></ul><p>兼容模块新发布的补丁版本：~1.1.0、1.1.x、1.1<br>兼容模块新发布的小版本、补丁版本：^1.1.0、1.x、1<br>兼容模块新发布的大版本、小版本、补丁版本：*、x</p><ul><li><strong>-S, –save 安装包信息将加入到 dependencies（生产阶段的依赖）</strong></li></ul><p><code>npm install gulp --save 或 npm install gulp -S</code></p><p>package.json 文件的 dependencies 字段：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"^3.9.1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>-D, –save-dev 安装包信息将加入到 devDependencies（开发阶段的依赖），所以开发阶段一般使用它</strong></li></ul><p><code>npm install gulp --save-dev 或 npm install gulp -D</code></p><p>package.json 文件的 devDependencies 字段：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"^3.9.1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>-O, –save-optional 安装包信息将加入到 optionalDependencies（可选阶段的依赖）</strong></li></ul><p><code>npm install gulp --save-optional 或 npm install gulp -O</code></p><p>package.json 文件的 optionalDependencies 字段：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"optionalDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"^3.9.1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>-E, –save-exact 精确安装指定模块版本</strong></li></ul><p><code>npm install gulp --save-exact 或 npm install gulp -E</code></p><p>输入命令<strong>npm install gulp -ES</strong>，留意 package.json 文件的 dependencies 字段，以看出版本号中的^消失了</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"3.9.1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>模块的依赖都被写入了 package.json 文件后，他人打开项目的根目录（项目开源、内部团队合作），使用 npm install 命令可以根据 dependencies 配置安装所有的依赖包</p><ul><li><p>本地安装 <code>npm install gulp</code></p></li><li><p>全局安装 <code>npm install gulp -g</code></p></li></ul><h3 id="npm-uninstall-卸载模块"><a href="#npm-uninstall-卸载模块" class="headerlink" title="npm uninstall 卸载模块"></a>npm uninstall 卸载模块</h3><ol><li>基础语法</li></ol><pre class="line-numbers language-none"><code class="language-none">npm uninstall [&lt;@scope&gt;&#x2F;]&lt;pkg&gt;[@&lt;version&gt;]... [-S|--save|-D|--save-dev|-O|--save-optional]aliases: remove, rm, r, un, unlink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="npm-update-更新模块"><a href="#npm-update-更新模块" class="headerlink" title="npm update 更新模块"></a>npm update 更新模块</h3><pre><code>npm update [-g] [&lt;pkg&gt;...]</code></pre><h3 id="npm-outdated-检查模块是否已经过时"><a href="#npm-outdated-检查模块是否已经过时" class="headerlink" title="npm outdated 检查模块是否已经过时"></a>npm outdated 检查模块是否已经过时</h3><pre><code>npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</code></pre><h3 id="npm-ls-查看安装的模块"><a href="#npm-ls-查看安装的模块" class="headerlink" title="npm ls 查看安装的模块"></a>npm ls 查看安装的模块</h3><pre class="line-numbers language-none"><code class="language-none">npm ls [[&lt;@scope&gt;&#x2F;]&lt;pkg&gt; ...]aliases: list, la, ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="npm-help-查看某条命令的详细帮助"><a href="#npm-help-查看某条命令的详细帮助" class="headerlink" title="npm help 查看某条命令的详细帮助"></a>npm help 查看某条命令的详细帮助</h3><ol><li><p>基础语法<br><code>npm help &lt;term&gt; [&lt;terms..&gt;]</code></p></li><li><p>例如输入 npm help install，系统在默认的浏览器或者默认的编辑器中打开本地 nodejs 安装包的文件&#x2F;nodejs&#x2F;node_modules&#x2F;npm&#x2F;html&#x2F;doc&#x2F;cli&#x2F;npm-install.html</p></li></ol><p><code>npm help install</code></p><h3 id="npm-root-查看包的安装路径"><a href="#npm-root-查看包的安装路径" class="headerlink" title="npm root 查看包的安装路径"></a>npm root 查看包的安装路径</h3><pre><code>输出 node_modules的路径npm root [-g]</code></pre><h3 id="npm-config-管理-npm-的配置路径"><a href="#npm-config-管理-npm-的配置路径" class="headerlink" title="npm config 管理 npm 的配置路径"></a>npm config 管理 npm 的配置路径</h3><pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]npm config get &lt;key&gt;npm config delete &lt;key&gt;npm config listnpm config editnpm get &lt;key&gt;npm set &lt;key&gt; &lt;value&gt; [-g|--global]</code></pre><p>对于 config 这块用得最多应该是设置代理，解决 npm 安装一些模块失败的问题</p><p>例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决<br>npm config set proxy&#x3D;<a href="http://xxx.com:8080/">http://xxx.com:8080</a></p><p>又如国内的网络环境问题，某官方的 IP 可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像</p><pre><code>npm config set registry=&quot;http://r.cnpmjs.org&quot;</code></pre><p>也可以临时配置，如安装淘宝镜像</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id="npm-cache-管理模块的缓存"><a href="#npm-cache-管理模块的缓存" class="headerlink" title="npm cache 管理模块的缓存"></a>npm cache 管理模块的缓存</h3><pre><code>npm cache add &lt;tarball file&gt;npm cache add &lt;folder&gt;npm cache add &lt;tarball url&gt;npm cache add &lt;name&gt;@&lt;version&gt;npm cache ls [&lt;path&gt;]npm cache clean [&lt;path&gt;]</code></pre><p>最常用命令无非清除 npm 本地缓存</p><pre><code>npm cache clean</code></pre><h3 id="npm-view-查看模块的注册信息"><a href="#npm-view-查看模块的注册信息" class="headerlink" title="npm view 查看模块的注册信息"></a>npm view 查看模块的注册信息</h3><pre><code>npm view [&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;] [&lt;field&gt;[.&lt;subfield&gt;]...]aliases: info, show, v</code></pre><p>查看模块的依赖关系</p><pre><code>npm view gulp dependencies</code></pre><p>查看模块的源文件地址</p><pre><code>npm view gulp repository.url</code></pre><p>查看模块的贡献者，包含邮箱地址</p><pre><code>npm view npm contributors</code></pre><h3 id="npm-adduser-用户登录"><a href="#npm-adduser-用户登录" class="headerlink" title="npm adduser 用户登录"></a>npm adduser 用户登录</h3><pre><code>npm adduser [--registry=url] [--scope=@orgname] [--always-auth]</code></pre><h3 id="npm-publish-发布模块"><a href="#npm-publish-发布模块" class="headerlink" title="npm publish 发布模块"></a>npm publish 发布模块</h3><pre><code>npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]Publishes &#39;.&#39; if no argument suppliedSets tag &#39;latest&#39; if no --tag specified</code></pre><h3 id="npm-access-在发布的包上设置访问级别"><a href="#npm-access-在发布的包上设置访问级别" class="headerlink" title="npm access 在发布的包上设置访问级别"></a>npm access 在发布的包上设置访问级别</h3><pre><code>npm access public [&lt;package&gt;]npm access restricted [&lt;package&gt;]npm access grant &lt;read-only|read-write&gt; &lt;scope:team&gt; [&lt;package&gt;]npm access revoke &lt;scope:team&gt; [&lt;package&gt;]npm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]npm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]npm access edit [&lt;package&gt;]</code></pre><h3 id="npm-package-json-的语法"><a href="#npm-package-json-的语法" class="headerlink" title="npm package.json 的语法"></a>npm package.json 的语法</h3><p><a href="https://github.com/ericdum/mujiang.info/issues/6/">https://github.com/ericdum/mujiang.info/issues/6/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令大全</title>
      <link href="/2023/03/29/gong-ju/git/git-ming-ling/"/>
      <url>/2023/03/29/gong-ju/git/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><blockquote><p>此项为博主了解的时间为基础，并非 git 实际更新时间</p></blockquote><h3 id="2022-10-01-更新"><a href="#2022-10-01-更新" class="headerlink" title="2022.10.01 更新"></a>2022.10.01 更新</h3><p><strong>github 在更新后，无法通过用户名密码在终端登录提交代码，需要使用 personal token</strong><br><strong>获取途径如下: github -&gt; 个人头像 -&gt; settings -&gt; developer settings(拉到底) -&gt; Personal access tokens</strong><br><strong>在设置 token 时，如果看不懂权限选项，那就都选上，过期时间设置长一点。然后在 push 代码的时候，不是填写 github 的登录密码了，而是使用这个生成的 personal token</strong></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>更改设置。可以是版本库的设置，也可以是系统的或全局的</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span><span class="token function">git</span> config <span class="token parameter variable">--list</span><span class="token comment"># 编辑Git配置文件</span><span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment"># 输出、设置基本的全局变量</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"MyEmail@gmail.com"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"My Name"</span><span class="token comment"># 定义当前用户所有提交使用的作者邮箱。</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.<span class="token operator">&lt;</span>alias-name<span class="token operator">></span> <span class="token operator">&lt;</span>git-command<span class="token operator">></span><span class="token comment"># 为Git命令创建一个快捷方式（别名）。</span><span class="token function">git</span> config <span class="token parameter variable">--system</span> core.editor <span class="token operator">&lt;</span>editor<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找可用命令</span><span class="token function">git</span> <span class="token builtin class-name">help</span><span class="token comment"># 查找所有可用命令</span><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token parameter variable">-a</span><span class="token comment"># 在文档当中查找特定的命令</span><span class="token comment"># git help &lt;命令></span><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token function">add</span><span class="token function">git</span> <span class="token builtin class-name">help</span> commit<span class="token function">git</span> <span class="token builtin class-name">help</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示分支，未跟踪文件，更改和其他不同</span><span class="token function">git</span> status<span class="token comment"># 查看其他的git status的用法</span><span class="token function">git</span> <span class="token builtin class-name">help</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><blockquote><p>获取某些文件，某些分支，某次提交等 git 信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span><span class="token function">git</span> log <span class="token parameter variable">--stat</span><span class="token comment"># 搜索提交历史，根据关键词</span><span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span><span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--grep</span> feature<span class="token comment"># 显示某个文件的版本历史，包括文件改名</span><span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示指定文件相关的每一次diff</span><span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示过去5次提交</span><span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span><span class="token comment"># 显示所有提交过的用户，按提交次数排序</span><span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span><span class="token comment"># 显示指定文件是什么人在什么时间修改过</span><span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示暂存区和工作区的差异</span><span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span><span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment"># 显示两次提交之间的差异</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment"># 显示今天你写了多少行代码</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">"@&#123;0 day ago&#125;"</span><span class="token comment"># 比较暂存区和版本库差异</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--staged</span><span class="token comment"># 比较暂存区和版本库差异</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span><span class="token comment"># 仅仅比较统计信息</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--stat</span><span class="token comment"># 显示某次提交的元数据和内容变化</span><span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交发生变化的文件</span><span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交时，某个文件的内容</span><span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 显示当前分支的最近几次提交</span><span class="token function">git</span> reflog<span class="token comment"># 查看远程分支</span><span class="token function">git</span> br <span class="token parameter variable">-r</span><span class="token comment"># 创建新的分支</span><span class="token function">git</span> br <span class="token operator">&lt;</span>new_branch<span class="token operator">></span><span class="token comment"># 查看各个分支最后提交信息</span><span class="token function">git</span> br <span class="token parameter variable">-v</span><span class="token comment"># 查看已经被合并到当前分支的分支</span><span class="token function">git</span> br <span class="token parameter variable">--merged</span><span class="token comment"># 查看尚未被合并到当前分支的分支</span><span class="token function">git</span> br --no-merged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><blockquote><p>添加文件到当前工作空间中。如果你不使用 git add 将文件添加进去，那么这些文件也不会添加到之后的提交之中</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一个文件</span><span class="token function">git</span> <span class="token function">add</span> test.js<span class="token comment"># 添加一个子目录中的文件</span><span class="token function">git</span> <span class="token function">add</span> /path/to/file/test.js<span class="token comment"># 支持正则表达式</span><span class="token function">git</span> <span class="token function">add</span> ./*.js<span class="token comment"># 添加指定文件到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 添加指定目录到暂存区，包括子目录</span><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment"># 添加当前目录的所有文件到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移除 HelloWorld.js</span><span class="token function">git</span> <span class="token function">rm</span> HelloWorld.js<span class="token comment"># 移除子目录中的文件</span><span class="token function">git</span> <span class="token function">rm</span> /pather/to/the/file/HelloWorld.js<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有的分支和远程分支</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 创建一个新的分支</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 重命名分支</span><span class="token comment"># git branch -m &lt;旧名称> &lt;新名称></span><span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span> <span class="token punctuation">[</span>new-branch-name<span class="token punctuation">]</span><span class="token comment"># 编辑分支的介绍</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span> --edit-description<span class="token comment"># 列出所有本地分支</span><span class="token function">git</span> branch<span class="token comment"># 列出所有远程分支</span><span class="token function">git</span> branch <span class="token parameter variable">-r</span><span class="token comment"># 新建一个分支，但依然停留在当前分支</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，指向指定commit</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 切换到指定分支，并更新工作区</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 切换到上一个分支</span><span class="token function">git</span> checkout -<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 合并指定分支到当前分支</span><span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 选择一个commit，合并进当前分支</span><span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除分支</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span class="token comment"># 切换到某个分支</span><span class="token function">git</span> co <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment"># 创建新的分支，并且切换过去</span><span class="token function">git</span> co <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">></span><span class="token comment"># 基于branch创建新的new_branch</span><span class="token function">git</span> co <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><span class="token function">git</span> co <span class="token variable">$id</span><span class="token comment"># 把某次历史提交记录checkout出来，创建成一个分支</span><span class="token function">git</span> co <span class="token variable">$id</span> <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">></span><span class="token comment"># 删除某个分支</span><span class="token function">git</span> br <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><span class="token function">git</span> br <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检出一个版本库，默认将更新到master分支</span><span class="token function">git</span> checkout<span class="token comment"># 检出到一个特定的分支</span><span class="token function">git</span> checkout branchName<span class="token comment"># 新建一个分支，并且切换过去，相当于"git branch &lt;名字>; git checkout &lt;名字>"</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> newBranch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载远程仓库的所有变动</span><span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 显示所有远程仓库</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 显示某个远程仓库的信息</span><span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 增加一个新的远程仓库，并命名</span><span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 查看远程服务器地址和仓库名称</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 添加远程仓库地址</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@ github:xxx/xxx.git<span class="token comment"># 设置远程仓库地址(用于修改远程仓库地址)</span><span class="token function">git</span> remote set-url origin git@ github.com:xxx/xxx.git<span class="token comment"># 删除远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>repository<span class="token operator">></span><span class="token comment"># 上传本地指定分支到远程仓库</span><span class="token comment"># 把本地的分支更新到远端origin的master分支上</span><span class="token comment"># git push &lt;远端> &lt;分支></span><span class="token comment"># git push 相当于 git push origin master</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--force</span><span class="token comment"># 推送所有分支到远程仓库</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复暂存区的指定文件到工作区</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复暂存区的所有文件到工作区</span><span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 重置暂存区与工作区，与上一次commit保持一致</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span><span class="token comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><span class="token function">git</span> reset <span class="token parameter variable">--keep</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个commit，用来撤销指定commit</span><span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 恢复最后一次提交的状态</span><span class="token function">git</span> revert HEAD<span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span><span class="token function">git</span> stash<span class="token function">git</span> stash pop<span class="token comment"># 列所有stash</span><span class="token function">git</span> stash list<span class="token comment"># 恢复暂存的内容</span><span class="token function">git</span> stash apply<span class="token comment"># 删除暂存区</span><span class="token function">git</span> stash drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交暂存区到仓库区附带提交信息</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交暂存区的指定文件到仓库区</span><span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><span class="token function">git</span> commit <span class="token parameter variable">-a</span><span class="token comment"># 提交时显示所有diff信息</span><span class="token function">git</span> commit <span class="token parameter variable">-v</span><span class="token comment"># 使用一次新的commit，替代上一次提交</span><span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><blockquote><p>显示当前工空间和提交版本的不同</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示工作目录和索引的不同</span><span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示索引和最近一次提交的不同</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span><span class="token comment"># 显示工作目录和最近一次提交的不同</span><span class="token function">git</span> <span class="token function">diff</span> HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote><p>可以在版本库中快速查找</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可选配置：</span><span class="token comment"># 感谢Travis Jeffery提供的以下用法：</span><span class="token comment"># 在搜索结果中显示行号</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> grep.lineNumber <span class="token boolean">true</span><span class="token comment"># 是搜索结果可读性更好</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.g <span class="token string">"grep --break --heading --line-number"</span><span class="token comment"># 在所有的java中查找variableName</span><span class="token function">git</span> <span class="token function">grep</span> <span class="token string">'variableName'</span> -- <span class="token string">'*.java'</span><span class="token comment"># 搜索包含 "arrayListName" 和, "add" 或 "remove" 的所有行</span><span class="token function">git</span> <span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">'arrayListName'</span> <span class="token parameter variable">--and</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-e</span> <span class="token function">add</span> <span class="token parameter variable">-e</span> remove <span class="token punctuation">\</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><blockquote><p>显示这个版本库的所有提交</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示所有提交</span><span class="token function">git</span> log<span class="token comment"># 显示某几条提交信息</span><span class="token function">git</span> log <span class="token parameter variable">-n</span> <span class="token number">10</span><span class="token comment"># 仅显示合并提交</span><span class="token function">git</span> log <span class="token parameter variable">--merges</span><span class="token comment"># 查看该文件每次提交记录</span><span class="token function">git</span> log <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment"># 查看每次详细修改内容的diff</span><span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment"># 查看最近两次详细修改内容的diff</span><span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token parameter variable">-2</span><span class="token comment">#查看提交统计信息</span><span class="token function">git</span> log <span class="token parameter variable">--stat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将其他分支合并到当前分支</span><span class="token function">git</span> merge branchName<span class="token comment"># 在合并时创建一个新的合并后的提交</span><span class="token comment"># 不要 Fast-Foward 合并，这样可以生成 merge 提交</span><span class="token function">git</span> merge --no-ff branchName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重命名</span><span class="token function">git</span> <span class="token function">mv</span> test.js test2.js<span class="token comment"># 移动</span><span class="token function">git</span> <span class="token function">mv</span> test.js ./new/path/test.js<span class="token comment"># 改名文件，并且将这个改名放入暂存区</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span class="token comment"># 强制重命名或移动</span><span class="token comment"># 这个文件已经存在，将要覆盖掉</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token parameter variable">-f</span> myFile existingFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span><span class="token function">git</span> tag<span class="token comment"># 新建一个tag在当前commit</span><span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 新建一个tag在指定commit</span><span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除本地tag</span><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 删除远程tag</span><span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment"># 查看tag信息</span><span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交指定tag</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交所有tag</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--tags</span><span class="token comment"># 新建一个分支，指向某个tag</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><blockquote><p>从远端版本库合并到当前分支</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从远端origin的master分支更新版本库</span><span class="token comment"># git pull &lt;远端> &lt;分支></span><span class="token function">git</span> pull origin master<span class="token comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><span class="token function">git</span> pull --no-ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ci"><a href="#ci" class="headerlink" title="ci"></a>ci</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ci <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token function">git</span> ci <span class="token builtin class-name">.</span><span class="token comment"># 将git add, git rm和git ci等操作都合并在一起做</span><span class="token function">git</span> ci <span class="token parameter variable">-a</span><span class="token function">git</span> ci <span class="token parameter variable">-am</span> <span class="token string">"some comments"</span><span class="token comment"># 修改最后一次提交记录</span><span class="token function">git</span> ci <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><blockquote><p>将一个分支上所有的提交历史都应用到另一个分支上不要在一个已经公开的远端分支上使用 rebase.</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将experimentBranch应用到master上面</span><span class="token comment"># git rebase &lt;basebranch> &lt;topicbranch></span><span class="token function">git</span> rebase master experimentBranchreset <span class="token punctuation">(</span>谨慎使用<span class="token punctuation">)</span>将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果<span class="token comment"># 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录</span><span class="token function">git</span> reset<span class="token comment"># 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span><span class="token comment"># 将当前分支恢复到某次提交，不改变现在的工作目录</span><span class="token comment"># 在工作目录中所有的改变仍然存在</span><span class="token function">git</span> reset dha78as<span class="token comment"># 将当前分支恢复到某次提交，覆盖现在的工作目录</span><span class="token comment"># 并且删除所有未提交的改变和指定提交之后的所有提交</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> dha78as<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成一个可供发布的压缩包</span><span class="token function">git</span> archive<span class="token comment"># 打补丁</span><span class="token function">git</span> apply <span class="token punctuation">..</span>/sync.patch<span class="token comment"># 测试补丁能否成功</span><span class="token function">git</span> apply <span class="token parameter variable">--check</span> <span class="token punctuation">..</span>/sync.patch<span class="token comment"># 查看Git的版本</span><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用node.js实现一个迷你区块链</title>
      <link href="/2023/03/28/web3.0/2.shi-xian-yi-ge-mini-qu-kuai-lian/"/>
      <url>/2023/03/28/web3.0/2.shi-xian-yi-ge-mini-qu-kuai-lian/</url>
      
        <content type="html"><![CDATA[<p>我们可以使用 Node 来实现一个区块链，它的格式如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 索引</span>    <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token string">"时间戳"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"区块的具体信息, 主要是交易信息"</span><span class="token punctuation">,</span>    <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">"当前区块信息的hash值"</span><span class="token punctuation">,</span>    <span class="token literal-property property">prevHash</span><span class="token operator">:</span> <span class="token string">"上一个区块的哈希"</span><span class="token punctuation">,</span>    <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token string">"随机数,用于计算出符合条件的hash"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 索引</span>    <span class="token literal-property property">timestamp</span><span class="token operator">:</span> <span class="token string">"时间戳"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"区块的具体信息, 主要是交易信息"</span><span class="token punctuation">,</span>    <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">"当前区块信息的hash值"</span><span class="token punctuation">,</span>    <span class="token literal-property property">prevHash</span><span class="token operator">:</span> <span class="token string">"上一个区块的哈希"</span><span class="token punctuation">,</span>    <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token string">"随机数,用于计算出符合条件的hash"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是根据信息实现区块链的功能</p><ol><li>区块链的生成、新增、校验</li><li>交易</li><li>非对称加密</li><li>挖矿</li><li>p2p 网络</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web3.0 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链是什么</title>
      <link href="/2023/03/28/web3.0/1.gai-nian/"/>
      <url>/2023/03/28/web3.0/1.gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="web3-和区块链的关系"><a href="#web3-和区块链的关系" class="headerlink" title="web3 和区块链的关系"></a>web3 和区块链的关系</h2><p>Web3 是一种以区块链为基础的新型互联网协议，它通过区块链技术来实现去中心化应用程序（DApp）的开发和运行，它们有着密切的关系。</p><p>区块链技术提供了一种可信、去中心化、不可篡改的数据存储和交易记录方式，而 Web3 则提供了一种基于区块链技术的去中心化互联网协议。通过 Web3，开发者可以访问和使用区块链网络中的数据和服务，而无需信任中心化的服务器或第三方机构。</p><p>Web3 使用智能合约技术来编写应用程序，这些应用程序可以直接在区块链上执行，而无需信任第三方服务提供商。Web3 还提供了一种去中心化的数据存储方式，这种数据存储方式可以保护用户的隐私和数据安全，同时也能够防止数据被篡改或删除。</p><p>Web3 和区块链密切相关，它们共同构成了一个去中心化、可信的新型互联网体系，为开发者和用户提供了更安全、更开放、更自由的应用和服务。</p><h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h2><p>区块链就是一个去中心化的分布式数据库技术，它的本质是一种不可篡改的数据库。它通过使用密码学技术，将数据存储在不同的计算机节点上，并通过共识机制来保证数据的一致性和完整性。</p><p>区块链中的每个区块都包含了一定数量的交易记录，这些交易记录按照时间顺序被记录在链上，并且每个区块都包含了前一个区块的哈希值，形成了一个不可篡改的区块链。因为当你篡改了链中的<br>某一个区块的数据，他的 hash 也会随之发生变化，那么当前区块<br>的下一个区块的 prevHash 就无法找到被篡改前的数据计算出的 hash，<br>因此整个链就是非法的，除非你能从被篡改的区块开始，一直篡改到结束</p><h2 id="数字货币"><a href="#数字货币" class="headerlink" title="数字货币"></a>数字货币</h2><p>比特币 、以太坊 —&gt; 下一代区块链、USDT</p><p>它加了很多高级功能比如:</p><ul><li>发币</li><li>智能合约</li></ul><p>重点是基于以太坊开发，比如: DApp 开发 (商城、论坛、社交软件等等)</p><h3 id="价格最稳定的数字货币-USDT"><a href="#价格最稳定的数字货币-USDT" class="headerlink" title="价格最稳定的数字货币 USDT"></a>价格最稳定的数字货币 USDT</h3><p>由发币支撑（法定货币），目前最稳定的数字货币，由 Tether(bitfinex)交易所发行，可以随时用 1:1 兑换 USD(美元)。</p><h3 id="数字货币衍生品"><a href="#数字货币衍生品" class="headerlink" title="数字货币衍生品"></a>数字货币衍生品</h3><p>光有钱是没有用的，还需要有流动性来产生价值</p><ul><li>ICO: 众筹</li><li>交易所： 场外、撮合（数字货币变现）</li><li>钱包： 存储数字货币</li></ul><h3 id="价值所在"><a href="#价值所在" class="headerlink" title="价值所在"></a>价值所在</h3><ul><li>供需决定价格</li><li>数量稳定（2100w 左右）</li><li>支付方便 透明中立</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>除了数字货币，还能干啥？</p><p>基本都是围绕着 <code>不可篡改</code>、<code>去中心化</code></p><p>可以衍生出<code>数字版权</code>、<code>众筹（红十字这类公益项目）</code></p><h2 id="技术名词"><a href="#技术名词" class="headerlink" title="技术名词"></a>技术名词</h2><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块是区块链技术中的基本单位，它包含了多个交易的信息，以及一个指向前一个区块的哈希值。当新的交易发生时，它们会被打包成一个新的区块，并添加到区块链中。</p><h3 id="哈希函数-sha-256"><a href="#哈希函数-sha-256" class="headerlink" title="哈希函数(sha-256)"></a>哈希函数(sha-256)</h3><p>可以理解成 <strong>指纹</strong>的概念，它将任意长度的值转化为固定长度的值<br>比如如下代码，使用<code>hello-world</code>和<code>ryo</code>两个字符串算出的 hash 是一样长的<br><code>afa27b44d43b02a9fea41d13cedc2e4016cfcf87c5dbf990e593669aa8ce286d</code></p><p><code>53b2946160fcd21c6b56e34b054ca7a31ca28746240f89a5f1d5919b510f4819</code></p><p>特点</p><ul><li>输入的值不变，输出就不变</li><li>单向计算- 无法通过 hash 值算出值</li><li>输入敏感- 输入发生一点变化，hash 值的变化天差地别</li><li>避免碰撞- 很难找到两串明文不同，hash 一样的情况</li></ul><h3 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h3><p>共识机制是区块链技术中的重要组成部分，它用于确保区块链上的所有节点对交易和区块的状态达成共识</p><p>常见的共识机制如下:</p><ul><li>POW(Proof of work)工作量证明 — 谁先做出来谁说了算</li><li>POS(Proof of Stake)权益证明 — 谁占的股份多谁说了算</li><li>DPOS 代理权益证明 — 选出一个代表来决定</li></ul><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><p>智能合约是一种自动执行的合约，它能够在区块链上执行代码逻辑，并在满足特定条件时自动执行相应的操作。智能合约被广泛应用于去中心化应用程序（DApp）的开发中。</p>]]></content>
      
      
      <categories>
          
          <category> Web3.0 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git submodules</title>
      <link href="/2023/03/28/gong-ju/git/git-submodules/"/>
      <url>/2023/03/28/gong-ju/git/git-submodules/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git 子模块允许您将一个 Git 仓库包含为另一个 Git 仓库的子目录。Git 子模块实际上是对另一个仓库在特定时间点的引用。它们使得一个 Git 仓库能够将外部代码的版本历史纳入并进行跟踪。</p></blockquote><h2 id="什么是-Git-子模块？"><a href="#什么是-Git-子模块？" class="headerlink" title="什么是 Git 子模块？"></a>什么是 Git 子模块？</h2><p>通常，一个代码仓库会依赖于外部的代码。这些外部代码可以以几种不同的方式整合进来。一种方法是直接将外部代码复制并粘贴到主要仓库中。然而，这种方法的缺点是无法集成外部仓库的上游更改。另一种整合外部代码的方法是使用编程语言的包管理系统，如 Ruby Gems 或 NPM。尽管如此，这种方法需要在部署原始代码的所有地方进行安装和版本管理。</p><p>Git 子模块是主机 Git 仓库中的一个记录，指向另一个外部仓库中特定提交的引用。它们非常静态，只能跟踪特定的提交。子模块不会跟踪 Git 的引用或分支，并且当主机仓库更新时不会自动更新。当将子模块添加到仓库时，将创建一个新的<code>.gitmodules</code>文件。<code>.gitmodules</code>文件包含有关子模块项目的 URL 和本地目录之间映射的元数据。如果主机仓库有多个子模块，<code>.gitmodules</code>文件将为每个子模块创建一个条目。</p><h2 id="何时应该使用-Git-子模块？"><a href="#何时应该使用-Git-子模块？" class="headerlink" title="何时应该使用 Git 子模块？"></a>何时应该使用 Git 子模块？</h2><p>通常情况下，如果需要严格管理外部依赖项的版本，使用 Git 子模块是有意义的。以下是一些适用于 Git 子模块的最佳用例：</p><ol><li>当外部组件或子项目更改速度过快，或即将来临的更改可能会破坏 API 时，您可以将代码锁定到特定的提交以确保自己的安全性。</li><li>当您有一个不经常更新的组件，并希望将其作为供应商依赖项进行跟踪时。</li><li>当您将项目的一部分委托给第三方，并希望在特定时间或版本中集成他们的工作时。同样，这适用于更新不太频繁的情况。</li></ol><h2 id="Git-子模块的常见命令"><a href="#Git-子模块的常见命令" class="headerlink" title="Git 子模块的常见命令"></a>Git 子模块的常见命令</h2><h3 id="添加-Git-子模块"><a href="#添加-Git-子模块" class="headerlink" title="添加 Git 子模块"></a>添加 Git 子模块</h3><p>使用<code>git submodule add</code>命令可以将新的子模块添加到已有的仓库中。以下是一个示例，创建一个空的仓库并探讨 Git 子模块：</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code$ mkdir git-submodule-demo$ cd git-submodule-demo&#x2F;$ git initInitialized empty Git repository in &#x2F;Users&#x2F;atlassian&#x2F;git-submodule-demo&#x2F;.git&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一系列命令将创建一个名为<code>git-submodule-demo</code>的新目录，进入该目录，并将其初始化为一个新的仓库。接下来，我们将在这个全新的仓库中添加一个子模块。</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code$ git submodule add https:&#x2F;&#x2F;bitbucket.org&#x2F;jaredw&#x2F;awesomelibraryCloning into &#39;&#x2F;Users&#x2F;atlassian&#x2F;git-submodule-demo&#x2F;awesomelibrary&#39;...remote: Counting objects: 8, done.remote: Compressing objects: 100% (6&#x2F;6), done.remote: Total 8 (delta 1), reused 0 (delta 0)Unpacking objects: 100% (8&#x2F;8), done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git submodule add</code>命令接受一个指向 Git 仓库的 URL 参数。在这里，我们将<code>awesomelibrary</code>添加为一个子模块。Git 将立即克隆子模块。现在，我们可以使用<code>git status</code>来查看仓库的当前状态…</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code$ git statusOn branch mainNo commits yetChanges to be committed:  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) new file:   .gitmodules new file:   awesomelibrary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，仓库中有两个新文件，<code>.gitmodules</code>和<code>awesomelibrary</code>目录。查看<code>.gitmodules</code>文件的内容，可以看到新的子模块映射：</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code[submodule &quot;awesomelibrary&quot;] path &#x3D; awesomelibrary url &#x3D; https:&#x2F;&#x2F;bitbucket.org&#x2F;jaredw&#x2F;awesomelibrary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们通过执行<code>git add .gitmodules awesomelibrary/</code>和<code>git commit -m &quot;added submodule&quot;</code>将这些新文件添加并提交。</p><h3 id="克隆-Git-子模块"><a href="#克隆-Git-子模块" class="headerlink" title="克隆 Git 子模块"></a>克隆 Git 子模块</h3><pre class="line-numbers language-none"><code class="language-none">shellCopy codegit clone &#x2F;url&#x2F;to&#x2F;repo&#x2F;with&#x2F;submodulesgit submodule initgit submodule update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git-子模块初始化"><a href="#Git-子模块初始化" class="headerlink" title="Git 子模块初始化"></a>Git 子模块初始化</h3><p><code>git submodule init</code>的默认行为是将映射从<code>.gitmodules</code>文件复制到本地的<code>./.git/config</code>文件中。这可能看起来有些多余，并引发对<code>git submodule init</code>有何用处的疑问。<code>git submodule init</code>有扩展行为，它可以接受一个显式模块名称的列表。这允许一个工作流程，只激活对仓库工作需要的特定子模块。如果仓库中有许多子模块，但不需要获取它们所有以进行工作，这可能会有所帮助。</p><h3 id="子模块工作流程"><a href="#子模块工作流程" class="headerlink" title="子模块工作流程"></a>子模块工作流程</h3><p>一旦子模块在父仓库中得到适当初始化和更新，它们可以像独立的仓库一样使用。这意味着子模块有自己的分支和历史记录。当对子模块进行更改时，重要的是要发布子模块的更改，然后更新父仓库对子模块的引用。让我们继续使用<code>awesomelibrary</code>的示例并进行一些更改：</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code$ cd awesomelibrary&#x2F;$ git checkout -b new_awesomeSwitched to a new branch &#39;new_awesome&#39;$ echo &quot;new awesome file&quot; &gt; new_awesome.txt$ git statusOn branch new_awesomeUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) new_awesome.txtnothing added to commit but untracked files present (use &quot;git add&quot; to track)$ git add new_awesome.txt$ git commit -m &quot;added new awesome textfile&quot;[new_awesome 0567ce8] added new awesome textfile 1 file changed, 1 insertion(+) create mode 100644 new_awesome.txt$ git branch  main* new_awesome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们切换到了<code>awesomelibrary</code>子模块的目录。我们创建了一个新的文本文件<code>new_awesome.txt</code>并添加并提交了这个新文件到子模块。现在让我们返回到父仓库并查看父仓库的当前状态。</p><pre class="line-numbers language-none"><code class="language-none">shellCopy code$ cd ..$ git statusOn branch mainChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified:   awesomelibrary (new commits)no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>git status</code>命令显示父仓库已经知道了<code>awesomelibrary</code>子模块的新提交。它不会详细说明具体的更新，因为那是子模块仓库的责任。父仓库只关心将子模块固定到一个提交上。现在，我们可以再次通过对子模块执行<code>git add</code>和<code>git commit</code>来更新父仓库，这将把所有内容置于良好的状态。如果您在团队环境中工作，那么非常关键的是随后要推送子模块的更新以及父仓库的更新。</p><p>在使用子模块时，常见的混淆和错误模式是忘记为远程用户推送更新。如果我们重新审视刚刚完成的<code>awesomelibrary</code>工作，我们只推送了父仓库的更新。另一位开发人员将尝试拉取最新的父仓库，但由于我们忘记了推送子模块，它将指向无法拉取的<code>awesomelibrary</code>提交，这会破坏远程开发人员的本地仓库。为避免这种失败情况，请确保始终提交和推送子模块以及父仓库。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Git 子模块是充分利用 Git 作为外部依赖管理工具的强大方式。在使用它们之前，请权衡 Git 子模块的优缺点，因为它们是一项高级功能，可能需要团队成员花费一些时间来适应。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决 hexo g 报错REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
      <link href="/2023/03/15/kai-fa-wen-ti-ji-lu/ji-lu-yi-ci-hexo-bu-shu-cuo-wu/"/>
      <url>/2023/03/15/kai-fa-wen-ti-ji-lu/ji-lu-yi-ci-hexo-bu-shu-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>今天在部署 hexo 时报了一个错误，**” WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! “**</p><p>具体原因和解决方案可以看这篇<a href="https://kinsta.com/knowledgebase/warning-remote-host-identification-has-changed/">文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lerna在单仓库管理多项目的使用小结</title>
      <link href="/2022/12/01/qian-duan/gong-cheng-hua/shi-yong-lerna/"/>
      <url>/2022/12/01/qian-duan/gong-cheng-hua/shi-yong-lerna/</url>
      
        <content type="html"><![CDATA[<p>lerna 是一个 monorepo 工具，用来在一个仓库中管理多个项目。而我最近向造个轮子，这个轮子需要抽离出一些组件库，且自身也会用到。而 lerna 就非常适合这种场景。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><p>全局下载 <code>yarn global add lerna</code> 或 <code>npm install lerna -g</code></p></li><li><p>初始化项目 <code>cd lerna-demo &amp;&amp; cd lerna-demo</code>然后<code>lerna init</code></p></li></ol><p>执行完 init 后会多出一个<code>packages</code>目录和<code>lerna.json</code>，并且会配置一个<code>workspace</code></p><ol start="3"><li>创建不同的项目<br>然后我们可以在 packages 中创建不同的项目,具体代码可以查看<a href="https://github.com/SaebaRyoo/Demos/tree/main/lerna-demo/packages">lerna-demo</a></li></ol><blockquote><p>代码里有个需要注意的点就是打包配置中设置的打包方式要和你引入的方式是一致的，或者直接在打包配置中设置<code>esm</code>、<code>cjs</code>和<code>umd</code>三种方式，然后根据不同的规范去引入不同的代码。</p></blockquote><p>这里我们有三个项目<code>header</code>, <code>footer</code>, <code>website</code></p><p>webstite 就是我们的项目，其他两个是组件库。而我们需要在 website 中使用它们。那么就需要在 website 的 package.json 中导入，方法如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"header"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token property">"footer"</span><span class="token operator">:</span> <span class="token string">"*"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就相当于告诉 lerna 去 link workspace 中的<code>header</code>和<code>footer</code>，就像<code>npm install</code>了一样。</p><p>然后再<code>yarn</code>执行一下命令</p><h2 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h2><p>如果需要打包所有的项目则直接运行<code>lerna run build</code></p><p>lerna 会按照依赖顺序，先打包<code>header</code>和<code>footer</code>，最好再打包<code>website</code></p><p>也可以使用<code>--scope</code>配置 指定需要打包的项目<code>lerna run build --scope header --scope footer</code>,这样，website 项目就不会被打包。</p><p>运行单元测试也同上。</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>打包好了两个依赖项目后，就可以运行<code>website</code>了，</p><p><code>lerna run dev --scope=website</code></p><p>也可以不加<code>--scope</code>,因为其他两个项目中并没有<code>dev</code>这个运行命令。</p><p>最后就可以直接访问了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于React测试的思考</title>
      <link href="/2022/11/26/qian-duan/react/react-ce-shi/"/>
      <url>/2022/11/26/qian-duan/react/react-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要写单元测试"><a href="#为什么要写单元测试" class="headerlink" title="为什么要写单元测试"></a>为什么要写单元测试</h2><ul><li>帮助开发者完善异常逻辑，提高程序健壮性</li><li>降低代码耦合度，防止在项目中出现修改了一处代码后，却影响了其他代码的尴尬场景</li><li>提高项目组件的职责的单一性，防止在组件内出现业务逻辑，降低复用效率</li><li>作为文档：在一个中大型项目中，随着时间的增长，一些组件的代码和逻辑会越来越复杂。而通过覆盖业务的单测，可以清晰呈现业务逻辑，从而降低上手成本</li></ul><h3 id="基础测试框架"><a href="#基础测试框架" class="headerlink" title="基础测试框架"></a>基础测试框架</h3><p>Jest，用于完成基础的函数测试</p><h3 id="辅助库"><a href="#辅助库" class="headerlink" title="辅助库"></a>辅助库</h3><p>前端的测试不同于常规的后端逻辑测试，前端的单测设计到 DOM 和事件的模拟，所以需要一个辅助库来完成</p><h4 id="React-Testing-Library（推荐）"><a href="#React-Testing-Library（推荐）" class="headerlink" title="React Testing Library（推荐）"></a>React Testing Library（推荐）</h4><p>这是官方推荐的测试库，主要有以下三个依赖：</p><ul><li>@testing-library&#x2F;jest-dom：用于 dom、样式类型等元素的选取。</li><li>@testing-library&#x2F;react：提供针对 React 的单测渲染能力。</li><li>@testing-library&#x2F;user-event：用于单测场景下事件的模拟。</li></ul><p>为什么推荐使用？</p><ol><li>更新及时，跟得上 react 的版本迭代</li><li>测试思路：它不在意组件实现细节，而是聚焦在了组件能力本身(即从 developer 传入 props，然后通过 RTL 的 API 验证<code>render</code>函数输出的内容),从用户视角进行测试，如下，用户只会看到组件渲染后是否有<code>learn react test</code>这一串字符：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"renders learn react test link"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> linkElement <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">learn react test</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>linkElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h4><p>Enzyme 有以下三个依赖需要安装</p><ul><li>enzyme：基础库。</li><li>enzyme-adapter-react：对 React 的适配器，需要安装对应 React 版本的适配器。</li><li>jest-enzyme：用于 enzyme 对 Jest 的环境适配。</li></ul><p>为什么不推荐使用 Enzyme？主要有以下几个原因</p><ol><li>Enzyme 依赖是配置 enzyme-adapter-react,但目前迭代速度停止在 16，后续版本都是开发者自己实现的。这对于公司开发一个项目来说非常不稳定。且现在对 Enzyme 进行维护的开发者很少</li><li>测试思路， Enzyme 是基于 component 的 props 展开，从代码实现的层面验证组件<br>如下：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"input with custom className &amp; style"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Input className<span class="token operator">=</span><span class="token string">"test"</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"div.test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveStyle</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码更像是为的 developer 用户</p><p>所以对于需求可能会频繁变动的业务场景，相对来说比较脆弱。因为开发人员需要随着业务的变动频繁的修改单元测试。</p><p>比如，当某一业务组件的最终输出内容不变，但是因为一些原因后台数据结构的调整，或者我们在开发过程中需要调整业务组件的结构，那么我们业务组件中传入的 props 也会跟着改变。<br>这样，与之对应的单测也会随之废弃。可是在 UI 逻辑上并没有变化，这时候就会极大的增加业务开发的工作量，并且单元测试也失去了意义</p><h2 id="react-testing-library-Api"><a href="#react-testing-library-Api" class="headerlink" title="react-testing-library Api"></a>react-testing-library Api</h2><p>react-testing-library 根据行为分类可以分为 3 大类 api，<strong>它们决定了查询 api 命名的前缀</strong>。查询的<strong>参照物</strong>决定了 api 的后缀。如 getByText，它使用 get 查询行为，以 Text 为参照物进行单独查询</p><h3 id="以查询行为分类"><a href="#以查询行为分类" class="headerlink" title="以查询行为分类"></a>以查询行为分类</h3><ul><li>get</li><li>query</li><li>find</li></ul><h3 id="以参照物划分"><a href="#以参照物划分" class="headerlink" title="以参照物划分"></a>以参照物划分</h3><p>在 Enzyme 中是按照 css 类名或者 id 来查询</p><h4 id="1-角色-Role-（元素定义）"><a href="#1-角色-Role-（元素定义）" class="headerlink" title="1. 角色 Role （元素定义）"></a>1. 角色 Role （元素定义）</h4><ul><li>aria 属性（元素状态，属性）<ul><li>aria-hidden： 不在 DOM 树上访问的元素；</li><li>aria-selected: 元素是否被选中；</li><li>aria-checked: 元素是否被勾选；</li><li>aria-current: 当前选中的元素；</li><li>aria-pressed: 被按压的元素；</li><li>aria-expanded:元素是否被展开；</li><li>aria-level: 区域的等级，值得一提的是，h1 - h6 会有默认的 aria-level 属性，值对应 1-6；</li><li>aria-describedby: 可以通过描述来定位额外的元素。</li></ul></li></ul><h4 id="2-标签文本-LabelText"><a href="#2-标签文本-LabelText" class="headerlink" title="2. 标签文本 LabelText"></a>2. 标签文本 LabelText</h4><p>针对 label 标签的 text 查询，通过这个可以查询到对应 label 的输入节点（比如 input):</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// DomQuery.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DomQuery</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* ... other content */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>label<span class="token operator">></span>        testLabel        <span class="token operator">&lt;</span>input <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// DomQuery.test.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DomQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../components/DomQuery"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"tests for label"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"labelText"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DomQuery <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> label <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByLabelText</span><span class="token punctuation">(</span><span class="token string">"testLabel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    screen<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-占位符文本-PlaceholderText"><a href="#3-占位符文本-PlaceholderText" class="headerlink" title="3. 占位符文本 PlaceholderText"></a>3. 占位符文本 PlaceholderText</h4><p>通过 placeholder 来查询，也可以有效查到对应的表单元素，如果你没有使用 label 标签的时候，可以使用这个来作为替代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/components/DomQuery/index.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DomQuery</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* ... other content */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>input placeholder<span class="token operator">=</span><span class="token string">"a query by placeholder"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ./src/__test__/dom_query.test.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DomQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../components/DomQuery"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"tests for placeholder"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"placeholder"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DomQuery <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> placeholderInput <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByPlaceholderText</span><span class="token punctuation">(</span>      <span class="token string">"a query by placeholder"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    screen<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>placeholderInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-文本-Text"><a href="#4-文本-Text" class="headerlink" title="4. 文本 Text"></a>4. 文本 Text</h4><h4 id="5-表单值-DisplayValue"><a href="#5-表单值-DisplayValue" class="headerlink" title="5. 表单值 DisplayValue"></a>5. 表单值 DisplayValue</h4><p>根据表单元素的值来查询，也就是对应的 value 属性，当然不仅仅是通过 value，表单 onchange 进来或者是 defaultValue 也是同样可以生效的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/components/DomQuery/index.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DomQuery</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* ... other content */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>input defaultValue<span class="token operator">=</span><span class="token string">"a query by value"</span> readOnly <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ./src/__test__/dom_query.test.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DomQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../components/DomQuery"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"tests for displayValue"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DomQuery <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> valueInput <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByDisplayValue</span><span class="token punctuation">(</span><span class="token string">"a query by value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    screen<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>valueInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-图片-AltText"><a href="#6-图片-AltText" class="headerlink" title="6. 图片 AltText"></a>6. 图片 AltText</h4><p>这个则是根据 img 的 alt 来查询，相比之前的一些查询方式，这种从用户视角上就需要满足一定情况才能看见了（图片不能正常加载）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/components/DomQuery/index.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DomQuery</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* ... other content */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">"a query by alt"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ./src/__test__/dom_query.test.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DomQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../components/DomQuery"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"tests for alt"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"alt"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DomQuery <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> altImg <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByAltText</span><span class="token punctuation">(</span><span class="token string">"a query by alt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    screen<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>altImg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-标题-Title-基本不会用"><a href="#7-标题-Title-基本不会用" class="headerlink" title="7. 标题 Title (基本不会用)"></a>7. 标题 Title (基本不会用)</h4><h4 id="8-后门-TestId"><a href="#8-后门-TestId" class="headerlink" title="8. 后门 TestId"></a>8. 后门 TestId</h4><p>这个就特殊点了，这个其实是一个后门的查询方式，通过新增 data-testid 属性来进行查询，这个对整个页面的语义和功能是没有任何影响的，相当于只是我们单独加的一个标识来确定指定的区域，一般只有实在不知道怎么选取需要的区域，才会去使用它</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/components/DomQuery/index.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">DomQuery</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* ... other content */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>div data<span class="token operator">-</span>testid<span class="token operator">=</span><span class="token string">"a not so good query"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ./src/__test__/dom_query.test.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DomQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../components/DomQuery"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"tests for testid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"testid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DomQuery <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> testidItem <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">"a not so good query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    screen<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>testidItem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>使用<code>yarn init vite react-test-demo</code> 创建一个项目</p></li><li><p>安装 jest 相关<code>yarn add jest babel-jest @testing-library/react @testing-library/user-event @testing-library/jest-dom jest-environment-jsdom -D</code></p></li><li><p>安装对应的 babel 插件解析文件 <code>yarn add @babel/preset-react @babel/preset-typescript @babel/preset-env -D</code></p></li><li><p><code>yarn add identity-obj-proxy -D</code></p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>创建一个 jest-setup.ts 用来帮助每个测试文件导入 jest-dom</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// jest-dom adds custom jest matchers for asserting on DOM nodes.</span><span class="token comment">// allows you to do things like:</span><span class="token comment">// expect(element).toHaveTextContent(/react/i)</span><span class="token comment">// learn more: https://github.com/testing-library/jest-dom</span><span class="token keyword">import</span> <span class="token string">"@testing-library/jest-dom"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<code>npx jest --init</code>创建一个 jest 配置文件,选项可以按如下选择</li></ol><pre class="line-numbers language-none"><code class="language-none">The following questions will help Jest to create a suitable configuration for your project✔ Would you like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? … yes✔ Would you like to use Typescript for the configuration file? … yes✔ Choose the test environment that will be used for testing › jsdom (browser-like)✔ Do you want Jest to add coverage reports? … no✔ Which provider should be used to instrument code for coverage? › babel✔ Automatically clear mock calls, instances, contexts and results before every test? … yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改 jest 配置文件</li></ol><p>主要看下面的配置</p><p>jest.config.mjs</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token comment">// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module</span>  <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">".(css|less|scss|sass)$"</span><span class="token operator">:</span> <span class="token string">"identity-obj-proxy"</span><span class="token punctuation">,</span> <span class="token comment">// 对css文件使用identity-obj-proxy进行代理,该包的作用是将对象的访问直接返回对应的字符串，比如 styles.title 将会返回 title 字符串</span>    <span class="token string-property property">"\\.(png|jpg|jpeg|gif|ttf|eot|svg)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/__mocks__/fileMock.js"</span><span class="token punctuation">,</span> <span class="token comment">// 对资源文件进行mock</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// A list of paths to modules that run some code to configure or set up the testing framework before each test</span>  <span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/jestSetup.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// The test environment that will be used for testing</span>  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">"jsdom"</span><span class="token punctuation">,</span>  <span class="token comment">// A map from regular expressions to paths to transformers</span>  <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"^.+.(js|ts|tsx)$"</span><span class="token operator">:</span> <span class="token string">"babel-jest"</span><span class="token punctuation">,</span> <span class="token comment">// 给jest添加一个转换器</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改 babel 配置帮助我们解析文件<br>.babelrc</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token string-property property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-react"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token string-property property">"runtime"</span><span class="token operator">:</span> <span class="token string">"automatic"</span> <span class="token comment">// 自动导入react,不用在文件中显式的引入</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"@babel/preset-typescript"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>编写一个测试用例</li></ol><p>src&#x2F;App.test.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"unit test of &lt;App/>"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test is working"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">"Vite + React"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就会看到如下结果</p><pre class="line-numbers language-none"><code class="language-none"> PASS  src&#x2F;App.test.tsx  unit test of &lt;App&#x2F;&gt;    ✓ test is working (30 ms)Test Suites: 1 passed, 1 totalTests:       1 passed, 1 totalSnapshots:   0 totalTime:        1.369 sRan all test suites.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何测试-Provider-包裹的组件"><a href="#如何测试-Provider-包裹的组件" class="headerlink" title="如何测试 Provider 包裹的组件"></a>如何测试 Provider 包裹的组件</h3><blockquote><p>代码在<a href="https://github.com/SaebaRyoo/Demos/tree/main/react-test-demo">react-test-demo 仓库</a></p></blockquote><p>先写一个用于创建测试 store 的 setupStore 方法, 默认使用项目中的 reducer</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 用于单元测试</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupStore</span><span class="token punctuation">(</span>  preloadedState<span class="token operator">:</span> PreloadedState<span class="token operator">&lt;</span>RootState<span class="token operator">></span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    reducer<span class="token operator">:</span> rootReducer<span class="token punctuation">,</span>    preloadedState<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再创建一个 src&#x2F;test&#x2F;testUitls.tsx 用于 Provider 包裹组件，并暴露一些方法</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> PropsWithChildren <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> setupStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../stores/store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RootState<span class="token punctuation">,</span> AppStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../stores/store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> PreloadedState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RenderOptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> userEvent <span class="token keyword">from</span> <span class="token string">"@testing-library/user-event"</span><span class="token punctuation">;</span><span class="token comment">// 这个 interface 扩展了 RTL 的默认 render 选项，同时允许用户指定其他选项，例如 initialState 和 store</span><span class="token keyword">interface</span> <span class="token class-name">ExtendedRenderOptions</span> <span class="token keyword">extends</span> <span class="token class-name">Omit<span class="token operator">&lt;</span>RenderOptions<span class="token punctuation">,</span> <span class="token string">"queries"</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  preloadedState<span class="token operator">?</span><span class="token operator">:</span> PreloadedState<span class="token operator">&lt;</span>RootState<span class="token operator">></span><span class="token punctuation">;</span>  store<span class="token operator">?</span><span class="token operator">:</span> AppStore<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// custom render for support Provider</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderWithProviders</span><span class="token punctuation">(</span>  ui<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    preloadedState<span class="token punctuation">,</span>    <span class="token comment">// 如果没有传入 store, 则自动创建一个 store 实例</span>    store <span class="token operator">=</span> <span class="token function">setupStore</span><span class="token punctuation">(</span>preloadedState<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span>renderOptions  <span class="token punctuation">&#125;</span><span class="token operator">:</span> ExtendedRenderOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span><span class="token operator">:</span> PropsWithChildren<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// enhance render methods</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    store<span class="token punctuation">,</span> <span class="token comment">// 增加redux功能</span>    user<span class="token operator">:</span> userEvent<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 在render前配置一个userEvent实例</span>    <span class="token operator">...</span><span class="token function">render</span><span class="token punctuation">(</span>ui<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> wrapper<span class="token operator">:</span> Wrapper<span class="token punctuation">,</span> <span class="token operator">...</span>renderOptions <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件中的-http-请求如何-mock"><a href="#组件中的-http-请求如何-mock" class="headerlink" title="组件中的 http 请求如何 mock"></a>组件中的 http 请求如何 mock</h3><p>使用 <code>msw（mock service worker）</code>来 mock 网络请求。</p><p>它不同于其他 mock service 需要独立运行一个服务且对代码的侵入性比较强。它是利用的 Service Worker API，在网络层进行请求拦截。保证有 mock 和无 mock 的应用程序的行为一致，且不需要为了 mock 而对应用程序的代码做修改。具体说明在<a href="https://mswjs.io/docs/#why-service-workers">官网</a></p><p>它的工作流如下图<br><img src="/imgs/react/3.png" class="lazyload placeholder" data-srcset="/imgs/react/3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="使用-userEvent-来模拟用户操作"><a href="#使用-userEvent-来模拟用户操作" class="headerlink" title="使用 userEvent 来模拟用户操作"></a>使用 userEvent 来模拟用户操作</h3><p>为什么使用 user-event 而不是 fire-event？这在<a href="https://testing-library.com/docs/user-event/intro/#differences-from-fireevent">官方的介绍</a>中说的比较明确。这里只强调一下重点：</p><p>因为用户在操作一个 dom 的时候，并不一定是只触发一个事件，而是可能会触发多个事件。<br>比如当用户在一个文本框内输入时，input 首先会是会触发 focus，然后是键盘和 onchange。</p><p><code>fireEvent</code>派发一个 DOM 事件，而<code>userEvent</code>模拟的是整个交互。它允许你描述一个用户交互来替代一个具体的事件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack原理之HMR( Hot Module Replacement，可以翻译为「模块热更新」)</title>
      <link href="/2022/11/11/qian-duan/gong-cheng-hua/webpack-yuan-li-2-ru-he-shi-xian-hmr/"/>
      <url>/2022/11/11/qian-duan/gong-cheng-hua/webpack-yuan-li-2-ru-he-shi-xian-hmr/</url>
      
        <content type="html"><![CDATA[<p>HMR 能够在保持页面状态不变的情况下动态更新代码模块，在 webpack 实现 HMR 之前，应用的加载更新都是一种页面级别的院子操作。<br>即使再小的改动，如更新字体大小等都会重新加载整个页面，会降低整体开发效率，如：</p><ul><li>对于复杂表单，你需要重新填写很多字段</li><li>弹框消失，可是你只需要修改弹框内一些小样式，却还需要重新执行显示该弹框的交互动作</li></ul><h2 id="使用-HMR"><a href="#使用-HMR" class="headerlink" title="使用 HMR"></a>使用 HMR</h2><p><strong>从 webpack-dev-server v4 开始，HMR 是默认启用的。它会自动应用 webpack.HotModuleReplacementPlugin，这是启用 HMR 所必需的。因此当 hot 设置为 true 或者通过 CLI 设置 –hot，你不需要在你的 webpack.config.js 添加该插件。</strong></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol><li>使用<code>webpack-dev-server(WDS)</code>创建一个 server，托管静态资源，同时以 Runtime 方式注入一段处理<code>HMR</code>逻辑的客户端代码</li><li>浏览器加载页面，与<code>WDS</code>建立 WebSocket 连接</li><li>Webpack 监听到文件变化，增量构建产生变更的模块，并通过 WebSocket 发送<code>hash</code>事件</li><li>浏览器接收到<code>hash</code>事件后，请求<code>manifest</code>资源文件，确认增量变更范文</li><li>浏览器加载产生变更的增量模块</li><li>Webpack 运行时触发变更模块的<code>module.hot.accept</code>回调。执行代码变更逻辑</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack的loader和plugin的编写</title>
      <link href="/2022/11/10/qian-duan/gong-cheng-hua/webpack-yuan-li-1-loader-he-plugin-de-bian-xie/"/>
      <url>/2022/11/10/qian-duan/gong-cheng-hua/webpack-yuan-li-1-loader-he-plugin-de-bian-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="loader-的链式调用和顺序执行"><a href="#loader-的链式调用和顺序执行" class="headerlink" title="loader 的链式调用和顺序执行"></a>loader 的链式调用和顺序执行</h3><p>loader 就是一个 js 函数，它的作用就是接收源码，并返回新的源码。</p><p>如果是多个 loader 串行，则执行顺序是从右向左</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"less-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，编译 less 文件的执行顺序为 less-loader -&gt; css-loader -&gt; style-loader</p><p>那么，为什么是从后往前的呢？</p><p>首先，函数的组合有两种情况，</p><ol><li>Unix 中的 pipline</li><li>Compose</li></ol><p>那么 webpack 中使用的就是 Compose， 它的原理如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">compose</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过如下的例子来验证</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// a-loader.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loader a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// b-loader.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loader b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，将 loader 引入到 webpack 的配置中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">;</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./loaders/a-loader.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./loaders/b-loader.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助<code>loader-runner</code>开发 loader<br>如下，开发一个 raw-loader</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// run-loader.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> runLoaders <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-runner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">runLoaders</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">resource</span><span class="token operator">:</span> <span class="token string">"./demo.txt"</span><span class="token punctuation">,</span>    <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/loaders/raw-loader"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">readResource</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编写 loader</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// raw-loader</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\u2028</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\\u2028"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\u2029</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\\u2029"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return `export default $&#123;json&#125;`</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步loader</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>loader 如何抛出错误</p><ul><li><p>直接通过 throw</p></li><li><p>通过 this.callback 传递</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>    <span class="token literal-property property">err</span><span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> string <span class="token operator">|</span> Buffer<span class="token punctuation">,</span>    sourceMap<span class="token operator">?</span><span class="token operator">:</span> SourceMap<span class="token punctuation">,</span>    meta<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>loader 的异步处理</strong><br>通过<code>this.async</code>来返回一个异步 loader</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// raw-loader</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\u2028</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\\u2028"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\u2029</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\\u2029"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./async.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在 loader 中使用缓存</strong></p><ul><li>webpack 中默认开启 loader 缓存，可以使用 this.cacheable(false) 关掉缓存</li><li>缓存条件: loader 在结果相同的输入下有确定的输出， 有依赖的 loader 无法缓存</li></ul><p><strong>自动合成雪碧图 loader</strong></p><p>支持的语法：</p><p>background: url(‘a.png?**sprite’) -&gt;<br>-&gt; background: url(‘sprite.png’)<br>background: url(‘b.png?**sprite’) -&gt;</p><h3 id="插件的基本结构"><a href="#插件的基本结构" class="headerlink" title="插件的基本结构"></a>插件的基本结构</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 插件名称</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 2. 插件上的apply方法，注入compiler</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"My Plugin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// hooks</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插件处理逻辑</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(六):如何优化webpack?</title>
      <link href="/2022/11/08/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-6-webpack-gou-jian-you-hua/"/>
      <url>/2022/11/08/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-6-webpack-gou-jian-you-hua/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><p>作为一个前端开发，Webpack 一定不陌生，在前端这一领域，大多数的项目应该都是用 webpack 作为一个模块打包工具。但是当项目的规模变大后，应该都或多或少的遇到了性能相关的问题。</p><p>而以 webpack 作为工具，则可以将性能分为两种：</p><ol><li><p>构建速度</p></li><li><p>页面加载速度</p></li></ol><p>以这两个为目的，对我们的项目进行优化。</p><h2 id="尽量使用高版本的-webpack-和-node"><a href="#尽量使用高版本的-webpack-和-node" class="headerlink" title="尽量使用高版本的 webpack 和 node"></a>尽量使用高版本的 webpack 和 node</h2><p>Webpack 和 Node 每次一大版本的更新都会伴随着性能优化，这是最直接明显的</p><h2 id="speed-measure-webpack-plugin"><a href="#speed-measure-webpack-plugin" class="headerlink" title="speed-measure-webpack-plugin"></a>speed-measure-webpack-plugin</h2><p>该插件的作用就是分析 loader 和 plugin 的打包速度，针对信息定制优化方案</p><p>安装<code>yarn add speed-measure-webpack-plugin -D</code></p><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> SpeedMeasureWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"speed-measure-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> swp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpeedMeasureWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> swp<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>yourConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a>webpack-bundle-analyzer</h2><p>分析打包模块体积</p><h2 id="多线程进行-TypeScript-的类型检查"><a href="#多线程进行-TypeScript-的类型检查" class="headerlink" title="多线程进行 TypeScript 的类型检查"></a>多线程进行 TypeScript 的类型检查</h2><p>在项目中使用了 ts-loader 后，项目中 ts 文件的类型检查会非常的耗时。所以我们通过 ts-loader 的配置关闭类型检查，并使用 fork-ts-checker-webpack-plugin 在另一个的线程进行类型检查。这会大大减少 webpack 的编译时间。</p><p><code>yarn add fork-ts-checker-webpack-plugin -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts(x)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 关闭类型检查，即只进行转译</span>              <span class="token comment">// 类型检查交给 fork-ts-checker-webpack-plugin 在别的的线程中做</span>              <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ForkTsCheckerWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预编译资源模块（该方案在-webpack4-之后，优化效果就不是很明显了）"><a href="#预编译资源模块（该方案在-webpack4-之后，优化效果就不是很明显了）" class="headerlink" title="预编译资源模块（该方案在 webpack4 之后，优化效果就不是很明显了）"></a>预编译资源模块（该方案在 webpack4 之后，优化效果就不是很明显了）</h2><p>使用 webpack 官方的 DllPlugin 进行分包</p><ul><li>思路： 将一些基础且且比较稳定的包打包成一个文件，如 react、react-dom、redux、react-redux</li><li>方法： DLLPlugin 分包，DllReferencePlugin 对 manifest.json 引用。引用 manifest.json 会自动关联 DllPulugin 中的包</li></ul><p>这需要一个单独的 webpack.dll.js 配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".less"</span><span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 制定需要分离的包</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span> <span class="token string">"redux"</span><span class="token punctuation">,</span> <span class="token string">"react-redux"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].dll.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dll/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">"[name]_[fullhash]"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"[name]_[fullhash]"</span><span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dll"</span><span class="token punctuation">,</span> <span class="token string">"manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根目录创建一个 dll 目录，然后运行<code>webpack --config webpack.dll.js</code>，将一些基础包提前编译出来，dll 目录下会有 manifest.json react.dll.js 两个文件</p><p>然后在主要的 webpack 配置中引用</p><p>需要安装一个插件将 dll 文件导入到 html 中<br><code>yarn add add-asset-html-webpack-plugin -D</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 将预编译的公共库导入到html中</span>    <span class="token keyword">new</span> <span class="token class-name">AddAssetHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">filepath</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./dll/react.dll.js"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// webpack4之后dllPlugin对性能的提升就不大了</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>      <span class="token comment">// manifest.json就是对我们要引入包的描述</span>      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./dll/manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多进程并行压缩-js-代码-css-代码压缩"><a href="#多进程并行压缩-js-代码-css-代码压缩" class="headerlink" title="多进程并行压缩 js 代码, css 代码压缩"></a>多进程并行压缩 js 代码, css 代码压缩</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// js压缩</span>        <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token comment">// 默认为当前电脑cpu的两倍 os.cpus().length - 1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// css压缩</span>        <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缩小构建目标"><a href="#缩小构建目标" class="headerlink" title="缩小构建目标"></a>缩小构建目标</h2><p>目的：尽可能的少构建模块</p><p>比如 babel-loader 不解析 node_modules</p><p>优化 resolve.modules 配置（减少模块搜索层级）</p><p>优化 resolve.mainFields 配置</p><p>优化 resolve.extensions 配置</p><p>合理使用 alias</p><h2 id="使用-tree-shaking-擦除无用的-js-和-css"><a href="#使用-tree-shaking-擦除无用的-js-和-css" class="headerlink" title="使用 tree shaking 擦除无用的 js 和 css"></a>使用 tree shaking 擦除无用的 js 和 css</h2><p>webpack 中，只要使用的是 es6 的语法，默认都会对 js 代码进行 tree shaking</p><p>但是 css 代码并不能 tree shaking，所以需要使用到 purgecss-webpack-plugin</p><p>安装<code>yarn add purgecss-webpack-plugin@4.1.3 -D</code>.</p><p><strong>为什么要安装 4.1.3 版本呢？因为我使用的是 webpack5，这个最新版本 5.0.0 在 webpakc 中有一个 Constructor Error 的错误，<a href="https://github.com/FullHuman/purgecss/issues/994">具体请看</a></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"glob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">PATHS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">src</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">PurgecssPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">paths</span><span class="token operator">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PATHS</span><span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/**/*</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">nodir</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对图片进行压缩"><a href="#对图片进行压缩" class="headerlink" title="对图片进行压缩"></a>对图片进行压缩</h2><p>首先安装对应插件<br><code>yarn add image-minimizer-webpack-plugin @squoosh/lib -D</code></p><p>在这个安装的过程中可能会出现错误(我是在使用 <strong>imagemin</strong> 时出现的，可能和@squoosh&#x2F;lib 无关)，可以按照以下方法逐步排除（我的是在 mac 中出现的，如果是在别的环境，就按照别的环境的命令安装）</p><ul><li>node lib&#x2F;install.js error: <code>brew install automake autoconf libtool</code> <a href="https://github.com/imagemin/imagemin-mozjpeg/issues/11">https://github.com/imagemin/imagemin-mozjpeg/issues/11</a></li><li>Permission denied @ apply2files: <code>sudo chown -R $&#123;LOGNAME&#125;:staff /usr/local/lib/node_modules</code> <a href="https://stackoverflow.com/questions/61899041/macos-permission-denied-apply2files-usr-local-lib-node-modules-expo-cli-n">https://stackoverflow.com/questions/61899041/macos-permission-denied-apply2files-usr-local-lib-node-modules-expo-cli-n</a></li><li>Build error: no nasm (Netwide Assembler) found: <code>brew install nasm</code></li></ul><p>然后就是在生产构建流程中加入以下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">//...</span>      <span class="token keyword">new</span> <span class="token class-name">ImageMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">implementation</span><span class="token operator">:</span> ImageMinimizerPlugin<span class="token punctuation">.</span>squooshMinify<span class="token punctuation">,</span>          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Your options for `squoosh`</span>            <span class="token comment">// The document where you can find options is https://github.com/webpack-contrib/image-minimizer-webpack-plugin#optimize-with-squoosh</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对项目进行分包-更多细节可以看这篇文章"><a href="#对项目进行分包-更多细节可以看这篇文章" class="headerlink" title="对项目进行分包 更多细节可以看这篇文章"></a>对项目进行分包 更多细节可以看<a href="https://juejin.cn/post/6919684767575179278">这篇文章</a></h2><p>基本分包策略：</p><ol><li>公共的库是一定要尽量拆的。</li><li>公共的库尽量做到按需加载，这也是优化首屏加载需要注意的。</li><li>分包不能太细，0KB 至 10 KB 的包是极小的包，应当考虑合并。10 KB 至 100 KB 的包是小包，比较合适；100 KB 至 200 KB 的包只能是比较核心重要的包，需要重点关注，大于 200KB 的包就需要考虑拆包了。当然，也不排除一些特殊情况。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">runtimeChunk</span><span class="token operator">:</span> <span class="token string">"single"</span><span class="token punctuation">,</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// chunks: 'async',</span>      <span class="token comment">// minSize: 20000,</span>      <span class="token comment">// minRemainingSize: 0,</span>      <span class="token comment">// minChunks: 1,</span>      <span class="token comment">// maxAsyncRequests: 30,</span>      <span class="token comment">// maxInitialRequests: 30,</span>      <span class="token comment">// enforceSizeThreshold: 50000,</span>      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 提取公共资源</span>        <span class="token literal-property property">vendor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]_?react(.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"vendors-react-bucket"</span><span class="token punctuation">,</span>          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-externals-将第三方库排除在打包的-bundle-外"><a href="#使用-externals-将第三方库排除在打包的-bundle-外" class="headerlink" title="使用 externals 将第三方库排除在打包的 bundle 外"></a>使用 externals 将第三方库排除在打包的 bundle 外</h3><p>将一些比较稳定的，常用的第三方库分离出打包流程中，使用 cdn 进行加载，能很有效的降低 bundle 的体积，加快首屏渲染时间，突破浏览器对同一域名下资源并发请求的限制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用cdn来增加浏览器针对同一域名的并发限制，使用externals将这些库排除在bundle外</span>  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>    <span class="token string-property property">"react-dom"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span>      <span class="token literal-property property">amd</span><span class="token operator">:</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span>      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token comment">// 指向全局变量</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">redux</span><span class="token operator">:</span> <span class="token string">"redux"</span><span class="token punctuation">,</span>    <span class="token string-property property">"react-redux"</span><span class="token operator">:</span> <span class="token string">"react-redux"</span><span class="token punctuation">,</span>    <span class="token string-property property">"react-router"</span><span class="token operator">:</span> <span class="token string">"react-router"</span><span class="token punctuation">,</span>    <span class="token string-property property">"react-router-dom"</span><span class="token operator">:</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将这些排除的第三方库的稳定包采用 cdn 部署，并在项目的入口<code>index.html</code>文件中引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">crossorigin</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">crossorigin</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(五):状态管理库Redux和Axios请求配置</title>
      <link href="/2022/11/07/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-5-pei-zhi-redux-he-axios/"/>
      <url>/2022/11/07/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-5-pei-zhi-redux-he-axios/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><h3 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>在一个中大型的项目中，统一的状态管理是必不可少的。尤其是在组件层级较深的 React 项目中，可以通过 redux 和 react-redux 来跨层级传输组件(通过实现 react 的 Context)。</p><ol><li>避免一个属性层层传递，代码混乱</li><li>view（视图）和 model(模型)的分离，使得逻辑更清晰</li><li>多个组件共享一个数据，如用户信息、一个父组件与多个子组件</li></ol><p><strong>可以看一下这篇关于<a href="https://saebaryoo.github.io/2022/10/01/react/redux%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/">redux 概念和源码分析</a>的文章</strong></p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>使用官方推荐的@reduxjs&#x2F;toolkit 来统一管理在 redux 开发过程中经常使用到的 middleware</p><ol><li><p>安装相应工具<code>yarn add redux react-redux @reduxjs/toolkit</code></p></li><li><p>创建一个 redux 的初始管理入口 src&#x2F;core&#x2F;store.ts</p></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> configureStore<span class="token punctuation">,</span> ThunkAction<span class="token punctuation">,</span> Action <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token comment">/** * 创建一个Redux store,同时自动的配置Redux DevTools扩展，方便在开发过程中检查 **/</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义RootState和AppDispatch是因为使用的是TS作为开发语言，</span><span class="token comment">// RootState通过store来自己推断类型</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RootState</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> store<span class="token punctuation">.</span>getState<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// Inferred type: &#123;posts: PostsState, comments: CommentsState, users: UsersState&#125;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AppDispatch</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AppThunk<span class="token operator">&lt;</span>ReturnType <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span></span> <span class="token operator">=</span> ThunkAction<span class="token operator">&lt;</span>  ReturnType<span class="token punctuation">,</span>  RootState<span class="token punctuation">,</span>  <span class="token builtin">unknown</span><span class="token punctuation">,</span>  Action<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在对应目录下创建不同组件的 state</li></ol><p>pages&#x2F;mine&#x2F;model&#x2F;mine.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AppThunk<span class="token punctuation">,</span> RootState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/src/core/store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice<span class="token punctuation">,</span> PayloadAction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fetchCount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/src/service/api"</span><span class="token punctuation">;</span><span class="token comment">// 为每个单独的store定义一个类型</span><span class="token keyword">interface</span> <span class="token class-name">CounterState</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始state</span><span class="token keyword">const</span> initialState<span class="token operator">:</span> CounterState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> counterSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"mine"</span><span class="token punctuation">,</span>  initialState<span class="token punctuation">,</span>  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 在redux-toolkit中使用了immutablejs ，它允许我们可以在reducers中写“mutating”逻辑</span>      <span class="token comment">//（这里需要提一下redux的reducer本身是个纯函数，即相同的输入，总是会的到相同的输出，并且在执行过程中没有任何副作用。而这里的state.value+=1 实际就是state.value = state.value + 1，它修改了传入的值，这就是副作用。虽然例子中是简单类型，并不会修改源数据，但是如果存储的数据为引用类型时会给你的项目带来意想不到的bug），</span>      <span class="token comment">// 这就不符合redux对于reducer纯函数的定义了，所以使用immutablejs。让你可以写看似“mutating”的逻辑。但是实际上并不会修改源数据</span>      state<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// Use the PayloadAction type to declare the contents of `action.payload`</span>    <span class="token function-variable function">incrementByAmount</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token operator">:</span> PayloadAction<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>value <span class="token operator">+=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 支持异步dispatch的thunk，项目中比较常见，因为很多时候需要和后端交互，获取到后端数据，然后再保存到store中</span><span class="token keyword">export</span> <span class="token keyword">const</span> asyncIncrement <span class="token operator">=</span>  <span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> AppThunk <span class="token operator">=></span>  <span class="token keyword">async</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// selectCount(getState());</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchCount</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">incrementByAmount</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Action creators are generated for each case reducer function</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> incrementByAmount <span class="token punctuation">&#125;</span> <span class="token operator">=</span> counterSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span><span class="token comment">// Other code such as selectors can use the imported `RootState` type</span><span class="token comment">// export const selectCount = (state: RootState) => state.mine.value;</span><span class="token keyword">export</span> <span class="token keyword">default</span> counterSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在视图中 dispatch action 和使用 state</li></ol><p>mine&#x2F;index.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> asyncIncrement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./model/mine"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useAppSelector<span class="token punctuation">,</span> useAppDispatch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/src/utils/typedHooks"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Mine<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// The `state` arg is correctly typed as `RootState` already</span>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useAppSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>mine<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useAppDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Increment value<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">        Increment      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Decrement value<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">        Decrement      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Decrement value<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">asyncIncrement</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">        asyncIncrement      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Mine<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Axios-二次封装网络请求"><a href="#使用-Axios-二次封装网络请求" class="headerlink" title="使用 Axios 二次封装网络请求"></a>使用 Axios 二次封装网络请求</h2><ol><li><p>安装<code>yarn add axios</code></p></li><li><p>创建 src&#x2F;core&#x2F;request.ts</p></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment">// const &#123; REACT_APP_ENV &#125; = process.env;</span><span class="token keyword">const</span> config<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// baseURL: 'http://127.0.0.1:8001',</span>  timeout<span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 构建实例</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// axios方法映射</span><span class="token keyword">const</span> InstanceMaper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  get<span class="token operator">:</span> instance<span class="token punctuation">.</span>get<span class="token punctuation">,</span>  post<span class="token operator">:</span> instance<span class="token punctuation">.</span>post<span class="token punctuation">,</span>  <span class="token keyword">delete</span><span class="token operator">:</span> instance<span class="token punctuation">.</span>delete<span class="token punctuation">,</span>  put<span class="token operator">:</span> instance<span class="token punctuation">.</span>put<span class="token punctuation">,</span>  patch<span class="token operator">:</span> instance<span class="token punctuation">.</span>patch<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  opts<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"get"</span> <span class="token operator">|</span> <span class="token string">"post"</span> <span class="token operator">|</span> <span class="token string">"delete"</span> <span class="token operator">|</span> <span class="token string">"put"</span> <span class="token operator">|</span> <span class="token string">"patch"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Do something before request is sent</span>      <span class="token comment">// 当某个接口需要权限时，携带token。如果没有token，重定向到/login</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>auth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// eslint-disable-next-line @typescript-eslint/ban-ts-comment</span>        <span class="token comment">// @ts-ignore</span>        config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>satoken <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"satoken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Do something with request error</span>      <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Add a response interceptor</span>  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Any status code that lie within the range of 2xx cause this function to trigger</span>      <span class="token comment">// Do something with response data</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"response:"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// http状态码</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网络请求错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 后端返回的状态，表示请求成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span>      <span class="token comment">// Do something with response error</span>      <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> method <span class="token operator">=</span> opts<span class="token punctuation">.</span>method<span class="token punctuation">;</span>  <span class="token keyword">return</span> InstanceMaper<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> request<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置 webpack</li></ol><p>在开发环境中，前端因为浏览器的同源限制，是不能跨域访问后端接口的。所以当我们以 webpack 作为开发环境的工具后，需要配置<code>devServer</code>的 proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"/api"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:8001"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，一个基础的前端开发环境就搭建完成了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(四):配置React-Router并对代码进行分割和动态import</title>
      <link href="/2022/11/06/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-4-pei-zhi-react-router/"/>
      <url>/2022/11/06/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-4-pei-zhi-react-router/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><h2 id="React-Router-快速了解"><a href="#React-Router-快速了解" class="headerlink" title="React Router 快速了解"></a>React Router 快速了解</h2><p>React Router 一共有 6 种 Router Components，分别是 BrowserRouter、HashRouter、MemoryRouter、NativeRouter、Router、StaticRouter</p><p><strong>详细请看<a href="https://saebaryoo.github.io/2022/09/29/react/ReactRouter/">这里</a></strong></p><p>在这个系列文章中，我们要做的是一个单页应用，所以使用的是 React Router6 BroserRouter, 它是基于 html5 规范的 window.history 来实现路由状态管理的。<br>它不同于使用 hash 来保持 UI 和 url 同步。使用了 BrowserRouter 后，每次的 url 变化都是一次资源请求。所以在使用时，需要在 Webpack 中配置，以防止加载页面时出现 404</p><h2 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h2><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'main.js'</span><span class="token punctuation">,</span>    <span class="token comment">// 配置中的path是资源输出的绝对路径,而publicPath则是配置静态资源的相对路径</span>    <span class="token comment">// 也就是说 静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</span>    <span class="token comment">// 所以，上面输出的main.js的访问路径就是&#123;__dirname&#125;/dist/dist/main.js</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'/dist'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将所有的404请求redirect到 publicPath指定目录下的index.html上</span>    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 publicPath 请看<a href="https://juejin.cn/post/6844903601060446221">这里</a></p><h2 id="配置-React-router"><a href="#配置-React-router" class="headerlink" title="配置 React-router"></a>配置 React-router</h2><ol><li><p>安装 react-router<code>yarn add react-router-dom</code></p></li><li><p>安装@babel&#x2F;plugin-syntax-dynamic-import 来支持动态 import <code>yarn add @babel/plugin-syntax-dynamic-import -D</code></p></li><li><p>将动态导入插件添加到 babel 中</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编写 react-router 配置,使用 React.lazy 和 React.Suspense 来配合 import 实现动态加载, 它的本质就是通过路由来分割代码成不同组件，Promise 来引入组件，实现只有在通过路由访问某个组件的时候再进行加载和渲染来实现动态导入</p><p>config&#x2F;routes.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../src/pages/Home/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/mine"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../src/pages/Mine/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/mine/bus"</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../src/pages/Mine/Bus/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/mine/cart"</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../src/pages/Mine/Cart/index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> routes<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src&#x2F;pates&#x2F;root.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Suspense <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserRouter<span class="token punctuation">,</span> Routes<span class="token punctuation">,</span> Route <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">"@/config/routes"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Loading<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading.....</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">CreateHasChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>        <span class="token attr-name">index</span>        <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Loading</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>route.component</span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token function">RouteCreator</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">CreateNoChildrenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>      <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>route<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Loading</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>route.component</span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">&#125;</span></span>    <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">RouteCreator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>routes<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>route<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>route<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">CreateHasChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">CreateNoChildrenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Root<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">RouteCreator</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Root<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/src/utils/sum"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">"./components/header"</span><span class="token punctuation">;</span><span class="token keyword">import</span> img1 <span class="token keyword">from</span> <span class="token string">"@/public/imgs/ryo.jpeg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> img2 <span class="token keyword">from</span> <span class="token string">"@/public/imgs/乱菊.jpeg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> img3 <span class="token keyword">from</span> <span class="token string">"@/public/imgs/weather.jpeg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Root <span class="token keyword">from</span> <span class="token string">"./pages/root"</span><span class="token punctuation">;</span><span class="token keyword">const</span> App<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Root</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.tsx</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRoot <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styles.less"</span><span class="token punctuation">;</span><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(三):添加eslint+husky+lint-stage等预检工具</title>
      <link href="/2022/11/05/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-3-zeng-jia-eslint-husky-lint-stage-deng-jian-cha-gong-ju/"/>
      <url>/2022/11/05/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-3-zeng-jia-eslint-husky-lint-stage-deng-jian-cha-gong-ju/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><blockquote><p>上一篇讲了如何创建一个简单的开发环境搭建，但是在一个项目中，只有这些是不够的。每个人的代码质量不同，格式不同。所以需要用到代码规范校验</p></blockquote><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>它主要功能包含代码格式校验，代码质量校验</p><ol><li><p>首先，安装 eslint <code>yarn add eslint -D</code>(目前我用的是 eslint v8.25.0, 高版本的 eslint 需要比较新的 vscode，不然 eslint 插件可能无法工作)</p></li><li><p>配置 eslint 规则和.eslintignore,并且前面我们用到了 react 和 typescript，所以也需要安装一下对应的插件和解析器<br><code>yarn add eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin -D</code></p></li></ol><p>.eslintrc.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:react/recommended"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"arrow-body-style"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"prefer-arrow-callback"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-var"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-console"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string-property property">"consistent-return"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string-property property">"default-case"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-alert"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-irregular-whitespace"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-extra-boolean-cast"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/indent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// tab 缩进2空格</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.eslintignore</p><pre class="line-numbers language-none"><code class="language-none">dist.eslintrc.jswebpack.*postcss.***&#x2F;*.test.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加-editorconfig-和-prettier-来约束代码的书写规范"><a href="#添加-editorconfig-和-prettier-来约束代码的书写规范" class="headerlink" title="添加 editorconfig 和 prettier 来约束代码的书写规范"></a>添加 editorconfig 和 prettier 来约束代码的书写规范</h2><p>对于它们两的区别就是，editorconfig 它主要做一节比较基础的格式化，如：Tab 缩进几格、文件编码是否是 utf-8 等，和编程语言无关，你可能会在任何项目中看到它。而 prettier 是 js 特有的格式化工具，里面有很多配置项是 js 这门语言特有的规范。</p><p>它们的功能会有重叠，但大多数并不相同。所以前端项目往往两者都有。</p><p>总的来说就是在前端中，大部分 editorconfig 能干的，prettier 也能干，它不能干的，prettier 也能干。非要选一个的话，肯定选 prettier</p><p><strong>然后将 prettier 规范扩展到 eslint 中，首先是需要安装 prettier</strong></p><p><a href="https://github.com/prettier/eslint-plugin-prettier">eslint-plugin-prettier</a></p><p><code>yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</code></p><p>然后配置.prettierrc.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.prettierignore</p><pre class="line-numbers language-none"><code class="language-none">**&#x2F;*.svgpackage.json&#x2F;dist.dockerignore.DS_Store.eslintignore*.png*.tomldocker.editorconfigDockerfile*.gitignore.prettierignoreLICENSE.eslintcache*.lockyarn-error.log.historyCNAME&#x2F;build&#x2F;public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 eslint 中添加对应扩展</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token string-property property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>    <span class="token string">"plugin:prettier/recommended"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>    <span class="token string">"prettier"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    <span class="token string-property property">"prettier/prettier"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.editorconfig 需要在 vscode 中配合 editorconfig 插件使用</p><pre class="line-numbers language-none"><code class="language-none"># http:&#x2F;&#x2F;editorconfig.orgroot &#x3D; true[*]charset &#x3D; utf-8end_of_line &#x3D; lfindent_size &#x3D; 2indent_style &#x3D; spaceinsert_final_newline &#x3D; truemax_line_length &#x3D; 80trim_trailing_whitespace &#x3D; true[*.md]max_line_length &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-husky-和-lint-stage-构建代码检查工作流"><a href="#使用-husky-和-lint-stage-构建代码检查工作流" class="headerlink" title="使用 husky 和 lint-stage 构建代码检查工作流"></a>使用 husky 和 lint-stage 构建代码检查工作流</h2><p>完成以上的配置后，我们需要在 package.json 中添加两个 script 脚本,方便我们在代码书写完成后运行命令来检查代码</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ext .tsx,.ts,.js src/"</span><span class="token punctuation">,</span>    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier -c --write \"src/**/*\""</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这一步还是需要开发者手动完成。你不能保证每个人都有和你相同的习惯。所以我们需要有一个 Lint 环节(Code Linting)，他是保障代码规范一致性的重要环节。同时，他会减少代码出错的概率。这也是变相的节约公司的时间和自己的时间。</p><p>而 husky 封装了 githook，在代码提交前运行脚本对代码进行预检。</p><ol><li>安装 husky <code>yarn add husky -D</code></li><li>在 package.json 中添加一个 script，并运行一次</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"prepare"</span><span class="token operator">:</span> <span class="token string">"husky install"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>yarn run prepare</code></p><ol start="3"><li>添加一个 hook</li></ol><pre class="line-numbers language-none"><code class="language-none">npx husky add .husky&#x2F;pre-commit &quot;npm run lint&quot;git add .husky&#x2F;pre-commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后提交代码,他会在每次 commit 前运行 npm run lint<br><code>git commit -m &quot;Keep calm and commit&quot;</code></p><p>但是在遗留代码库工作会遇到新的问题，开启 Lint 初期，你改动一个文件，可能其他文件中也有大量 lint error 需要修复。但是修改整个项目显然成本很高，且容易出错。所以为了稳定，肯定是最好能 lint 修改的部分。其他的部分渐进修改。</p><p>基于这个想法 lint-staged 出现了，stage 就是 git 中的概念，指待提交区，在配合 lint-stage 后。你的每次 commit 都只会 lint 你的待提交区的修改过的代码。</p><p>用法如下：</p><p>首先安装<br><code>yarn add lint-staged -D</code></p><p>然后修改 package.json 配置，或者其他形式的配置文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"**/*.&#123;js,jsx,ts,tsx&#125;"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span><span class="token punctuation">,</span>    <span class="token property">"**/*.&#123;js,jsx,tsx,ts,less,md,json&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 .husky&#x2F;pre-commit 脚本中添加<code>npx --no-install lint-staged</code>命令，这样。每次 commit 前都会根据 lint 规则预检代码且通过 prettier 命令修改代码格式，并且这些操作都控制在了待提交区的代码中</p><p>.husky&#x2F;pre-commit</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env sh. &quot;$(dirname -- &quot;$0&quot;)&#x2F;_&#x2F;husky.sh&quot;npm testnpx --no-install lint-staged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-commitlint-husky-约束-commit-信息格式"><a href="#使用-commitlint-husky-约束-commit-信息格式" class="headerlink" title="使用 commitlint + husky 约束 commit 信息格式"></a>使用 commitlint + husky 约束 commit 信息格式</h2><p>一个项目中，提交的信息也是非常的重要，如果没有规范约束，提交的备注经常是五花八门的，非常不利于后期追踪和排查问题。</p><ol><li>安装相关库，前面已经安装过了 husky<br><code>yarn add @commitlint/config-conventional @commitlint/cli -D</code></li></ol><p>commitlint 是一个用来检查 commit message 格式是否符合要求的第三方工具，而 husky 是 commit 提交前的 git hook，用来运行 commit lint 规范</p><ol start="2"><li>配置 commitlint.config.js 规范</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// commitlint.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@commitlint/config-conventional"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"type-enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token string">"feat"</span><span class="token punctuation">,</span> <span class="token comment">// 增加新功能</span>        <span class="token string">"fix"</span><span class="token punctuation">,</span> <span class="token comment">// 修复bug</span>        <span class="token string">"docs"</span><span class="token punctuation">,</span> <span class="token comment">// 只改动了文档相关的内容</span>        <span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token comment">// 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span>        <span class="token string">"refactor"</span><span class="token punctuation">,</span> <span class="token comment">// 代码重构时使用</span>        <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token comment">// 添加测试或者修改现有测试</span>        <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token comment">// 构造工具的或者外部依赖的改动，例如webpack，npm</span>        <span class="token string">"chore"</span><span class="token punctuation">,</span> <span class="token comment">// 不修改src或者test的其他修改，例如构建过程或辅助工具的变更</span>        <span class="token string">"revert"</span><span class="token punctuation">,</span> <span class="token comment">// 执行git revert打印的message</span>        <span class="token string">"pref"</span><span class="token punctuation">,</span> <span class="token comment">// 提升性能的改动</span>        <span class="token string">"merge"</span><span class="token punctuation">,</span> <span class="token comment">// 代码合并</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-case"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"scope-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"scope-case"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"subject-full-stop"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"subject-case"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"header-max-length"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>添加 shell 脚本<br><code>npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></li></ol><p>执行完后，.husky 目录如下</p><pre class="line-numbers language-none"><code class="language-none">-- commit-msg- pre-commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以修改代码，<br>然后<code>git add . &amp;&amp; git commit -m &#39;foo: change&#39; </code>来测试了，正常会报错如下信息</p><p><strong>type must be one of [feat, fix, docs, style, refactor, test, build, chore, revert, pref, merge] [type-enum]</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(二):Webpack(二) - 添加React + TS</title>
      <link href="/2022/11/04/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-2-webpack-da-jian-react-ts-de-kai-fa-huan-jing/"/>
      <url>/2022/11/04/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-2-webpack-da-jian-react-ts-de-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><blockquote><p>上一篇总结了基础的 webpack 概念。那么，从这一篇就开始搭建一个在项目中使用的正式开发环境了</p></blockquote><h2 id="解析-React-TS"><a href="#解析-React-TS" class="headerlink" title="解析 React + TS"></a>解析 React + TS</h2><ol><li>首先是安装需要的库</li></ol><p><code>yarn add react react-dom react-hot-loader -S</code></p><p><code>yarn add typescript ts-loader @hot-loader/react-dom -D</code></p><ol start="2"><li>修改 babel</li></ol><pre class="line-numbers language-none"><code class="language-none">&#123;  presets: [    [      &#39;@babel&#x2F;preset-env&#39;,      &#123;        modules: false      &#125;    ],    &#39;@babel&#x2F;preset-react&#39;  ],  plugins: [    &#39;react-hot-loader&#x2F;babel&#39;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置 tsconfig.json</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"noImplicitReturns"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>然后就是配置解析 react 和 ts 的 loader</li></ol><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 新增加了jsx，对React语法的解析</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts(x)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 对ts的解析</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析图片和字体"><a href="#解析图片和字体" class="headerlink" title="解析图片和字体"></a>解析图片和字体</h2><ol><li>下载 loader</li></ol><p><code>yarn add file-loader url-loader -D</code></p><ol start="2"><li>修改 webpack 配置</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 解析字体资源</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'file-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 解析图片资源，小于10kb的图解析为base64</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析-css、less-使用-MiniCssExtractPlugin-将-js-中的-css-分离出来，形成单独的-css-文件，并使用-postcss-loader-生成兼容各浏览器的-css"><a href="#解析-css、less-使用-MiniCssExtractPlugin-将-js-中的-css-分离出来，形成单独的-css-文件，并使用-postcss-loader-生成兼容各浏览器的-css" class="headerlink" title="解析 css、less,使用 MiniCssExtractPlugin 将 js 中的 css 分离出来，形成单独的 css 文件，并使用 postcss-loader 生成兼容各浏览器的 css"></a>解析 css、less,使用 MiniCssExtractPlugin 将 js 中的 css 分离出来，形成单独的 css 文件，并使用 postcss-loader 生成兼容各浏览器的 css</h2><ol><li>安装 loader</li></ol><p><code>yarn add css-loader style-loader less less-loader mini-css-extract-plugin postcss-loader autoprefixer -D</code></p><ol start="2"><li>配置 postcss.config.js</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置 webpack</li></ol><p>这里写了两个差不多的 css-loader 的配置，因为在项目中会同时遇到使用全局样式和局部(对应页面的)css 样式。所以，配置了两个，使用 exclude 和 css-loader 中的 options.modules: true 来区分， 当创建的 css 文件名中带有 module 的就表示为局部 css，反之为全局样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入plugin</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.module\.css$</span><span class="token regex-delimiter">/</span></span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.module\.css$</span><span class="token regex-delimiter">/</span></span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用文件指纹策略（hash、chunkhash、contenthash）"><a href="#使用文件指纹策略（hash、chunkhash、contenthash）" class="headerlink" title="使用文件指纹策略（hash、chunkhash、contenthash）"></a>使用文件指纹策略（hash、chunkhash、contenthash）</h2><p>为什么会有这些配置呢？因为浏览器会有缓存，该技术是加快网站的访问速度。但是当我们用 webpack 生成 js 和 css 文件时，内容虽然变化了，但是文件名没有变化。所以浏览器默认的是资源并没有更新。所以需要配合 hash 生成不同的文件名。下面就介绍一下这三种有什么不同</p><h3 id="fullhash"><a href="#fullhash" class="headerlink" title="fullhash"></a>fullhash</h3><p>该计算是跟整个项目的构建相关，就是当你在用这个作为配置时，所有的 js 和 css 文件的 hash 都和项目的构建 hash 一样</p><h3 id="chunkhash"><a href="#chunkhash" class="headerlink" title="chunkhash"></a>chunkhash</h3><p>hash 是根据整个项目的，它导致所有文件的 hash 都一样，这样就会发生一个文件内容改变，使整个项目的 hash 也会变，那所有的文件的 hash 都会变。这就导致了浏览器或 CDN 无法进行缓存了。</p><p>而 chunkhash 就是解决这个问题的，它根据不同的入口文件，进行依赖分析、构建对应的 chunk，生成不同的哈希</p><p>比如 a.87b39097.js -&gt; 1a3b44b6.js 都是使用 chunkhash 生成的文件<br>那么当 b.js 里面内容发生变化时，只有 b 的 hash 会发生变化，a 文件还是 a.87b39097.js<br>b 文件可能就变成了 2b3c66e6.js</p><h3 id="contenthash"><a href="#contenthash" class="headerlink" title="contenthash"></a>contenthash</h3><p>再细化，a.js 和 a.css 同为一个 chunk (87b39097),a.js 内容发生变化，但是 a.css 没有变化，打包后它们的 hash 却全都变化了，那么重新加载 css 资源就是对资源的浪费。</p><p>而 contenthash 则会根据资源内容创建出唯一的 hash，也就是内容不变，hash 就不变</p><p><strong>所以，根据以上我们可以总结出在项目中 hash 是不能用的，chunkhash 和 contenthash 需要配合使用</strong></p><p>webpack 配置如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// chunkhash根据入口文件进行依赖解析</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].[chunkhash:8].js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'fonts/[hash:8].[ext].[query]'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// use: 'file-loader',</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">// webpack5中使用资源模块代替了url-loader、file-loader、raw-loader</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'imgs/[hash:8].[ext].[query]'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 4kb</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// use: [</span>        <span class="token comment">//   &#123;</span>        <span class="token comment">//     loader: 'url-loader',</span>        <span class="token comment">//     options: &#123;</span>        <span class="token comment">//       // 文件内容的hash,md5生成</span>        <span class="token comment">//       name: 'img/[name].[hash:8].[ext]',</span>        <span class="token comment">//       limit: 10240,</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//   &#125;,</span>        <span class="token comment">// ],</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name].[contenthash:8].css</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Cannot use 'contenthash' when hot reloading is enabled.</span>    config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token string">'[name].[fullhash].js'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个前端开发环境(一):Webpack(一) - 基础概念</title>
      <link href="/2022/11/03/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-1-webpack-ji-chu-gai-nian/"/>
      <url>/2022/11/03/qian-duan/gong-cheng-hua/qian-duan-kai-fa-huan-jing-1-webpack-ji-chu-gai-nian/</url>
      
        <content type="html"><![CDATA[<p><strong>前端开发配置系列文章的 github 仓库为： <a href="https://github.com/SaebaRyoo/webpack-config">https://github.com/SaebaRyoo/webpack-config</a> ,如果您在看的过程中发现了什么不足和错误，感谢您能指出！</strong></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Webpack 是一个静态模块打包器，它将所有的资源都看作模块。通过一个或多个入口，构建一个依赖图谱(dependency graph)。然后将所有模块组合成一个或多个 bundle</p><div align="center">   <img src="https://i.postimg.cc/JzjqbKNW/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/JzjqbKNW/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div><p>可以通过一个简单的例子来初步了解 Webpack</p><p><strong>比如： 我们想要使用 es6 的箭头函数来写一个功能，但是有的浏览器不支持（IE6-11 或其他老版本浏览器）。那么这个用户在加载这个 js 资源的时候就会报错。</strong></p><p>但这显然不是我们想要的结果，这时候就需要用到 webpack 或像 gulp 这样的构建工具来帮助我们将 es6 的语法转化成低版本浏览器可兼容的代码。</p><p>那么用 webpack 来配置一个构建工具时如下：</p><ol><li><p>创建一个目录，并<code>yarn init</code>初始化一个包管理器</p></li><li><p>安装 webpack <code>yarn install webpack webpack-cli -D</code></p></li><li><p>想要将 es6 转化为 es5 语法，需要用到 babel 插件对代码进行编译,所以需要安装 babel 和相应的 loader <code>yarn add @babel/core @babel/preset-env babel-loader -D</code></p></li><li><p>配置.babelrc</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>创建 src&#x2F;index.js 入口</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>创建输出文件 dist&#x2F;html</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>然后就是配置 webpack.config.js</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>最后通过构建命令<code>./node_modules/.bin/webpack --config webpack.config.js --mode development</code> 运行配置，会生成一个 dist&#x2F;bundle.js 文件，这就是转换后的 js 文件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development"). * This devtool is neither made for production nor for readable output files. * It uses "eval()" calls to create a separate source file in the browser devtools. * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/) * or disable the default devtool with "devtool: false". * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/). */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// webpackBootstrap</span>  <span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/***/</span> <span class="token string">"./src/index.js"</span><span class="token operator">:</span>      <span class="token comment">/*!**********************!*\  !*** ./src/index.js ***!  \**********************/</span>      <span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">eval</span><span class="token punctuation">(</span>          <span class="token string">"var sum = function sum(a, b) &#123;\n  return a + b;\n&#125;;\nconsole.log(sum(1, 2));\n\n//# sourceURL=webpack://webpack-config/./src/index.js?"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/***/</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/******/</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/************************************************************************/</span>  <span class="token comment">/******/</span>  <span class="token comment">/******/</span> <span class="token comment">// startup</span>  <span class="token comment">/******/</span> <span class="token comment">// Load entry module and return exports</span>  <span class="token comment">/******/</span> <span class="token comment">// This entry module can't be inlined because the eval devtool is used.</span>  <span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_exports__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/******/</span> __webpack_modules__<span class="token punctuation">[</span><span class="token string">"./src/index.js"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/******/</span>  <span class="token comment">/******/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面这个例子就使用了 webpack 的几个核心概念</strong></p><ol><li>入口 entry</li></ol><p>在 webpack 的配置文件中通过配置 entry 告诉 webpack 所有模块的入口在哪里</p><ol start="2"><li>输出 output</li></ol><p>output 配置编译后的文件存放在哪里，以及如何命名</p><ol start="3"><li>loader</li></ol><p>loader 其实就是一个 pure function，它帮助 webpack 通过不同的 loader 处理各种类型的资源，我们这里就是通过 babel-loader 处理 js 资源，然后通过 babel 的配置，将输入的 es6 语法转换成 es5 语法再输出</p><ol start="4"><li>插件 plugin</li></ol><p>上面的例子暂时没有用到，不过也很好理解，plugin 就是 loader 的增强版，loader 只能用来转换不同类型的模块，而 plugin 能执行的任务更广。包括打包优化、资源管理、注入环境变量等。简单来说就是 loader 能做的 plugin 可以做，loader 不能做的 plugin 也能做</p><p>以上就是 webpack 的核心概念了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建前端脚手架</title>
      <link href="/2022/11/02/qian-duan/gong-cheng-hua/jiao-shou-jia-da-jian/"/>
      <url>/2022/11/02/qian-duan/gong-cheng-hua/jiao-shou-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="前端脚手架是什么？"><a href="#前端脚手架是什么？" class="headerlink" title="前端脚手架是什么？"></a>前端脚手架是什么？</h2><p>它将常用的开发流程抽象为 template，通过 cli 的交互形式帮助我们对开发过程进行提效。</p><p>比如<code>npm install</code>就是 npm 这个脚手架工具的一个命令，它帮助我们解决了依赖下载和安装问题。<br>你可以想象一下，一个中大型的项目，没有依赖文件，你只能一个个在 npm 网站中手动下载依赖，先不谈会不会出错，就问你累不累？</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>想要知道脚手架的工作原理，我们可以从以下三个问题入手</p><ol><li><p>全局安装<code>create-react-app</code>时发生了什么？<br>在使用<code>npm install -g create-react-app</code>安装时，解析 package.json 中的 bin 字段，然后在全局 npm 包的 bin 目录下添加一个<code>create-react-app</code>指令 软链接到<code>../lib/node_module</code>下的包</p></li><li><p>为什么全局安装<code>create-react-app</code>后，会添加新的命令<code>create-react-app</code>？</p></li></ol><p>我们通过<code>which create-react-app</code>找到指令对应的位置为<code> /Users/xxx/.nvm/versions/node/v14.19.1/bin/create-react-app</code></p><p>cd 到<code>/Users/xxx/.nvm/versions/node/v14.19.1/bin</code> 目录下使用<code>ll</code>命令，我们发现如下输出<br><code>create-react-app -&gt; ../lib/node_modules/create-react-app/index.js</code></p><p>说明<code>create-react-app</code>指令是一个软链接，它指向上个文件夹中的<code>../lib/node_modules/create-react-app</code>。</p><p>进入到<code>../lib/node_modules/create-react-app</code>文件夹后<code>cat package.json</code>发现一个<code>bin</code>字段的值为<code>&quot;create-react-app&quot;: &quot;./index.js&quot;</code>，<br>这指定了命令行中<code>主命令名称</code>的字段，以及运行 cli 命令对应的 js 文件</p><ol start="3"><li>为什么<code>create-react-app</code>指向了一个 js 文件，我们却可以通过<code>create-react-app</code>命令直接去执行它？<br>在<code>../lib/node_modules/create-react-app</code>我们会发现文件顶部有一行<code>#!/usr/bin/env node</code>这就是告诉操作系统到当前环境变量下找 node 来执行该代码</li></ol><p>所以，根据以上疑问，我们可以画出脚手架的工作流程如下:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05070896fb4649acb7834dd942f87fde~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05070896fb4649acb7834dd942f87fde~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="cli.png"></p><h2 id="脚手架搭建"><a href="#脚手架搭建" class="headerlink" title="脚手架搭建"></a>脚手架搭建</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul><li>创建<code>npm</code>项目</li><li>创建脚手架入口文件，最上方添加<code>#!/usr/bin/env node</code></li><li>配置<code>package.json</code>,添加<code>bin</code>属性</li><li>编写脚手架代码</li><li>将脚手架发布到<code>npm</code></li></ul><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ul><li>安装脚手架 <code>npm install -g your-cli</code></li><li>使用脚手架</li></ul><h3 id="开发难点解析"><a href="#开发难点解析" class="headerlink" title="开发难点解析"></a>开发难点解析</h3><ul><li>分包: 将 复杂的系统拆分成若干模块</li><li>命令注册</li><li>参数解析</li><li>命令行交互</li><li>日志打印</li><li>网络通信</li><li>文件处理<br>等…</li></ul><h3 id="搭建一个最简-cli"><a href="#搭建一个最简-cli" class="headerlink" title="搭建一个最简 cli"></a>搭建一个最简 cli</h3><ol><li><p><code>mkdir demo</code>创建一个目录</p></li><li><p><code>npm init</code></p></li><li><p>添加<code>bin/index.js</code>文件，并修改 package.json 中的<code>bin</code>-&gt; <code>&#123; &quot;react-cli&quot;: &quot;bin/index.js&quot; &#125;</code></p></li><li><p>npm login 然后 npm publish<br>我使用的 scoped package, 所以发布的命令需要加参数<code>npm publish --access=public</code></p></li><li><p><code>npm install -g your-cli</code>安装</p></li></ol><h3 id="脚手架本地-link-标准流程"><a href="#脚手架本地-link-标准流程" class="headerlink" title="脚手架本地 link 标准流程"></a>脚手架本地 link 标准流程</h3><p>链接本地脚手架</p><pre class="line-numbers language-none"><code class="language-none">cd your-cli-dirnpm link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>链接本地库文件（当功能比较多，做分包时用）</p><pre class="line-numbers language-none"><code class="language-none">cd your-lib-dirnpm linkcd your-cli-dirnpm link your-lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取消链接本地库文件</p><pre class="line-numbers language-none"><code class="language-none">cd your-lib-dirnpm unlinkcd your-cli-dirnpm unlink your-lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于查看React源码使用flow，却提示ts类型检查的错误</title>
      <link href="/2022/11/01/kai-fa-wen-ti-ji-lu/vscode-zhong-flow-bao-cuo/"/>
      <url>/2022/11/01/kai-fa-wen-ti-ji-lu/vscode-zhong-flow-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在看 React 源码时，因为 React 使用的是 flow,但是一直会报 TS 的类型错误</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先是查询到了先要安装 flow 的扩展<code>Flow Language Support</code>，然后又下载了 flow<code>brew install flow</code>，又在设置中修改了 flow 的 path<code>/usr/local/bin/flow</code>。但是还报错</p><p>最后再 Stack Overflow 找到了另一种方式</p><p>在 VSCode 的工作区设置如下，关闭了当前项目的 ts 类型报错和 js 的验证</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"typescript.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"javascript.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见web安全问题</title>
      <link href="/2022/09/29/wang-luo/web-an-quan/"/>
      <url>/2022/09/29/wang-luo/web-an-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-攻击者如何发起一次-csrf（Cross-site-request-forgery-跨站请求伪造）"><a href="#1-攻击者如何发起一次-csrf（Cross-site-request-forgery-跨站请求伪造）" class="headerlink" title="1. 攻击者如何发起一次 csrf（Cross-site request forgery 跨站请求伪造）"></a>1. 攻击者如何发起一次 csrf（Cross-site request forgery 跨站请求伪造）</h3><p><img src="https://user-images.githubusercontent.com/18700225/71152029-4525ad00-2270-11ea-9cb0-482373223b9e.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/71152029-4525ad00-2270-11ea-9cb0-482373223b9e.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="如何发起一次csrf"></p><h3 id="2-如何实现-xss-Cross-Site-Scripting-跨站脚本攻击-持久性攻击"><a href="#2-如何实现-xss-Cross-Site-Scripting-跨站脚本攻击-持久性攻击" class="headerlink" title="2. 如何实现 xss(Cross Site Scripting 跨站脚本攻击)持久性攻击"></a>2. 如何实现 xss(Cross Site Scripting 跨站脚本攻击)持久性攻击</h3><p><img src="https://user-images.githubusercontent.com/18700225/69510835-51706000-0f79-11ea-8933-f93e8a68e341.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/69510835-51706000-0f79-11ea-8933-f93e8a68e341.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="如何实现xss_持久性攻击"></p><h3 id="3-如何组织起一次-xss（非持久性攻击）"><a href="#3-如何组织起一次-xss（非持久性攻击）" class="headerlink" title="3. 如何组织起一次 xss（非持久性攻击）"></a>3. 如何组织起一次 xss（非持久性攻击）</h3><p><img src="https://user-images.githubusercontent.com/18700225/69510850-63520300-0f79-11ea-9832-638e99bf3394.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/69510850-63520300-0f79-11ea-9832-638e99bf3394.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="如何组织起一次xss_非持久性攻击"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setState是同步还是异步的</title>
      <link href="/2022/09/18/qian-duan/react/setstate-shi-tong-bu-huan-shi-yi-bu/"/>
      <url>/2022/09/18/qian-duan/react/setstate-shi-tong-bu-huan-shi-yi-bu/</url>
      
        <content type="html"><![CDATA[<ol><li>setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。</li><li>setState 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的 callback 拿到更新后的结果。</li><li>setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和 setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。</li></ol><h3 id="为什么-setState-是异步的？"><a href="#为什么-setState-是异步的？" class="headerlink" title="为什么 setState 是异步的？"></a><a href="https://github.com/facebook/react/issues/11527">为什么 setState 是异步的？</a></h3><p>为了批量更新而延迟 reconciliation, <code>setState()</code>同步渲染在多数情况下效率低下，如果我们知道可能会得到多个更新，最好进行批处理更新<br>例如，如果我们在浏览器单击处理程序中，并且<code>Child</code>和<code>Parent</code>都调用<code>setState</code>，则我们不想将其重新渲染两次，而是希望将它们标记为 <code>dirty</code>，然后再将它们一起渲染 退出浏览器事件。</p><p>你会问： 为什么我们不能做同样的事情(批处理)，而是立即将<code>setState</code>更新写入<code>this.state</code>而无需等待<code>recelication</code>结束. 我认为没有一个明显的答案（两种解决方案都需要权衡），但是我可以想到一些原因。</p><ol><li>保持内部一致性</li></ol><p>即使 state 被同步更新，props 也不会被更新。 （除非您重新渲染父组件，否则您将不知道 props，而如果您同步进行渲染，则批处理将无法进行。）</p><p>比如以下这种场景:</p><p>当您只使用<code>state</code>时，如果它以同步方式刷新，则以下模式将工作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，假设这个 state 需要被提升，以便在几个组件之间共享，所以您将它移动到父组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does the same thing in a parent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我想强调的是，在依赖于 setState()的典型 React 应用程序中，这是您每天都会进行的最常见的特定于 react 的重构。</p><p>但是，这破坏了我们的代码！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为在您建议的模型中，会立即刷新 this.state，但不会刷新 this.props。 而且，我们无法在不重新渲染父级的情况下立即刷新 this.props，这意味着我们将不得不放弃批处理（根据情况，批处理会大大降低性能）。</p><p>那么 React 今天如何解决这个问题呢？ 在 React 中，this.state 和 this.props 都仅在 reconciliation 和 flushing,之后更新，因此您将看到 0 在重构前后都被打印。 这使提升状态安全。</p><p>综上所述，React 模型并不总是导致最简洁的代码，但是它在内部是一致的，并且可以确保提升状态是安全的</p><ol start="2"><li>启用 Concurrent Updates(并发更新)</li></ol><p>从概念上讲，React 的行为就像每个组件只有一个更新队列一样。 这就是为什么讨论完全有意义的原因：我们讨论是否立即对 this.state 进行更新，因为我们毫无疑问更新将按照确切的顺序应用。 但是，事实并非如此 。</p><p>我们一直在解释“异步渲染”的一种方式是，React 可以根据来自何处的 setState（）调用分配不同的优先级：事件处理程序，网络响应，动画等。</p><p>例如，如果要键入消息，则需要立即刷新 TextBox 组件中的 setState（）调用。 但是，如果您在键入时收到新消息，则最好将新 MessageBubble 的呈现延迟到某个阈值（例如，一秒钟），而不是由于阻塞线程而使键入变得混乱。</p><p>如果我们让某些更新具有较低的优先级，我们可以将它们的渲染分成几毫秒的小块，这样它们就不会被用户注意到。</p><p>我知道这样的性能优化可能听起来并不令人兴奋或令人信服。 您可能会说：“ MobX 不需要此功能，我们的更新跟踪速度足够快，可以避免重新渲染。” 我认为并非在所有情况下都是如此（例如，无论 MobX 有多快，您仍然必须创建 DOM 节点并为新安装的视图进行渲染）。 不过，如果确实如此，并且您有意识地决定始终将对象包装到跟踪读写操作的特定 JavaScript 库中，那么您可能不会从这些优化中受益匪浅。</p><p><strong>但是异步渲染不仅仅涉及性能优化。 我们认为这是 React 组件模型可以做什么的根本转变。</strong></p><p>例如，考虑从一个屏幕导航到另一个屏幕的情况。 通常，您会在新屏幕呈现时显示 spinner 。</p><p>但是，如果导航足够快（在一秒钟左右），则闪烁并立即隐藏 spinner 会降低用户体验。 更糟糕的是，如果您拥有具有不同异步依赖关系（数据，代码，图像）的多个级别的组件，则最终会看到一堆 spinners ，它们会一一短暂地闪烁。 由于所有 DOM 的重排，这在视觉上都是不愉快的，并且使您的应用在实践中变慢。 它也是许多样板代码的来源。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端需要了解的Nginx知识</title>
      <link href="/2022/09/10/wang-luo/nginx-ji-chu/"/>
      <url>/2022/09/10/wang-luo/nginx-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>查看版本: <code>nginx -v</code></li><li>启动: <code>nginx</code></li><li>关闭: <code>nginx -s stop</code>(推荐) || <code>nginx -s quit</code></li><li>重启: <code>nginx -s reload</code></li></ul><h2 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h2><ul><li>全局块: 从配置文件开始到 events 块之间，主要是设置一些 <strong>影响 nginx 服务器整体运行的配置指令</strong>。（按道理说：并发处理服务的配置时，值越大，可支持的并发处理量越多，但此时会受到硬件、软件等设备等的制约）</li><li>events 块： 影响<strong>nginx 服务器与用户的网络连接</strong>，常用的设置包括是否开启对多 workprocess 下的网络连接进行序列化，是否允许同时接收多个网络连接等等</li><li>http 块： 如反向代理和负载均衡都在此配置</li></ul><h2 id="location-的匹配规则"><a href="#location-的匹配规则" class="headerlink" title="location 的匹配规则"></a>location 的匹配规则</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">location<span class="token punctuation">[</span> <span class="token operator">=</span> | ~ | ~<span class="token operator">*</span> | ^~ <span class="token punctuation">]</span> url <span class="token punctuation">&#123;</span>  <span class="token operator">.</span><span class="token operator">.</span><span class="token operator">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>&#x3D;</strong> : <strong>精确匹配</strong>, 用于<strong>不含正则表达式</strong>的 url 前，要求字符串与 url<strong>严格匹配</strong>，完全相等时，才能停止向下搜索并处理请求</li><li><strong>^~</strong> : 用于<strong>不含正则表达式</strong>的 url 前，要求 nginx 服务器找到表示<strong>url 和字符串匹配度最高</strong>的 location 后，立即使用此 location 处理请求。</li><li><strong>~</strong> ： <strong>最佳匹配</strong>， 用于表示 url<strong>包含正则表达式</strong>，并且区分大小写</li><li><strong>~*</strong> : 与 <strong>~</strong> 一样，只是不区分大小写</li></ul><p><strong>注意</strong>：</p><ul><li>如果<code>url</code>包含正则表达式，则不需要 <strong>~</strong> 作为开头表示</li><li>nginx 的匹配具有<strong>优先顺序</strong>，一旦匹配上就会立马退出，不在进行向下匹配</li></ul><p>具体配置可看<a href="https://juejin.cn/post/7052952117425733663">写给前端的 nginx 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux源码学习</title>
      <link href="/2022/09/10/qian-duan/react/redux-yuan-ma-xue-xi/"/>
      <url>/2022/09/10/qian-duan/react/redux-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先，我们需要知道 redux 的相关概念</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>首先，我们需要知道 redux 有以下概念</p><ol><li><p>Action：一个 JavaScript 对象，描述动作相关信息，必须要包含的是一个 type 属性，用于描述当前 Action，其他属性为值。</p></li><li><p>Reducer：定义应用状态如何响应不同动作（action），如何更新状态；</p></li><li><p>Store：管理 action 和 reducer 及其关系的对象，主要提供以下功能：</p><ul><li>维护应用状态并支持访问状态（getState()）；</li><li>支持监听 action 的分发，更新状态（dispatch(action)）；</li><li>支持订阅 store 的变更（subscribe(listener)）；</li></ul></li></ol><p>下面是我画的一个流程图</p><div align="center">   <img src="https://i.postimg.cc/HnwQLjsd/redux.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/HnwQLjsd/redux.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div><blockquote><p>我使用的是<code>npm run build</code>后的代码讲解的</p></blockquote><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>先从<code>createStore</code>的源码说起，我们看如下的源码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 只传两个参数的，且第二个参数为函数时，作为enhancer</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> preloadedState <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> enhancer <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  enhancer <span class="token operator">=</span> preloadedState<span class="token punctuation">;</span>  preloadedState <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Expected the enhancer to be a function."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 则enhancer就是 applyMiddleware 的返回值，enhancer也是一个高阶函数</span>  <span class="token keyword">return</span> <span class="token function">enhancer</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的代码是为 applyMiddleware(自定义中间件) 服务的，如果增加了自定义中间件会进入 enhancer 分支，对 dispatch 进行增强。enhancer 会在后面说到</p><p>然后，我们看一下在 createStore 中的局部变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// currentReducer必须是一个函数，用来定义响应不同action</span><span class="token keyword">var</span> currentReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span><span class="token comment">// 更新后的state</span><span class="token keyword">var</span> currentState <span class="token operator">=</span> preloadedState<span class="token punctuation">;</span><span class="token keyword">var</span> currentListeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// nextListeners 则是存放 监听器 的变量</span><span class="token keyword">var</span> nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">;</span><span class="token keyword">var</span> isDispatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，主要的是<code>currentReducer</code>、<code>currentState</code>和<code>nextListeners</code>。<br>它们的作用分别是:</p><p>currentReducer: 保存传入到 createStore 的 reducer<br>currentState: 更新后的值，getState 方法获取的就是这个局部变量<br>nextListeners: 当使用 subscribe 来注册一个监听器的时候，都会被 push 到这里，并且 dispatch 时，会调用执行所有的监听器</p><h2 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h2><p>这个方法比较简单，它只获取 createStore 中的局部变量 currentState, 也就是我们的全局 store</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>      <span class="token string">"You may not call store.getState() while the reducer is executing. "</span> <span class="token operator">+</span>        <span class="token string">"The reducer has already received the state as an argument. "</span> <span class="token operator">+</span>        <span class="token string">"Pass it down from the top reducer instead of reading it from the store."</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> currentState<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h2><p>redux 采用的是发布-订阅模式来监听 store 的变化，subscribe 则是一个订阅函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> isSubscribed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nextListeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> nextListeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    nextListeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentListeners <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他会将注册的监听器存放到 <code>nextListeners</code>中，可以通过 unsubscribe 来注销监听器。<br>而在 nextListeners 中的监听器，都会在 dispatch 时被调用，在这之后使用 getState 获取到的都是更新后的 store。在<code>react-redux</code>中就是通过在 Provider 中使用 subscribe 注册监听器，然后在监听器中获取到更新后的 store 进行派发。</p><h2 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h2><p>以下是 dispatch 中组要的逻辑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  isDispatching <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 接收到 combination 计算的值后，更新 currentState</span>  currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  isDispatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取 nextListeners 中的 监听器</span><span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历并执行通过subscribe订阅的监听器</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dispatch 则是根据 action 来执行 reducer 中不同的更新逻辑，然后返回最新的 store，并且执行监听器(发布)。这样，就可以获取到最新的 store 来做相应的更新操作。</p><p>当然，一般的业务中，通常会有多个 reducer，这个时候就需要通过 combineReducer 来合并多个 reducer。它的主要逻辑如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 接收 old state 和 描述action的对象</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//   .......</span>  <span class="token keyword">var</span> hasChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> nextState <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _i <span class="token operator">&lt;</span> finalReducerKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> _i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// _key 是 每个reducer对应的key，</span>    <span class="token comment">// 如： combineReducers(&#123; toDo: todoReducer &#125;)</span>    <span class="token comment">// _key 就是 toDo</span>    <span class="token comment">// reducer 就是 todoReducer</span>    <span class="token keyword">var</span> _key <span class="token operator">=</span> finalReducerKeys<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> reducer <span class="token operator">=</span> finalReducers<span class="token punctuation">[</span>_key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> previousStateForKey <span class="token operator">=</span> state<span class="token punctuation">[</span>_key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 开始执行项目中定义的reducer，并且传入old state中对应的reducer的值</span>    <span class="token comment">// nextStateForKey 就是新的值</span>    <span class="token keyword">var</span> nextStateForKey <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>previousStateForKey<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新全局store上的当前action对应的state</span>    nextState<span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> nextStateForKey<span class="token punctuation">;</span>    hasChanged <span class="token operator">=</span> hasChanged <span class="token operator">||</span> nextStateForKey <span class="token operator">!==</span> previousStateForKey<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断是否有变化</span>  hasChanged <span class="token operator">=</span>    hasChanged <span class="token operator">||</span> finalReducerKeys<span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 如果有变化，则采用 nextState，如果没有则返回old state</span>  <span class="token keyword">return</span> hasChanged <span class="token operator">?</span> nextState <span class="token operator">:</span> state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是在使用 <code>combinerReducer</code>时返回的新的 reducer。在每一次更新时，都会进行一次遍历，来对比相应 reducer 中的 state 是否发生变化。更新则采用 nextState,否则返回 old state。</p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>中间件的作用就是增强 dispatch 的功能，常见的有 <code>redux-logger</code>、<code>redux-thunk</code>等等。</p><p>redux-logger: 支持在 dispatch 时输出更改前后更改后的数据</p><p>redux-thunk: 则是支持 dispatch 一个函数，这可以完成一个控制反转，来使 dispatch 支持异步调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// applyMiddleware 是一个高阶函数</span><span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用如下中间件</span>  <span class="token comment">// applyMiddleware(logger, thunk)</span>  <span class="token comment">// 则 middlewares = [logger, thunk]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>    <span class="token keyword">var</span> _len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> middlewares <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>_len<span class="token punctuation">)</span><span class="token punctuation">,</span> _key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    _key <span class="token operator">&lt;</span> _len<span class="token punctuation">;</span>    _key<span class="token operator">++</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    middlewares<span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回一个enhancer，也就是createStore的第三个参数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> preloadedState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过高阶函数，store的权限交出</span>      <span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token function-variable function">_dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token string">"Dispatching while constructing your middleware is not allowed. "</span> <span class="token operator">+</span>            <span class="token string">"Other middleware would not be applied to this dispatch."</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> middlewareAPI <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">getState</span><span class="token operator">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>        <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>            <span class="token keyword">var</span> _len2 <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>              args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>_len2 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> _len2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              _key2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            _key2 <span class="token operator">&lt;</span> _len2<span class="token punctuation">;</span>            _key2<span class="token operator">++</span>          <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            args<span class="token punctuation">[</span>_key2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_key2<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token function">_dispatch</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">middleware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历并调用中间件，传入由 middleware 控制的getState和dispatch</span>        <span class="token comment">// 每一个middleware应该也是一个高阶函数</span>        <span class="token keyword">return</span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// chain就是每个中间件return的第二层函数</span>      <span class="token comment">// compose会从右到左，执行所有中间件。直到执行到最开始的一个中间件中</span>      <span class="token comment">// 然后返回一个新的dispatch, 这个dispatch 就是中间件代码中最深层的匿名函数了 return (action) => &#123;&#125;</span>      _dispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回一个增强 dispatch 后的 store</span>      <span class="token comment">// 然后再调用 dispatch 时，会按照中间件的顺序执行，然后中间件中通过next，进入下一个中间件中（进入调用栈),然后出栈，这个时候，获取到的state为新的值</span>      <span class="token keyword">return</span> <span class="token function">_objectSpread2</span><span class="token punctuation">(</span>        <span class="token function">_objectSpread2</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> _dispatch <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applyMiddleware 机制的核心在于组合 compose，将不同的 middleware 一层一层包裹到原生的 dispatch 之上，而为了方便进行 compose，需对 middleware 的设计采用柯里化 curry 的方式，达到动态产生 next 方法以及保持 store 的一致性。由于在 middleware 中，可以像在外部一样轻松访问到 store, 因此可以利用当前 store 的 state 来进行条件判断，用 dispatch 方法拦截老的 action 或发送新的 action。</p><p>总结：</p><ol><li>redux 采用的是发布订阅模式</li><li>dispatch 会触发 linsters</li><li>middleware 的设计则采用柯里化，达到动态产生 next 方法以及保持 store 的一致性，避免多个 middleware 产生嵌套。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中创建对象的方法</title>
      <link href="/2022/08/01/qian-duan/javascript/js-zhong-chuang-jian-dui-xiang-de-fang-fa/"/>
      <url>/2022/08/01/qian-duan/javascript/js-zhong-chuang-jian-dui-xiang-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>优点：</strong> 解决创建多个相似对象的问题<br><strong>缺点：</strong></p><ol><li>无法通过 constructor 识别对象，创建的对象的 constructor 都是 Object，而不是 createPerson</li><li>通用的方法会创建多次，占用内存</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p><strong>优点：</strong></p><ol><li>通过 new 关键字创建实例，更像面向对象语言的实例创建</li><li>能够通过 constructor 和 instanceof 识别对象<br><strong>缺点：</strong></li><li>和工厂函数一样。通用的方法会创建多次，占用内存。</li></ol><p><strong>不同：与工厂函数的不同之处在于</strong></p><ul><li>不需要显式的创建对象</li><li>没有 return 语句</li><li>直接将属性和方法赋给 this 对象</li></ul><p><strong>使用 new 经历的步骤</strong></p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（将 this 指向新对象）</li><li>执行构造函数中的代码 （向对象中增加属性）</li><li>返回新对象</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><strong>优点：</strong></p><ol><li>所有对象实例都能共享构造函数的原型对象上的属性和方法</li></ol><p><strong>缺点：</strong></p><ol><li>当属性为引用类型时，如 colors，该数据会共享一块内存。</li><li>无法通过向构造函数传参去初始化参数。所有的方法都是共有的，无法创建实例自己的属性和方法。</li><li>在调用方法或者获取属性时，会搜索两次，第一次是在实例中查找，如果在实例中没有查询到则进入原型链查找。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"william"</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>colors <span class="token operator">===</span> person2<span class="token punctuation">.</span>color2<span class="token punctuation">;</span> <span class="token comment">// true， 值与引用都相等</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ['green', 'yellow', 'blue', 'red']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数和原型组合模式"><a href="#构造函数和原型组合模式" class="headerlink" title="构造函数和原型组合模式"></a>构造函数和原型组合模式</h3><p><strong>优点：</strong></p><ol><li>解决工厂、构造函数中通用方法占用内存</li><li>解决原型中引用类型共享内存的，没有实例自己的属性和方法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> colors</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> colors<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ['green', 'yellow', 'blue', 'red']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ['green', 'yellow', 'blue']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p><strong>优点：</strong> 只有当实例上不存在 getInfo 方法时才在原型上创建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> colors</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> colors<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getInfo <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h3><p>该模式和工厂模式一样，除了使用了 new</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, i'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当想要创建一个具有额外方法的数组，但是有不能直接修改 Array 构造函数时，可以使用这个模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SpecialArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> argumenst<span class="token punctuation">)</span><span class="token punctuation">;</span>  values<span class="token punctuation">.</span><span class="token function-variable function">toPipedString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> values<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecialArray</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>colors<span class="token punctuation">.</span><span class="token function">toPipedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "red|bule|green"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a>稳妥构造函数</h3><p><strong>优点：</strong> 定义私有变量，只能通过指定方法获取属性<br><strong>缺点：</strong> 无法区分实例类别</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// undefined</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//william</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用的几种继承</title>
      <link href="/2022/08/01/qian-duan/javascript/javascript-ji-cheng/"/>
      <url>/2022/08/01/qian-duan/javascript/javascript-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subProperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subProperty<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 重写子类原型方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subProperty<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>instance<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// SuperType</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题：</strong></p><ol><li>当父类中包含引用类型时，且子类继承父类，并创建实例，那么所有的实例将会共享该属性</li><li>在子类创建类型的实例时，无法向父类型传递参数（无法在不影响所有对象实例的情况下给父类构造函数传递参数）</li><li>因为重写原型丢失了默认的 constructor</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment">// ['red', 'green', 'blue', 'yellow']</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment">// ['red', 'green', 'blue', 'yellow']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="借用构造函数-伪造对象-经典继承"><a href="#借用构造函数-伪造对象-经典继承" class="headerlink" title="借用构造函数&#x2F;伪造对象&#x2F;经典继承"></a>借用构造函数&#x2F;伪造对象&#x2F;经典继承</h2><p>通过在子类构造函数中调用父类构造函数,该方法虽然解决了实例共享引用属性，但是所有的方法都在构造函数中定义，而且父类原型上定义的方法对子类都是不可见的，也就谈不上复用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 传递参数</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"petter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment">// ['red', 'green', 'blue', 'yellow']</span>instance1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// william</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment">// ['red', 'green', 'blue']</span>instance2<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// petter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>组合继承分别使用了原型链继承和借用构造函数继承方法的优点组合而成。主要是在子类构造函数中调用父类构造函数实现实例属性的继承，在子类原型链实现对父类原型属性和方法的继承。</p><p>这样既保证了每个实例拥有自己的属性，又能复用父类原型上的方法。而且也能通过如：<br><code>instance1 intanceof SubType</code><br><code>SubType.prototype.isPrototypeOf(instance1)</code><br>识别对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 传递参数</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1)</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"petter"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>_这在 js 的继承实现中时最常见的方法，但是这样会调用两次父类的构造函数. _</strong></p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ECMAScript 5 新增了 Object.create()方法规范了<strong>原型式继承</strong>, 该方法的第二个参数和 Object.definedProperties 方法的第二个参数相同,每个属性通过自己的描述符定义。</p><p>当我们只是想一个对象与另一个对象保持类似，而不需要兴师动众的创建构造函数时，我们可以使用这个方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"William"</span><span class="token punctuation">,</span>  <span class="token literal-property property">job</span><span class="token operator">:</span> <span class="token string">"front-end"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> another <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Petter"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>寄生式继承是与原型式继承紧密相关的一种思路。思路类似于寄生构造函数和工厂模式，即创建一个 <strong>仅用于封装继承过程的函数</strong> ，改函数在内部以某种方式增强对象。然后再返回对象</p><p>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率。这和构造函数模式类似</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新对象</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 增强对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment">// 返回对象</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建对象</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span> <span class="token comment">// 增强对象</span>  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span> <span class="token comment">//  指定原型</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在通过寄生组合继承实现继承</p><ol><li>改善调用两次父类构造函数的情况</li><li>弥补之前因为重写原型而丢失默认的 constructor 属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 传递参数</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"william"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"petter"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// SubType</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise/A+规范实现</title>
      <link href="/2022/08/01/qian-duan/javascript/promisea-gui-fan-shi-xian/"/>
      <url>/2022/08/01/qian-duan/javascript/promisea-gui-fan-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>实现 Promise 的核心主要有以下几个步骤：</p><ol><li>需要有一个任务队列，支持将<code>.then(callback)</code> 中的<code>callback</code>插入到队列中。且 then 方法返回一个新的<code>Promise</code>来支持<code>.then</code>的链式调用</li><li>实现<code>resolve</code>和<code>reject</code></li><li>实现一个<code>异步调度</code>函数(微任务&gt;宏任务)，来调用队列当中的方法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> soon <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>m<span class="token punctuation">,</span> d<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          f<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> setImmediate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">f</span><span class="token operator">:</span> d<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token keyword">this</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span>  self<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">soon</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"resolved"</span><span class="token punctuation">;</span> <span class="token comment">// 这里的状态改变后就不会再变</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>          len <span class="token operator">=</span> self<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          self<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">soon</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>          len <span class="token operator">=</span> self<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          self<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> thenCalledOrthrow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>promise2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> refer to the same object</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          x<span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>thenCalledOrthrow<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            thenCalledOrthrow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token function">rj</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>thenCalledOrthrow<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            thenCalledOrthrow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>thenCalledOrthrow<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      thenCalledOrthrow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  onResolved <span class="token operator">=</span>    <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">"function"</span>      <span class="token operator">?</span> <span class="token function-variable function">onResolved</span>      <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  onRejected <span class="token operator">=</span>    <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">"function"</span>      <span class="token operator">?</span> <span class="token function-variable function">onRejected</span>      <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> promise2<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      self<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">onResolved</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">onRejected</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"resolved"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">soon</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">soon</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">soon</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">soon</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">done</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> promise2<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> v<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> valueArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> resolvedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token keyword">function</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            valueArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            resolvedCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedCount <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>valueArr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token function">rj</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJs和Es Module及它们的区别</title>
      <link href="/2022/05/31/qian-duan/javascript/6.commonjs-he-esmoduley/"/>
      <url>/2022/05/31/qian-duan/javascript/6.commonjs-he-esmoduley/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6938581764432461854">https://juejin.cn/post/6938581764432461854</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios源码学习</title>
      <link href="/2022/05/30/qian-duan/javascript/axios-yuan-ma-xue-xi/"/>
      <url>/2022/05/30/qian-duan/javascript/axios-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="axios-中统一的封装了如下的问题"><a href="#axios-中统一的封装了如下的问题" class="headerlink" title="axios 中统一的封装了如下的问题"></a>axios 中统一的封装了如下的问题</h3><ul><li>支持浏览器请求 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a> 请求</li><li>支持 node 中的 http 模块的请求 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>可以拦截请求和响应</li><li>转换 request 和 response 数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>默认增加解决 XSRF（CSRF）攻击的参数 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><ol><li>axios 中是如何实现在浏览器和 node 中发起 http 请求的？且支持 Promise 调用</li></ol><blockquote><p>在 axios 中，针对浏览器和 node 环境中，分别通过 Promise 配合 XMLHttpRequest 和 http 模块，来实现了两个不同环境下的 adapter，具体代码如下:</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getDefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断当前是在浏览器环境还是node环境</span>  <span class="token keyword">var</span> adapter<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// For browsers use XHR adapter</span>    adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./adapters/xhr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span>    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object process]"</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// For node use HTTP adapter</span>    adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./adapters/http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> adapter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>它是如何拦截请求的？</li></ol><p>当你通过 axios 发起请求时，且注册了<code>request interceptors</code> 或者 <code>response interceptors</code>后，axios 会在初始化阶段创建一个<code>var chain = [dispatchRequest, undefined]</code>数组。然后会将注册的<code>request interceptors</code> 和 <code>response interceptors</code> 分别插入到<code>chain</code>的头部和尾部。<br>最后再通过 promise 顺序执行链式调用。完成请求和响应的拦截功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Hook up interceptors middleware</span><span class="token comment">// 初始化的chain中的dispatchRequest就是执行的http请求</span><span class="token comment">// 添加拦截器中间件</span><span class="token keyword">var</span> chain <span class="token operator">=</span> <span class="token punctuation">[</span>dispatchRequest<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 初始化一个promise实例</span><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将request拦截器添加到chain的头</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">unshiftRequestInterceptors</span><span class="token punctuation">(</span>  <span class="token parameter">interceptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  chain<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// response拦截器添加到chain的尾部</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">pushResponseInterceptors</span><span class="token punctuation">(</span>  <span class="token parameter">interceptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  chain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在向chain的头尾添加拦截器后，按照promise的then，顺序执行</span><span class="token keyword">while</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> promise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>它是如何取消请求的呢？</li></ol><p>首先，我们需要 通过 config.cancelToken &#x3D; new axios.CancelToken(function executor(c) {}) 去实例化一个 cancelToken， 传入 executor 的 c 则就是 cancel 函数，调用它则会取消当前请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CancelToken</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> executor <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"executor must be a function."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> resolvePromise<span class="token punctuation">;</span>  <span class="token comment">// 创建一个promise</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">promiseExecutor</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    resolvePromise <span class="token operator">=</span> resolve<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">// 执行executor，并传入一个函数，当用户想要cancel掉某个请求时，只需要执行这个传入的函数，并且输入相应的提示信息即可</span>  <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Cancellation has already been requested</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    token<span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cancel</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行promise的resolve，传入cancel</span>    <span class="token function">resolvePromise</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个cancel原因</span><span class="token keyword">function</span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果熟悉<code>XMLHttpRequest</code>的方法，那我们应该知道一个<code>abort</code>。对，在 axios 中同样是通过 abort 来实现的取消请求。在<code>xhr.js</code>中有这么一段代码。<br>如果实例化了 config.cancelToken，则会执行，并且 reject 一个原因</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 首先需要在request config中配置cancelToken，</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Handle cancellation</span>  config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onCanceled</span><span class="token punctuation">(</span><span class="token parameter">cancel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过abort终止当前请求</span>    request<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Clean up request</span>    request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际应用中，我们可以通过 cancelToken 来记录请求 url，以避免重复请求。并且可创建一个白名单，以防止一些需要多次请求的接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">const</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/api/1"</span><span class="token punctuation">,</span> <span class="token string">"/api/2"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//这些接口不进行 防重复提交</span><span class="token keyword">const</span> requestMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span><span class="token comment">// 防止重复请求</span><span class="token keyword">const</span> <span class="token function-variable function">removeRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mapkey</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cancel <span class="token operator">=</span> requestMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">"请勿重复操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  requestMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 过滤请求</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 其他的配置 **/</span>    <span class="token comment">// 使用的是请求方法和请求url组成的key</span>    <span class="token keyword">const</span> mapkey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 上删除上一次未完成的请求</span>      <span class="token function">removeRequest</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// An executor function receives a cancel function as a parameter</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>url <span class="token operator">&amp;&amp;</span> whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          requestMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> mapkey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">// 在一个ajax响应后再执行一下取消操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">removeRequest</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在一个ajax响应后再执行一下取消操作</span>    <span class="token keyword">const</span> mapkey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">removeRequest</span><span class="token punctuation">(</span>mapkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 一些你自己的配置 */</span>    <span class="token function">removePending</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">,</span> <span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除  下次请求同样的url就不会执行</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 一些你自己的配置 */</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>axios 中如何解决的 XSRF（CSRF）安全问题？<br>在<code>defaults.js</code>中，有一些默认的 config 配置, 这需要后端来协同。具体文章可<a href="http://www.qiutianaimeili.com/html/page/2019/03/lhx9z5xt45.html">查看</a></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">xsrfCookieName</span><span class="token operator">:</span> <span class="token string">'XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment">// 默认值， 表示如果需要防止XSRF攻击，则需要后端生成一个key为XSRF-TOKEN的session（当然，也可以和后端协商，然后自己写config来覆盖）</span>  <span class="token literal-property property">xsrfHeaderName</span><span class="token operator">:</span> <span class="token string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment">// 然后在axios中自动的读取cookie中的值并在header中写入一个自定义的头X-XSRF-TOKEN</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取的操作在<code>xhr.js</code>中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cookies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./../helpers/cookies"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Add xsrf header</span>  <span class="token comment">// (当配置了允许访问cookie设置 || 访问该请求在同一个源 ) &amp;&amp; config.xsrfCookieName</span>  <span class="token keyword">var</span> xsrfValue <span class="token operator">=</span>    <span class="token punctuation">(</span>config<span class="token punctuation">.</span>withCredentials <span class="token operator">||</span> <span class="token function">isURLSameOrigin</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    config<span class="token punctuation">.</span>xsrfCookieName      <span class="token operator">?</span> cookies<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>xsrfCookieName<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xsrfValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    requestHeaders<span class="token punctuation">[</span>config<span class="token punctuation">.</span>xsrfHeaderName<span class="token punctuation">]</span> <span class="token operator">=</span> xsrfValue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy构造函数</title>
      <link href="/2022/05/30/qian-duan/javascript/shuang-xiang-bang-ding/"/>
      <url>/2022/05/30/qian-duan/javascript/shuang-xiang-bang-ding/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-Proxy-结合观察者模式，模拟一个实现一个简单的双向绑定"><a href="#使用-Proxy-结合观察者模式，模拟一个实现一个简单的双向绑定" class="headerlink" title="使用 Proxy 结合观察者模式，模拟一个实现一个简单的双向绑定"></a>使用 Proxy 结合观察者模式，模拟一个实现一个简单的双向绑定</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// console.log(returnCitySN.cip)</span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 监听器</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 添加单次监听器 listener 到名为 eventName 的事件。 当 eventName 事件下次触发时，监听器会先被移除，然后再调用。</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    listener<span class="token punctuation">.</span>_once <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 触发</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">listener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token operator">!</span>listener<span class="token punctuation">.</span>_once<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> listener <span class="token operator">!==</span> fn<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// listeners</span>  <span class="token function">listeners</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  newData<span class="token punctuation">.</span>value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命周期</title>
      <link href="/2022/05/10/qian-duan/react/react-zu-jian-sheng-ming-zhou-qi/"/>
      <url>/2022/05/10/qian-duan/react/react-zu-jian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="老版本的生命周期"><a href="#老版本的生命周期" class="headerlink" title="老版本的生命周期"></a>老版本的生命周期</h2><p><img src="https://user-images.githubusercontent.com/18700225/69609358-47775b80-1064-11ea-8fb3-b2c483df6deb.png" class="lazyload placeholder" data-srcset="https://user-images.githubusercontent.com/18700225/69609358-47775b80-1064-11ea-8fb3-b2c483df6deb.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 4.迭代器模式</title>
      <link href="/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/4.die-dai-qi-mo-shi/"/>
      <url>/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/4.die-dai-qi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>迭代器模式无非就是循环访问聚合对象中的各个元素</p></blockquote><p>迭代器又分<strong>内部迭代器</strong>和<strong>外部迭代器</strong><br>在 js 中，就已经有对应的实现。</p><p><strong>内部迭代器</strong>如，</p><p><code>Array.prototype.forEach(callback(currentValue [, index [, array]])[, thisArg])</code></p><p>它在函数内部就已经定义好了迭代规则，所有的迭代过程在内部完成，跟迭代器的交互也仅是一次初始调用。如，<code>forEach</code>函数接受一个 callback，这个 callback 能够获取到数组每一项，并执行 callback 中的逻辑。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是不能同时迭代两个数组。</p><p>比如，现在有个需求，需要对比两个数组里元素值是否完全相同，则需要通过下面的方式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">compare</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> equal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">!==</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    equal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> equal<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!==</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> equal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      equal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> equal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看<strong>外部迭代器</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Iterator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    current <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">isDone</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current <span class="token operator">>=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">getCurrentItem</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    next<span class="token punctuation">,</span>    isDone<span class="token punctuation">,</span>    getCurrentItem<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">iterator1<span class="token punctuation">,</span> iterator2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> isEqual <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>iterator1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>iterator2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">getCurrentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> iterator2<span class="token punctuation">.</span><span class="token function">getCurrentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      isEqual <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> isEqual<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 5.发布订阅模式</title>
      <link href="/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/5.fa-bu-ding-yue-mo-shi/"/>
      <url>/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/5.fa-bu-ding-yue-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>发布订阅模式又叫观察者模式。它定义对象间的一对多的依赖关系，当一个对象的状态发生变化时，所有订阅它的对象都将收到通知。<strong>js 中我们一般用事件模型来代替传统的观察者</strong></p></blockquote><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>观察者模式在实际中有很多的应用场景，比如：</p><ul><li>房产中介发的看房通知，中介是发布者，而你是订阅者。</li><li>js 中的 DOM 事件</li><li>Node 中的 EventEmitter 类</li></ul><p>下面我们就实现一个自定义的 <code>EventEmitter</code>, 为了方便查看，我们只实现增加监听器和触发监听器的功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 监听器</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 添加单次监听器 listener 到名为 eventName 的事件。 当 eventName 事件下次触发时，监听器会先被移除，然后再调用。</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    listener<span class="token punctuation">.</span>_once <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 触发</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">listener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token operator">!</span>listener<span class="token punctuation">.</span>_once<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> listener <span class="token operator">!==</span> fn<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// listeners</span>  <span class="token function">listeners</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一个监听器。</span>myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">firstListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一个监听器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二个监听器。</span>myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">secondListener</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第二个监听器中的事件有参数 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arg1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">、</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arg2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三个监听器</span>myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">thirdListener</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> parameters <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第三个监听器中的事件有参数 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parameters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第4个监听器</span>myEmitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">fouthListener</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> parameters <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">once4 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parameters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第5个监听器</span>myEmitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">fifthListener</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> parameters <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">once5 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parameters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用时，所有的都会执行</span>myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  第二次执行时，只执行on注册的监听器，once注册的都已经被清理了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myEmitter<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何实现先发布再订阅呢？</strong></p><p>上面的例子中，只能实现先订阅，再发布。但是在实际项目中，如 qq、微信等离线消息。我们需要先将消息保存下来，等到有对象来订阅它们，再重新将消息发布给订阅者。</p><p>为了满足这种需求，我们就需要创建一个存放离线事件的堆栈，当事件发布时，如果还没有订阅者。则先通过函数包裹事件，等待有对象订阅时，我们将遍历队列且依次执行包装函数。且离线事件的生命周期只有一次，就像未读消息只会被重新阅读一次</p><p>下面，我们来改造上面的类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>emitCache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 发布事件缓存堆栈</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 监听器</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listenerWrap</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">listenerWrap</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 添加单次监听器 listener 到名为 eventName 的事件。 当 eventName 事件下次触发时，监听器会先被移除，然后再调用。</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    listener<span class="token punctuation">.</span>_once <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>listener<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 触发</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">listener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">!</span>listener<span class="token punctuation">.</span>_once<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">listenerWrap</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>emitCache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token keyword">function</span> <span class="token function">listenerWrap</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> listener <span class="token operator">!==</span> fn<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// listeners</span>  <span class="token function">listeners</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenersMap<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用时，所有的都会执行</span>myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">firstListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一个监听器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>时间上的解耦，即订阅对象不需要烦恼何时去关注信息，只需要等待发布者在合适的时间发布信息并接受即可</li><li>对象之间的解耦，即订阅对象和发布对象不需要强耦合在一起，当有新的对象需要接受消息时，他只需要订阅即可，发布对象无需关心订阅对象</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>创建一个订阅对象需要时间和内存，但是可能并不会推送消息。那么这个订阅对象可能一直存在于内存中</li><li>发布订阅会弱化对象与对象之间的关系，如果过度使用，对象与对象之间的必要联系都会被深埋在背后，导致程序难以理解和维护。尤其是嵌套使用发布订阅，这个时候追踪 bug 变得困难。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 6.命令模式</title>
      <link href="/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/6.ming-ling-mo-shi/"/>
      <url>/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/6.ming-ling-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>命令模式中的命令（command）指的是一个执行某些特定事情的指令</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，<br>使得发送者和请求接收者能够消除彼此间的耦合关系。</p><p>假设现在项目中有一个 Menu 组件，里面有至少数十个按钮，由于项目复杂度很高，组员们需要分工合作，一部分人完成绘制工作，一部分人完成具体的执行逻辑。<br>那么完成按钮的绘制工作后，如何增加 click 事件去执行具体逻辑呢？</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btn1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绘制的人无需关心具体逻辑，它只需要定义一个 setCommand 方法。<br>setCommand 函数负责往按钮上面安装命令。<br>可以肯定的是，点击按钮会执行某个 command 命令，执行命令的动作被约定为调用 command 对象的 execute()方法。</p><p><strong>下面模拟传统的面向对象语言写一个命令模式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">setCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">button<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，负责编写点击按钮具体行为的人完成了预定的功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MenuBar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"刷新菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> SubMenu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"增加子菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除子菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，将行为封装在命令类中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RefreshMenuBarCommand</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AddSubMenuCommand</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DelSubMenuCommand</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，将命令接收者传入到 command 中，并且将 command 对象安装到 button 上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> refreshMenuBarCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefreshMenuBarCommand</span><span class="token punctuation">(</span>MenuBar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addSubMenuCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddSubMenuCommand</span><span class="token punctuation">(</span>SubMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> delSubMenuCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelSubMenuCommand</span><span class="token punctuation">(</span>SubMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommand</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> refreshMenuBarCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommand</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> addSubMenuCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommand</span><span class="token punctuation">(</span>btn3<span class="token punctuation">,</span> delSubMenuCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>js 中的命令模式</strong></p><p>在 js 中，函数是一等公民。<br>我们完全可以不新增类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">bindClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">button<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> func<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">bindClick</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> MenuBar<span class="token punctuation">.</span>refresh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindClick</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> SubMenu<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindClick</span><span class="token punctuation">(</span>btn3<span class="token punctuation">,</span> SubMenu<span class="token punctuation">.</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用闭包实现命令模式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">setCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">btn<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">RefreshMenuBarCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回对象是方便后续扩展撤销操作</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      receiver<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> refreshMenuBarCommand <span class="token operator">=</span> <span class="token function">RefreshMenuBarCommand</span><span class="token punctuation">(</span>MenuBar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommand</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> refreshMenuBarCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>命令队列</strong><br>队列在动画中非常常见，当有一组动画动作时，则需要按照顺序执行动作。那么我们可以通过发布订阅来实现命令队列</p><p><strong>宏命令</strong><br>宏命令是一组命令的集合，通过执行宏命令，可一次执行一批命令。想象一下，家<br>里有一个万能遥控器，每天回家的时候，只要按一个特别的按钮，它就会帮我们关上房间门，顺<br>便打开电脑并登录 QQ。</p><p>首先创建好 command</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> closeDoorCommand <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"关门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> openPcCommand <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> openQqCommand <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"打开qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义宏任务 MacroCommand</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">MacroCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">commandList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> command<span class="token punctuation">;</span> <span class="token punctuation">(</span>command <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commandsList<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> macroCommand <span class="token operator">=</span> <span class="token function">MacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>macroCommand<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>closeDoorCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>macroCommand<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openPcCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>macroCommand<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openQQCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>macroCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>宏命令是命令模式和组合模式的联合产物</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>JavaScript 可以用高阶函数非常方便地实现命令模式。命令模式在 JavaScript 语言中是一种隐形的模式。<br>即编写好一个函数后，通过回调的方式传给另一个函数，并作为 callback 回调来调用。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 7.组合模式</title>
      <link href="/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/7.zu-he-mo-shi/"/>
      <url>/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/7.zu-he-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>用小的对象来构建更大的对象，而这些小的对象本身也可能是有更小的对象构成。</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>组合模式将对象组合成树形结构，以表示 <strong>部分-整体</strong>的层次结构。此外还可通过对象的多态性表现，使得用户对<strong>单个对象和组合对象的使用具有一致性</strong>。如下：</p></blockquote><ul><li>在命令模式中的宏任务，通过定义一系列的指令，且通过一个 MacroCommand 来执行一系列指令的 execute。 所以组合模式可以很方便的描述对象的 <strong>部分-整体</strong> 的层次结构</li><li>利用对象多态性统一对待组合对象和单个对象。可以使客户端忽略组合对象和单个对象的不同。在组合模式中，客户将统一地使用组合结构中的所有<br>对象，而不需要关心它究竟是组合对象还是单个对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 8.模板方法模式</title>
      <link href="/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/8.mo-ban-fang-fa-mo-shi/"/>
      <url>/2021/06/06/qian-duan/javascript/javascript-she-ji-mo-shi/8.mo-ban-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>模板方式是一种只需要继承就可以实现的简单的模式</p></blockquote><p>模板由两个部分结构组成，第一个是<strong>抽象类</strong>，第二部分是具体的<strong>实现子类</strong>。<br>通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。<br>子类通过继承这个抽象父类，也继承了算法框架，并且可以选择重写父类。</p><h3 id="举个栗子-Coffee-or-Tea"><a href="#举个栗子-Coffee-or-Tea" class="headerlink" title="举个栗子 - Coffee or Tea"></a>举个栗子 - Coffee or Tea</h3><ol><li>泡一杯咖啡</li></ol><p>泡咖啡的步骤通常如下：<br>1）把水煮沸<br>2）用沸水冲咖啡<br>3）把咖啡倒进杯子<br>4）加糖或加奶</p><p>通过下面的代码我们就可以获得一杯咖啡</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    inst<span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inst<span class="token punctuation">.</span><span class="token function">brewCoffeeGriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inst<span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inst<span class="token punctuation">.</span><span class="token function">addSugarAndMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"煮沸水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">brewCoffeeGriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用沸水冲咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"将咖啡倒进杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addSugarAndMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加糖或加奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>泡一杯茶</li></ol><p>泡茶的步骤通常如下：<br>1）把水煮沸<br>2）用沸水浸泡茶叶<br>3）把茶倒进杯子<br>4）加柠檬</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token punctuation">&#123;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">steepTeaBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addLemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"煮沸水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">steepTeaBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用沸水浸泡茶叶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"把茶倒进杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addLemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加柠檬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上，泡咖啡和泡茶的过程是大同小异的。我们可以发现，主要有以下几点不同：</p><p>原料不同。一个是咖啡，一个是茶叶，我们可以抽象成“饮料”<br>泡的方式不同，一个是冲泡，一个是浸泡。我们可以抽象为“泡”<br>加入的调料不同，一个是糖和牛奶，一个是柠檬。我们可以抽象为“调料”</p><p>经过抽象后，不管是泡咖啡还是泡茶，我们都抽象成为以下四个步骤：</p><p>1）把水煮沸<br>2）用沸水冲泡饮料<br>3）把饮料倒进杯子<br>4）在饮料中加入调料</p><p>所以，不管是冲泡还是浸泡，我们都可以给一个通用的方法 brew()。<br>同理，不管是糖还是牛奶还是柠檬，我们都可以称之 addCondiments()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Beverage</span> <span class="token punctuation">&#123;</span>  <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"把水煮沸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"子类必须重写brew方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"子类必须重写pourInCup方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"子类必须重写addCondiments方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们可以创建 Coffee 和 Tea 子类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用沸水冲泡咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吧咖啡倒进杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"给咖啡加糖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coffee<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用沸水浸泡茶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"把茶倒进杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加柠檬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tea<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板方法的应用场景"><a href="#模板方法的应用场景" class="headerlink" title="模板方法的应用场景"></a>模板方法的应用场景</h3><p>模板方法模式常被架构师用于搭建项目的框架，架构师定好了框架的骨架，<br>程序员继承框架的结构之后，负责往里面填空。</p><h3 id="hook-方法"><a href="#hook-方法" class="headerlink" title="hook 方法"></a>hook 方法</h3><p>当某些子类有一些个性化的需求，比如这里，泡茶不想要加柠檬。<br>那么可以这样改写父类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Beverage</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ....</span>  <span class="token function">wantsAddCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wantsAddCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用沸水浸泡茶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"把茶倒进杯子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">wantsAddCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否想加柠檬呢？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加柠檬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tea<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 设计原则</title>
      <link href="/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/0.she-ji-yuan-ze/"/>
      <url>/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/0.she-ji-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h3 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h3><p>就一个类而言，应该仅有一个引起它变化的原因。在 js 中，需要用到类的场景不多。单一职责更多的被运用到对象或者方法级别上。</p><p>单一职责原则（SRP）被定义为“引起变化的原因”。如果我们有两个动机去改写一个方法，那么这个方法就有两个职责。<br>每个职责都是变化的一个轴线，<strong>如果一个方法承担了过多的职责，那么在需求变迁的过程中，需要改写这个方法的可能性就越大</strong></p><p>此时，这个方法通常就是一个不稳定的方法，修改代码总是危险的。<strong>特别是当两个或者更多的职责耦合在一起时，一个职责的变化可能会影响到其他职责的实现，造成意想不到的破坏</strong>，<br>这种耦合性得到的是低内聚和脆弱的设计。</p><p><strong>因此，SRP 原则提现在：一个方法只做一件事</strong></p><h3 id="最少知识原则（LKP）"><a href="#最少知识原则（LKP）" class="headerlink" title="最少知识原则（LKP）"></a>最少知识原则（LKP）</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 1.单例模式</title>
      <link href="/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/1.dan-li-mo-shi/"/>
      <url>/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/1.dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>保证一个类只有一个实例，并提供一个访问它的全局访问点</p></blockquote><h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><ul><li>线程池</li><li>全局缓存</li><li>浏览器中的 window 对象</li></ul><p>最简单的单例就是全局创建一个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用类创建一个单例对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Single</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Single</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Single<span class="token punctuation">.</span>createInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> Single<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token string">"地球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> Single<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token string">"月球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 2.策略模式</title>
      <link href="/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/2.ce-lue-mo-shi/"/>
      <url>/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/2.ce-lue-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>策略模式就是<strong>定义一系列的算法，将他们一个个封装起来。</strong></p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在实际开发中，我们需要将<em>算法</em>的含义扩大一些。</p><p>比如，策略模式可以有效的拆分 <strong>业务逻辑</strong>，减少代码中的<code>if .... else....</code>这种分支</p><p>假设我们有一个按钮。需要根据 api 提供的不同状态渲染不同的内容, 且做不同的逻辑处理。</p><p>根据策略模式的思想，我们可以像下面这样写</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"1"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'借钱'</span><span class="token punctuation">,</span>        <span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// go to withdraw page and do somthing</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"2"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'还钱'</span><span class="token punctuation">,</span>        <span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// go to payback page and do somthing</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"3"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'授信'</span><span class="token punctuation">,</span>        <span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// go to witcredithdraw page and do somthing</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">Demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> setStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">setStatus</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Context</span>        strategies<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">header</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>strategies<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>策略模式利用组合、委托、多态等技术和思想，可以有效的减少代码中的<code>if ... else ... </code>多层判断</li><li>易于理解，容易扩展。如上，如果有新的状态。我们只需要在<code>strategies</code>中增加对应的 <code>算法</code></li><li>解放<code>Context(看代码注释部分)</code>, 只让 <code>Context</code>拥有执行算法的能力。而不是将更多的逻辑堆砌在<code>Context</code>中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式 -- 3.代理模式</title>
      <link href="/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/3.dai-li-mo-shi/"/>
      <url>/2021/06/03/qian-duan/javascript/javascript-she-ji-mo-shi/3.dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。代理模式的关键是<strong>当客户不方便直接访问对象或者不满足需要时。提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象</strong></p></blockquote><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 客户op<span class="token operator">=></span>operation<span class="token operator">:</span> 代理对象e<span class="token operator">=></span>end<span class="token operator">:</span> 本体对象st<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在前后端分离的架构中，收到浏览器端 <strong>同源策略</strong> 的影响，常见的问题就是 CORS(跨域资源共享)，这个可以通过后端设置响应头<code>Access-Control-Allow-Origin</code>为<code>*</code>，来允许浏览器跨域访问资源。<br>当然，前端也可以通过 node 以及其中间件，在本地搭建一个服务，然后将页面中的请求转发到真正的 web server(同源策略只针对浏览器，服务端向服务端发送请求是没有同源限制的)。在后者的方式中。node 承担的就是一个代理的作用。</li><li>当需要中间人来辅助完成工作，或锦上添花时使用。</li></ul><p><strong>小明追女神</strong></p><p>代理需要在一些额外的场景下才能发挥它的作用，不然只会把原来简单的事情搞复杂。比如小明去追女神。如果没有其他影响因素，单纯的通过小红去转送花，那是毫无意义的。</p><p>但是，我们假设，当女神心情好的时候收到花，小明表白的成功率会提升很多，而当女神心情差的时候收到花，成功率近乎于 0。</p><p>那么小明在没有和女神过多的接触下。无法分辨女神的情绪。所以可以通过和女神比较熟悉的小红，小红来监听女神的心情。当女神心情好的时候再送出花。这样成功率会更高。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Flower</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">sendFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> flower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 代理</span><span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 监听女神的心情</span>    goddess<span class="token punctuation">.</span><span class="token function">listenGoodMood</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      goddess<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> goddess <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到花："</span> <span class="token operator">+</span> flower<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">listenGoodMood</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设女神大概10秒后心情变好。</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">sendFlower</span><span class="token punctuation">(</span>xiaohong<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>保护代理</strong></p><p>一束花的开销可能很大，所以我们需要当真正需要它的时候才去创建。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 监听女神的心情</span>    goddess<span class="token punctuation">.</span><span class="token function">listenGoodMood</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 延迟创建flower对象</span>      <span class="token keyword">var</span> flower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      goddess<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缓存代理</strong></p><p>在项目中我们经常遇到一些分页请求，或者一些历史数据、历史图表数据请求等等。理论上，我们可以将已经看过的数据缓存下来。</p><p>下面我们就按照这两个，使用高阶函数动态创建代理。</p><p><em>分页数据</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假设项目中已有一个请求库,且只返回具体数据</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">cacth</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pageNum<span class="token punctuation">,</span> pageSize</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pormise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"some api"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> pageNum<span class="token punctuation">,</span> pageSize <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 设置缓存</span>      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pageNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当用户翻页时调用</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 Proxy 构造函数来创建代理,该代理可以优化一些耗时操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cacheProxy</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数调用trap</span>    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> argsProp <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Reflect提供的静态方法和Object上的对应方法相同</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"using cache data..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cal new data..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">expensiveHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> expensiveProxy <span class="token operator">=</span> <span class="token function">cacheProxy</span><span class="token punctuation">(</span>expensiveHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expensiveProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cal new data...</span><span class="token function">expensiveProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// using cache data...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面获取历史数据的例子我们也可以用 Proxy 来改写一下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createCacheProxy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">async</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> argsProp <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> argsProp<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">pageNum<span class="token punctuation">,</span> pageSize</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"some api"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> pageNum<span class="token punctuation">,</span> pageSize <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> getDataProxy <span class="token operator">=</span> <span class="token function">createCacheProxy</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDataProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2020/12/04/shu-ju-jie-gou-he-suan-fa/1.shu-ju-jie-gou/"/>
      <url>/2020/12/04/shu-ju-jie-gou-he-suan-fa/1.shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><p>数据结构，主要需要掌握，数组，栈，队列，链表，树（二叉树）</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>这是一种最简单，最基础的数据结构，在 js 中是原生支持的</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>在 js 中，栈和队列都没有原生的实现，需要依赖数组实现</p><p>栈是后进先出的一个数据结构，所以只能用到 pop 和 push 完成增删</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是先进先出的数据结构,所以只要用 push 和 shift 完成增删</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>不同于以上的三种线性数据结构(有序的)，链表中，数据单位的名称叫做 <strong>结点</strong> ，而结点和结点的分布，在内存中可以是<strong>离散</strong>的，如图：</p><div align="center">   <img src="https://i.postimg.cc/RZVtFCYB/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/RZVtFCYB/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div><p>每一个结点的结构都包含了两部分内容：<strong>数据域</strong>和<strong>指针域</strong>。js 中的链表，是以嵌套的对象的形式来实现的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token comment">// 数据域</span>    <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment">// 指针域，指向下一个结点</span>    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">val</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用图片表示为</p><div align="center">   <img src="https://i.postimg.cc/D0XgxfTD/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/D0XgxfTD/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width = "600" alt="" align=center /></div><p>然后就是需要使用类来实现链表<strong>结点</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生成链表数据时，需要传入 val(数据域对应的值)、指定 next（下一个链表结点）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上，就创建出了一个数据域值为 1，next 结点数据域值为 2 的链表结点</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>树结构就是由自然界中的树演变而来，我们将自然界中的数抽象，就得到了计算机中的树结构<br><a href="https://postimg.cc/TpH0dLdQ"><img src="https://i.postimg.cc/0y9BCDLg/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/0y9BCDLg/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></a></p><p><strong>结合这张图，我们来讲解树的关键特性和重点概念。要牢记以下几点：</strong></p><ul><li>树的层次计算规则：根结点所在的那一层记为第一层，其子结点所在的就是第二层，以此类推。</li><li>结点和树的“高度”计算规则：叶子结点高度记为 1，每向上一层高度就加 1，逐层向上累加至目标结点时，所得到的的值就是目标结点的高度。树中结点的最大高度，称为“树的高度”。</li><li>“度”的概念：一个结点开叉出去多少个子树，被记为结点的“度”。比如我们上图中，根结点的“度”就是 3。</li><li>“叶子结点”：叶子结点就是度为 0 的结点。在上图中，最后一层的结点的度全部为 0，所以这一层的结点都是叶子结点。</li></ul><h2 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h2><p>二叉树是指满足一下要求的树：</p><ul><li>它可以没有根节点，作为一颗空树存在</li><li>它如果不是空树，那么必须由根节点。左子树和右子树组成，且左右子树都是二叉树。如下图:</li></ul><p><a href="https://postimg.cc/N5kWmN5N"><img src="https://i.postimg.cc/sDksFqyR/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/sDksFqyR/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></a></p><p>注意，<strong>二叉树不能被简单定义为每个结点的度都是 2 的树</strong>。普通的树并不会区分左子树和右子树，但在二叉树中，左右子树的位置是严格约定、不能交换的。对应到图上来看，也就意味着 B 和 C、D 和 E、F 和 G 是不能互换的。</p><h3 id="二叉树编码实现"><a href="#二叉树编码实现" class="headerlink" title="二叉树编码实现"></a>二叉树编码实现</h3><p>在 JS 中，二叉树使用对象来定义。它的结构分为三块：</p><ul><li>数据域</li><li>左侧子结点（左子树根结点）的引用</li><li>右侧子结点（右子树根结点）的引用</li></ul><p>在定义二叉树构造函数时，需要将左侧子结点和右侧子结点都预置为 null</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当需要新建一个二叉树节点时，直接调用构造函数、传入数据域的值就行了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此便能得到一个二叉树，从结构上来看，它长这样</p><p><a href="https://postimg.cc/JHMKC6gy"><img src="https://i.postimg.cc/FzJ6cwVx/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/FzJ6cwVx/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 学习总结</title>
      <link href="/2020/10/04/qian-duan/typescript/ts-zong-jie/"/>
      <url>/2020/10/04/qian-duan/typescript/ts-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.processon.com/v/63c4b673c12afe0cada6856c">具体思维导图在processon中</a></p><p>以下是png</p><p><img src="https://i.postimg.cc/vHyrnSq4/Typescript.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/vHyrnSq4/Typescript.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2020/10/03/qian-duan/javascript/han-shu-shi-bian-cheng/han-shu-shi-bian-cheng/"/>
      <url>/2020/10/03/qian-duan/javascript/han-shu-shi-bian-cheng/han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.processon.com/v/63d60c1284787d177a985053">具体思维导图在 processon 中</a></p><p>以下是 png</p><p><img src="/imgs/js/1.png" class="lazyload placeholder" data-srcset="/imgs/js/1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React SSR（Server Side Render）</title>
      <link href="/2020/09/10/qian-duan/react/reactssr/"/>
      <url>/2020/09/10/qian-duan/react/reactssr/</url>
      
        <content type="html"><![CDATA[<h2 id="客户端渲染-vs-服务端渲染"><a href="#客户端渲染-vs-服务端渲染" class="headerlink" title="客户端渲染 vs 服务端渲染"></a>客户端渲染 vs 服务端渲染</h2><table><thead><tr><th></th><th>客户端渲染</th><th>服务端渲染</th></tr></thead><tbody><tr><td>请求</td><td>多个请求(HTML, 数据等)</td><td>1 个请求(HTML)</td></tr><tr><td>加载过程</td><td>HTML 和数据串行加载</td><td>1 个请求返回 HTML 和数据</td></tr><tr><td>渲染</td><td>前端加载空白 html，然后加载 js 生成 html 结构</td><td>服务端渲染出完整 html 结构返回</td></tr><tr><td>速度</td><td>有白屏时间</td><td>减少白屏时间</td></tr><tr><td>SEO</td><td>不利于 SEO</td><td>对于 SEO 友好</td></tr></tbody></table><p><strong>总结: 通过对比我们发现，SSR 的优势就是能够有效的减少请求，减少白屏时间，从而提升用户体验。还有重要的一点就是 SSR 它能直接在服务端生成丰富的 html 页面，有利于爬虫进行分析，因此对于我们的 SEO 更加友好，这在 ToC 的项目中比较重要</strong></p><h2 id="SSR-代码实现思路"><a href="#SSR-代码实现思路" class="headerlink" title="SSR 代码实现思路"></a>SSR 代码实现思路</h2><p>具体代码看 <a href="https://github.com/SaebaRyoo/Demos/tree/main/react-hooks-ts-ssr">github 仓库</a></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul><li>使用 react-dom&#x2F;server 的 renderToString 方法将 React 组件渲染成字符串</li><li>服务端路由返回对应的模板</li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>打包出针对服务端的组件</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>服务端渲染需要注意的问题有以下几个：</p><ol><li>模块系统不同，前端使用的是 import 和 export node 使用的是 commonjs 中的 module.export 和 require。所以在使用时需要抹平这个差异</li><li>BOM 缺失，如 window 对象<br>可以在 node 端添加这一段代码</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  global<span class="token punctuation">.</span>window <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>DOM 缺失<br>比如代码中用到了 DOM 对象，可以使用<code>isBrowser</code>来做环境判断</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>    <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span>    window<span class="token punctuation">.</span>document <span class="token operator">&amp;&amp;</span>    window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>createElement  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">isBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>visibilityState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>样式问题<br>内联 css 样式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Router中HashRouter和BrowserRouter的区别</title>
      <link href="/2020/09/03/qian-duan/react/reactrouter/"/>
      <url>/2020/09/03/qian-duan/react/reactrouter/</url>
      
        <content type="html"><![CDATA[<h1 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h1><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><ol><li>通过在url中增加<strong>查询字符串</strong>。如 <code>&lt;Link to=&#123;&#123;pathname: '/test', search: '?id=1'&#125;&#125;&gt;</code>或者<code>&lt;Link to=&quot;/test?id=1&quot;&gt;</code>(浏览器刷新后，数据不丢 。获取方式：<code>this.props.location.search</code>)</li><li>通过<strong>params</strong>，表现形式<code>&lt;Link to=&quot;/test/:id&quot;&gt;</code>(浏览器刷新后，数据不丢。获取方式：<code>this.props.params</code>)</li><li>通过<strong>query</strong>(<strong>query</strong>是一个自定义属性，你可以写成test，对应的取也用test即可)属性，<code>&lt;Link to=&#123;&#123;pathname: '/test', query: &#123;id: 1&#125;&#125;&#125;&gt;</code>(浏览器刷新后，数据丢失， 获取方式：<code>this.props.location.query</code>。 )</li></ol><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><ol><li><strong>通过在url中增加查询字符串</strong>。如 <code>&lt;Link to=&#123;&#123;pathname: '/test', search: '?id=1'&#125;&#125;&gt;</code>或者<code>&lt;Link to=&quot;/test?id=1&quot;&gt;</code>(浏览器刷新后，数据不丢。获取方式：<code>this.props.location.search</code>)</li><li>通过<strong>params</strong>，表现形式<code>&lt;Link to=&quot;/test/:id&quot;&gt;</code>(浏览器刷新后，数据不丢。  获取方式：<code>this.props.params</code>)</li><li>通过<strong>state</strong>，如<code>&lt;Link to=&#123;&#123;pathname: '/test', state: &#123;id: 1&#125;&#125;&#125;&gt;</code>(浏览器刷新后，数据不丢 获取方式：this.props.location.state)</li></ol><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h3 id="HashRouter-1"><a href="#HashRouter-1" class="headerlink" title="HashRouter"></a>HashRouter</h3><ol><li><strong>HashRouter</strong>使用URL（即window.location.hash）的哈希部分来保持UI与URL同步的。在地址栏显示样式会增加一个#前缀，如：**<a href="http://www.some.com/#/demo/**%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F">http://www.some.com/#/demo/**这种形式</a></li><li>HashRouter的主要作用是兼容低版本浏览器</li><li>当hash变化时，并不会再一次产生资源请求</li><li>通过<strong>window.onhashchange</strong>监听变化</li></ol><h3 id="BrowserRouter-1"><a href="#BrowserRouter-1" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><ol><li>使用的是基于HTML5规范的<strong>window.history</strong>来管理路由状态，并且react-router中通过 <strong>pushState， popState，replaceState</strong>来同步ui的变化</li><li>IE10+及以上浏览器支持HTML5的history api</li><li>生产中服务器需要配置，并且url变化会向服务器请求资源。比如用nginx作为web服务器时，需要配置以下规则来重定向到<strong>index.html(单页面入口)</strong><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;    try_files $uri $uri&#x2F; &#x2F;index.html;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h3 id="为什么history-state可以在刷新页面后依然保存数据"><a href="#为什么history-state可以在刷新页面后依然保存数据" class="headerlink" title="为什么history.state可以在刷新页面后依然保存数据"></a>为什么history.state可以在刷新页面后依然保存数据</h3><blockquote><p>浏览器会将在history过程中传入的state对象序列化以后保留在本地，所以当重新载入这个页面的时候，可以拿到这个对象。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API#%E8%A7%84%E8%8C%83">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API#%E8%A7%84%E8%8C%83</a></li><li><a href="https://www.impressivewebs.com/html5-history-api-syntax/">https://www.impressivewebs.com/html5-history-api-syntax/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何锁定项目的node版本</title>
      <link href="/2020/09/03/gong-ju/npm/ru-he-suo-ding-xiang-mu-de-node-ban-ben/"/>
      <url>/2020/09/03/gong-ju/npm/ru-he-suo-ding-xiang-mu-de-node-ban-ben/</url>
      
        <content type="html"><![CDATA[<p>在一个项目中,随着时间的推移，一些依赖库可能只能工作于当时安装时所采用的 node 版本。这时再使用新版本 node 时就无法保证项目在一个稳定的环境中运行，甚至是无法运行。为了稳定，通常我们需要在开始时就选定一个兼容性强的 node LTS 版本，并且在项目中锁定版本。</p><h3 id="nvmrc"><a href="#nvmrc" class="headerlink" title=".nvmrc"></a>.nvmrc</h3><p>如果项目中使用了 nvm 来进行版本控制，需要在根目录创建一个<code>[.nvmrc](https://github.com/nvm-sh/nvm#nvmrc)</code>文件来指定 node 版本，内容如下：</p><p>.nvmrc</p><pre class="line-numbers language-none"><code class="language-none">v14.19.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>我们可以通过在<code>package.json</code>中设置<code>engines</code>属性来指定版本范围。<a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json">npm-package 文档</a></p><p>指定 node 版本的范围</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"engines"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">">=14.19.1 &lt;=17.9.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>固定为指定版本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"engines"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"~14.19.1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h3><p>前面我们说了在 package.json 中指定<code>engines</code>属性来限制 node 版本，这个在<code>yarn</code>和<code>pnpm</code>中时有效的。<br>在配置了 engines 后,再使用 nvm 将 node 版本变为 v12.8.3 之后再使用<code>yarn</code>来安装依赖，就会报错<br><a href="https://postimg.cc/3yqYdf3B"><img src="https://i.postimg.cc/RFSFp28j/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/RFSFp28j/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></a></p><p><code>pnpm i</code>也是相似的报错</p><p>但是使用<code>npm i</code>并不会按照<code>engines</code>的属性来报错，这是因为在 npm 中设置了<a href="https://docs.npmjs.com/cli/v7/using-npm/config#engine-strict">engine-strict</a>默认为 false。因此，我们需要创建<code>.npmrc</code>来显式的定义为 true，如下</p><p>.npmrc</p><pre class="line-numbers language-none"><code class="language-none">engine-strict&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样当 node 未满足版本要求时，就无法运行<code>npm install</code>了</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var、let、const原理</title>
      <link href="/2020/08/01/qian-duan/javascript/var-let-const-qu-bie-he-yuan-li/"/>
      <url>/2020/08/01/qian-duan/javascript/var-let-const-qu-bie-he-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="var、let、const-的作用和区别"><a href="#var、let、const-的作用和区别" class="headerlink" title="var、let、const 的作用和区别"></a>var、let、const 的作用和区别</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul><li>会在当前执行环境中进行变量提升</li><li>可重复声明，可以修改</li><li>如果未使用 var 关键字声明，则会提升为全局 &#x2F;&#x2F; 严格模式下会报错</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let 无法重复声明</li><li>let 有暂存死区，无法进行变量提升</li><li>let 声明的变量的作用域是块级的</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const 声明一个常量，无法修改。但是在声明引用类型时，可以修改值。</li><li>其他同 let</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>为什么 var 会有变量提升呢?</li><li>let、const 是否有变量提升？</li><li>为什么 let 和 const 有暂存死区？</li><li>为什么 var 可以重复声明、修改，let 不能重复声明，却可以修改，const 可以修改引用类型的值？</li></ol><p>接下来我们按照问题去解答</p><h3 id="为什么-var-会有变量提升？"><a href="#为什么-var-会有变量提升？" class="headerlink" title="为什么 var 会有变量提升？"></a>为什么 var 会有变量提升？</h3><blockquote><p>结论如下，这里具体可以查看<a href="https://segmentfault.com/q/1010000013591021">为什么 js 需要进行变量提升</a></p></blockquote><ol><li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li><li>声明提升还可以提高 JS 代码的容错性，使一些不规范的代码也可以正常执行</li></ol><h3 id="let、const-是否有变量提升？"><a href="#let、const-是否有变量提升？" class="headerlink" title="let、const 是否有变量提升？"></a>let、const 是否有变量提升？</h3><blockquote><p>出处<a href="https://zhuanlan.zhihu.com/p/27558914">let 和 const 有提升吗(hoist)</a></p></blockquote><ul><li>let 声明会提升到块顶部,</li><li>从块顶部到该变量的初始化语句，这块区域叫做 TDZ（临时死区）</li><li>如果你在 TDZ 内使用该变量，JS 就会报错（var 没有 TDZ）</li></ul><h3 id="为什么-let-和-const-有暂存死区"><a href="#为什么-let-和-const-有暂存死区" class="headerlink" title="为什么 let 和 const 有暂存死区"></a>为什么 let 和 const 有暂存死区</h3><p>首先可以看一段 es6 的标准</p><blockquote><p>let and const declarations define variables that are scoped to the running execution context’s LexicalEnvironment. The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding is evaluated. A variable defined by a LexicalBinding with an Initializer is assigned the value of its Initializer’s AssignmentExpression when the LexicalBinding is evaluated, not when the variable is created. If a LexicalBinding in a let declaration does not have an Initializer the variable is assigned the value undefined when the LexicalBinding is evaluated.</p></blockquote><p><em>它的大概意思就是 let 和 const 会将当前执行的上下文栈形成一个封闭的作用域。在语法上，<strong>从块顶部到该变量的初始化语句,称为 “暂时性死区”</strong>（ temporal dead zone，简称 TDZ）。</em></p><h3 id="为什么-var-可以重复声明、修改，let-不能重复声明，却可以修改，const-可以修改引用类型的值"><a href="#为什么-var-可以重复声明、修改，let-不能重复声明，却可以修改，const-可以修改引用类型的值" class="headerlink" title="为什么 var 可以重复声明、修改，let 不能重复声明，却可以修改，const 可以修改引用类型的值"></a>为什么 var 可以重复声明、修改，let 不能重复声明，却可以修改，const 可以修改引用类型的值</h3><ul><li><p>var 的话会直接在栈内存里预分配内存空间，然后等到实际语句执行的时候，再存储对应的变量，如果传的是引用类型，那么会在堆内存里开辟一个内存空间存储实际内容，栈内存会存储一个指向堆内存的指针</p></li><li><p>let 是不会在栈内存里预分配内存空间，而且在栈内存分配变量时，做一个检查，如果已经有相同变量名存在就会报错</p></li><li><p>const 也不会预分配内存空间，在栈内存分配变量时也会做同样的检查。不过 const 存储的变量是不可修改的，对于基本类型来说你无法修改定义的值，对于引用类型来说你无法修改栈内存里分配的指针，但是你可以修改指针指向的对象里面的属性</p></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var">MDN var</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let">MDN let</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const">MDN const</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-let-and-const-declarations">ECMA262 6.0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid基础</title>
      <link href="/2020/07/20/qian-duan/css/4.grid-ji-chu/"/>
      <url>/2020/07/20/qian-duan/css/4.grid-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Grid-简介"><a href="#Grid-简介" class="headerlink" title="Grid 简介"></a>Grid 简介</h2><p><code>CSS Grid Layout</code>(又叫<code>Grid</code>或者<code>CSS Grid</code>)，它是一个二维网格的布局系统。在这之前经过了<code>tables</code>,<code>float</code>,<code>positioning</code>和<code>inline-block</code>,但它们都相当于一个<br>hack，并且功能较少。<code>Flex</code>布局虽然是一个很棒的布局工具，但它是一维的，只能分开操作行和列。</p><h2 id="Grid-术语"><a href="#Grid-术语" class="headerlink" title="Grid 术语"></a>Grid 术语</h2><h3 id="Grid-Container-容器"><a href="#Grid-Container-容器" class="headerlink" title="Grid Container(容器)"></a>Grid Container(容器)</h3><p>当你对一个元素设置了<code>display:grid</code>后，它就是一个 grid 容器,如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Grid-Item-项目"><a href="#Grid-Item-项目" class="headerlink" title="Grid Item(项目)"></a>Grid Item(项目)</h3><p>同样沿用上面的代码，在设置 grid 容器后，该容器的所有直接子标签都是 grid 项目。这和 flex 布局是一样的</p><h3 id="Grid-Line-网格线"><a href="#Grid-Line-网格线" class="headerlink" title="Grid Line(网格线)"></a>Grid Line(网格线)</h3><p>它是构成 grid 布局的分界线。它们既可以是<code>水平的(row grid lines)</code>也可以是<code>垂直的(column grid lines)</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5250caf564d434d9d0b534ec7d78373~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5250caf564d434d9d0b534ec7d78373~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="Grid-Cell（网格单元）"><a href="#Grid-Cell（网格单元）" class="headerlink" title="Grid Cell（网格单元）"></a>Grid Cell（网格单元）</h3><p>由两条相邻的<code>row grid lines（行）</code>和两条相邻的<code>column grid lines(列)</code>组成的一个单元</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ebbadfb04e34b9cb02e416a51715a22~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ebbadfb04e34b9cb02e416a51715a22~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="Grid-Track（网格轨道）"><a href="#Grid-Track（网格轨道）" class="headerlink" title="Grid Track（网格轨道）"></a>Grid Track（网格轨道）</h3><p>两条相邻网格线之间的空间。可以把它们看成网格的列或行。这里是第二行和第三行网格线之间的网格轨道</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03c45f5342994032b102e5b4f40bb42a~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03c45f5342994032b102e5b4f40bb42a~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="Grid-Area-网格域"><a href="#Grid-Area-网格域" class="headerlink" title="Grid Area(网格域)"></a>Grid Area(网格域)</h3><p>由四条网格线组成的总空间，它可以由任意数量的<code>grid cells</code>组成</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f20e328f767453cb3bb24127e6b489f~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f20e328f767453cb3bb24127e6b489f~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="CSS-Grid-容器中可用的属性"><a href="#CSS-Grid-容器中可用的属性" class="headerlink" title="CSS Grid 容器中可用的属性"></a>CSS Grid 容器中可用的属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>定义一个元素作为 grid container 并创建一个单列多行的<code>grid formatting context(网格格式化上下文GFC)</code>, 行数由容器内的子元素(包括微元素和文本节点)决定</p><p>值：</p><ul><li>grid - 生成一个块级 grid</li><li>inline-grid - 生成一个内联 grid</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> grid | inline-grid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="grid-template-columns-、-grid-template-rows"><a href="#grid-template-columns-、-grid-template-rows" class="headerlink" title="grid-template-columns 、 grid-template-rows"></a>grid-template-columns 、 grid-template-rows</h3><p>该属性定义的网格是一个显式网格, 使用<code>grid-template-columns</code>和<code>grid-template-rows</code>属性定义网格的行和列（网格轨道）, 都使用 <strong>空格分隔多个数值</strong>, 这些值代表网格轨道的大小，而且<strong>数值间的空格代表网格线</strong></p><p>比如在容器上只显式设置<code>grid-template-columns</code>，那么<code>grid-template-rows</code>则默认为<code>auto</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 180px 20% auto 1fr 10vw<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e7c98c<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item2</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a21eee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e690dd<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item4</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a7b7c7<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item5</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #23cccc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item6</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #5fddc3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/255bb230e8434b0b9114e85b25703fd4~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/255bb230e8434b0b9114e85b25703fd4~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>则表示定义了一个 5 列 N 行的网格，即将网格容器分为 5 列，每列宽度分别为<code>180px</code>,<code>20%</code>,<code>auto</code>,<code>1fr</code>,<code>10vw</code>等不同单位的值。</p><p>当多再添加一个网格项目时，则会创建 5 列 2 行的网格，如图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd461fb790d149c98f0048879324bf8d~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd461fb790d149c98f0048879324bf8d~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>然后在上面代码的基础上使用<code>grid-template-rows</code>显式指定网格轨道的尺寸，同时也会定义出轨道的数量(该属性的轨道指的就是<code>行</code>)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 180px 20% auto 1fr 10vw<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 200px <span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> auto<span class="token punctuation">)</span> 20vh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就指定了一个 5 列 3 行的网格，即使是不满足有 15 个项目</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b78a74edcdb47efa90fbf8993ba7427~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b78a74edcdb47efa90fbf8993ba7427~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>同时，如果<code>网格项目</code>超过了你创建的<code>网格单元</code>数量，将会重新创建新的一行<code>网格轨道</code>，并以<code>auto</code>来计算网格轨道尺寸（又叫<code>隐式网格</code>）。</p><p>在使用<code>grid-template-columns</code>和<code>grid-template-rows</code>时，默认会使用数字来指出网格线。按以上的代码为例，从左往右的<code>column grid lines</code>为 1 ~ 6，从右往左为-1 ~ -6,从上往下的<code>row grid lines</code>为 1~4, 从下往上为-1 ~ -4。</p><p>当然，也可以自己命名</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [line1] 180px [line2] 20% [line3] auto [line4] 1fr [line5] 10vw [line6]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [row1] 200px [row2] <span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> auto<span class="token punctuation">)</span> [row3] 20vh [row4]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，一条网格线也可以有多个名称</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span>    [row1-start] 200px [row1-end row2-start] <span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> auto<span class="token punctuation">)</span>    [row2-end row3-start] 20vh [row3-end]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要命名呢？因为想要创建一个符合需求的 web 布局，还需要网格项目属性<code>grid-colunm</code>,<code>grid-row</code>,<code>grid-area</code>指定内容所占<code>网格域</code>。这几个属性都是根据网格线的名称来指定<code>网格域</code>的所占空间，所以主要是为了可读性。比如定义一个如下的圣杯布局,如果用数字来确认内容的<code>网格域</code>，是不是很乱？</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span>      [header-col-start nav-col-start footer-col-start] 220px      [nav-col-end main-col-start] 1fr      [main-col-end aside-col-start] 200px      [header-col-end aside-col-end footer-col-end]<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span>      [header-row-start] 80px      [header-row-end nav-row-start main-row-start aside-row-start] 400px      [footer-row-start nav-row-end main-row-end aside-row-end] 80px      [footer-row-end]<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e287ea<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> header-col-start / header-col-end<span class="token punctuation">;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> header-row-start/ header-row-end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #87eeee<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> nav-col-start / nav-col-end<span class="token punctuation">;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> nav-row-start/ nav-row-end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #7633ae<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> main-col-start / main-col-end<span class="token punctuation">;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> main-row-start/ main-row-end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ee323a<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> aside-col-start / aside-col-end<span class="token punctuation">;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> aside-row-start/ aside-row-end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e67<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> footer-col-start / footer-col-end<span class="token punctuation">;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> footer-row-start/ footer-row-end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>Nav<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18cd83e7442e40928d31ce62ce62905a~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18cd83e7442e40928d31ce62ce62905a~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>不同于以上的<code>grid-template-columns</code>和<code>grid-template-rows</code>，使用<code>grid-template-areas</code>同样也可以显式的创建一个网格布局，并且该语法使得网格结构更加的可视化，还不需要再命名网格线。我们还是以上面的圣杯布局为例,代码如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 220px 1fr 200px<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 80px 1fr 80px<span class="token punctuation">;</span>    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>      <span class="token string">"header header header"</span>      <span class="token string">"nav main aside"</span>      <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e287ea<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> nav<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #87eeee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> main<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #7633ae<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> aside<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ee323a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-area</span><span class="token punctuation">:</span> footer<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e67<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>Nav<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面效果如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ce992c99eb44067baa4598b7e54830d~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ce992c99eb44067baa4598b7e54830d~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>且使用这属性必须要遵循以下规则</p><ol><li>描述完整的网格结构</li><li>使用<code>.</code>来标记一个空的<code>grid cell</code></li><li>使用<code>none</code>表示没有定义<code>grid areas</code></li></ol><h3 id="column-gap、grid-column-gap、row-gap、grid-row-gap"><a href="#column-gap、grid-column-gap、row-gap、grid-row-gap" class="headerlink" title="column-gap、grid-column-gap、row-gap、grid-row-gap"></a>column-gap、grid-column-gap、row-gap、grid-row-gap</h3><p>用于定义<strong>两个 grid 项目之间的间距</strong>，可以用任意 css 长度单位</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* standard */</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> 10px | 1rem | 1vw<span class="token punctuation">;</span>  <span class="token property">row-gap</span><span class="token punctuation">:</span> 10px | 1rem | 1vw<span class="token punctuation">;</span>  <span class="token comment">/* old */</span>  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> 10px | 1rem | 1vw<span class="token punctuation">;</span>  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> 10px | 1rem | 1vw<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gap、grid-gap"><a href="#gap、grid-gap" class="headerlink" title="gap、grid-gap"></a>gap、grid-gap</h3><p>是以上属性的简写,如果只定义了一个 value，那么<code>row-gap</code>和<code>column-gap</code>都会采用该值</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* standard */</span>  <span class="token property">gap</span><span class="token punctuation">:</span> &lt;row-gap> &lt;column-gap><span class="token punctuation">;</span>  <span class="token comment">/* old */</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> &lt;grid-row-gap> &lt;grid-column-gap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h3><p>沿着水平方向的轴线对齐网格项目，这个值适用于容器内的所有网格项目。</p><p><strong>如果不设置该值，默认会拉伸所有的<code>gird项目</code>至<code>grid cell</code>的大小</strong></p><ol><li>让项目在网格的起始位置对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89d9347f9e1d4d178100867a1fe4d6fc~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89d9347f9e1d4d178100867a1fe4d6fc~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="2"><li>让项目在网格的结束位置对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb98d9070fef4212941bb6444289f073~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb98d9070fef4212941bb6444289f073~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="3"><li>让项目在网格的中间位置对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01ea8ecd7621412f88000a1347402d08~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01ea8ecd7621412f88000a1347402d08~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="4"><li>拉伸项目至网格宽度</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ffcc5ba7eef4d66995f9a8a1dd4e54d~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ffcc5ba7eef4d66995f9a8a1dd4e54d~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>该属性基本与<code>justify-items</code>相同，只不过对齐的方式相反，这个属性沿着竖直方向的轴线对齐网格项目。</p><ol><li>沿竖直方向在网格（网格域）的开始位置对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c4177467db24b719e511e0a3f7d6de1~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c4177467db24b719e511e0a3f7d6de1~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="2"><li>沿竖直方向在网格的结束位置对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bbee8c91f804ccca71ba3573a8ff657~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bbee8c91f804ccca71ba3573a8ff657~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"> 3. 沿竖直方向在网格的中间位置对齐</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e09eff8d1747a9b0e1ca02efd352d3~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e09eff8d1747a9b0e1ca02efd352d3~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="4"><li>沿竖直方向拉伸项目至网格的高度</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8262c8ce16334d91960b4207d1f97a71~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8262c8ce16334d91960b4207d1f97a71~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>和 flex 的一样，用于设置水平方向网格的对齐方式。即当网格总尺寸小于容器尺寸时使用</p><ol><li>沿着容器的水平方向，对齐网格</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b4c82e7155348a1974dfab0dfde9fc3~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b4c82e7155348a1974dfab0dfde9fc3~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>2.沿容器的水平方向的结束位置，对齐网格</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a989bb9825f45859842591d53371113~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a989bb9825f45859842591d53371113~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="3"><li>沿容器的水平方向的中间位置，对齐网格</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b75c63b26881421d86e6b483f78bb84f~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b75c63b26881421d86e6b483f78bb84f~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="4"><li>沿容器的水平方向拉伸网格</li></ol><p>比如设置<code>grid-template-columns: 100px auto 100px</code>，第二列的网格没有设置一个固定尺寸，然后再设置以下的值（该值为默认值），则会拉伸。如果设置的是固定尺寸(px)，则无法拉伸</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cdc3ee6f32441db8d3c23e966c3c76f~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cdc3ee6f32441db8d3c23e966c3c76f~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="5"><li>沿容器的水平方向均匀分配剩余空间，项目与项目间的间隔距离比项目与容器边框的距离大 1 倍</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1db139de60b34f759499ac4215cbed83~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1db139de60b34f759499ac4215cbed83~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="6"><li>沿容器水平方向两边排列项目</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f26f4a3163b241708246313803917f39~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f26f4a3163b241708246313803917f39~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="7"><li>和 space-around 类似，不过该值无论是项目与项目间的间隔距离还是项目与容器边框的距离都会均匀分配</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46dca63b556f405bb73fc3083549afb2~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46dca63b556f405bb73fc3083549afb2~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>与 justify-content 相反，用于设置竖直方向 grid cell 的对齐方式。即当 grid cell 总尺寸小于 grid container 时使用</p><ol><li>沿着容器的竖直方向，对齐网格</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b992969e313a47718330e0c6d2073ceb~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b992969e313a47718330e0c6d2073ceb~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>2.沿容器的竖直方向的结束位置，对齐网格</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6d7e930acfc4d3e886c3156f1df1a41~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6d7e930acfc4d3e886c3156f1df1a41~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"> 3. 沿容器的竖直方向的中间位置，对齐网格</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ef9376f9534752a42e0da9a0363aa7~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ef9376f9534752a42e0da9a0363aa7~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"> 4. 沿容器的竖直方向拉伸网格</p><p>比如设置<code>grid-template-rows: 100px auto 100px</code>，第行列的网格没有设置一个固定尺寸，然后再设置以下的值（该值为默认值），则会拉伸。如果设置的是固定尺寸(px)，则无法拉伸</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b50e89502a4b70abd1b1bb7cfc8d35~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b50e89502a4b70abd1b1bb7cfc8d35~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="5"><li>沿容器的竖直方向均匀分配剩余空间，项目与项目间的间隔距离比项目与容器边框的距离大 1 倍</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3c69b15866147b6b14b230f70f7fc8f~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3c69b15866147b6b14b230f70f7fc8f~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"> 6. 沿容器竖直方向两边排列项目</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/878c162a5d7c435a88ff858a22dcd43e~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/878c162a5d7c435a88ff858a22dcd43e~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="7"><li>和 space-around 类似，不过该值无论是项目与项目间的间隔距离还是项目与容器边框的距离都会均匀分配</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4eca00980ed47eca28fd204cc17d020~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4eca00980ed47eca28fd204cc17d020~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="应用在-grid-项目上的属性"><a href="#应用在-grid-项目上的属性" class="headerlink" title="应用在 grid 项目上的属性"></a>应用在 grid 项目上的属性</h2><h3 id="grid-column-start、grid-column-end、grid-row-start、grid-row-end"><a href="#grid-column-start、grid-column-end、grid-row-start、grid-row-end" class="headerlink" title="grid-column-start、grid-column-end、grid-row-start、grid-row-end"></a>grid-column-start、grid-column-end、grid-row-start、grid-row-end</h3><p>以上这几个属性用于控制项目的位置以及项目所占网格大小，还是用之前的圣杯布局做例子，<br>代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span>      [header-start nav-start footer-start] 220px      [nav-end main-start] 1fr      [main-end aside-start] 220px      [header-end aside-end footer-end]<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span>      [header-start] 80px      [header-end nav-start main-start aside-start] 1fr      [nav-end main-end aside-end footer-start] 80px      [footer-end]<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span>    <span class="token property">grid-row-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>    <span class="token property">grid-row-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e287ea<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-column-start</span><span class="token punctuation">:</span> nav-start<span class="token punctuation">;</span>    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> nav-end<span class="token punctuation">;</span>    <span class="token property">grid-row-start</span><span class="token punctuation">:</span> nav-start<span class="token punctuation">;</span>    <span class="token property">grid-row-end</span><span class="token punctuation">:</span> nav-end<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #87eeee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-column-start</span><span class="token punctuation">:</span> main-start<span class="token punctuation">;</span>    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> main-end<span class="token punctuation">;</span>    <span class="token property">grid-row-start</span><span class="token punctuation">:</span> main-start<span class="token punctuation">;</span>    <span class="token property">grid-row-end</span><span class="token punctuation">:</span> main-end<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #7633ae<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-column-start</span><span class="token punctuation">:</span> aside-start<span class="token punctuation">;</span>    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> aside-end<span class="token punctuation">;</span>    <span class="token property">grid-row-start</span><span class="token punctuation">:</span> aside-start<span class="token punctuation">;</span>    <span class="token property">grid-row-end</span><span class="token punctuation">:</span> aside-end<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ee323a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-column-start</span><span class="token punctuation">:</span> footer-start<span class="token punctuation">;</span>    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> footer-end<span class="token punctuation">;</span>    <span class="token property">grid-row-start</span><span class="token punctuation">:</span> footer-start<span class="token punctuation">;</span>    <span class="token property">grid-row-end</span><span class="token punctuation">:</span> footer-end<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e67<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>Nav<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>aside<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，代码量非常的大，所以不推荐使用，如果要使用这种方法，可以用下面的简写方式。</p><h3 id="grid-column、grid-row"><a href="#grid-column、grid-row" class="headerlink" title="grid-column、grid-row"></a>grid-column、grid-row</h3><p>该属性是以上属性的简写方式，语法如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line> | &lt;start-line> / span &lt;value><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line> | &lt;start-line> / span &lt;value><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>值既可以使用默认的数值，也可以使用自定义的网格线名称，或者混用</p><p>具体代码示例可看之前的<a href="#grid-template-columns-%E3%80%81-grid-template-rows">圣杯布局</a></p><h3 id="grid-area（推荐写法）"><a href="#grid-area（推荐写法）" class="headerlink" title="grid-area（推荐写法）"></a>grid-area（推荐写法）</h3><p>它是以上属性的更加简写方式，需要配合<code>grid-template-areas</code>定义可视化的网格布局，然后来指定网格域。</p><p>具体示例也在之前的<a href="#grid-template-areas">圣杯布局</a>中有使用</p><h3 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h3><ol><li>使网格项目按水平方向沿网格单元开始处排列</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f25366da2cb4892bb337c67fe903f08~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f25366da2cb4892bb337c67fe903f08~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="2"><li>使网格项目按水平方向沿网格单元结束处排列</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51b4061223944142b1e1139049c9adad~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51b4061223944142b1e1139049c9adad~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="3"><li>使网格项目按水平方向沿网格单元中间处排列</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f400d5961834bab860f1f99b88130ab~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f400d5961834bab860f1f99b88130ab~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol start="4"><li>使网格项目拉伸至单元格水平方向的尺寸</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3afa33642b8d4dc2926061fc3650495a~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3afa33642b8d4dc2926061fc3650495a~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>该属性和<code>justify-self</code>基本一致，只不过是竖直方向</p><h3 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a>place-self</h3><p>该值为<code>justify-self</code>和<code>align-self</code>的简写模式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">place-self</span><span class="token punctuation">:</span> &lt;align-self> / &lt;justify-self><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="fr-单位"><a href="#fr-单位" class="headerlink" title="fr 单位"></a>fr 单位</h2><p><code>fr</code>只能用于网格布局中，如<code>grid-template-columns</code>,<code>grid-template-rows</code>等属性上。</p><p>它的工作方式和<code>flex-grow</code>类似，根据网格容器中的可用空间比例来调整网格轨道大小。如下示例:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 20fr 50fr 30fr<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 50fr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e7c98c<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item2</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a21eee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e690dd<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item4</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a7b7c7<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item5</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #23cccc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item6</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #5fddc3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/855c69e9b2b84797b349d229ed693d1f~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/855c69e9b2b84797b349d229ed693d1f~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>由此可以得出:<br><code>网格宽度 = 网格轨道fr系数 *  (剩余空间 / 总fr数量)</code></p><p>而且不同于设置<code>百分比</code>，使用<code>fr</code>再设置<code>gap</code>并不会溢出容器，全部使用<code>百分比</code>设置网格宽度容易导致溢出容器</p><h2 id="grid-布局中的函数"><a href="#grid-布局中的函数" class="headerlink" title="grid 布局中的函数"></a>grid 布局中的函数</h2><h3 id="repeat-函数"><a href="#repeat-函数" class="headerlink" title="repeat()函数"></a>repeat()函数</h3><p>接收两个参数：</p><ul><li>参数一：表重复次数，如<code>grid-template-rows: repeat(3, 1fr)</code>就等于<code>grid-template-rows: 1fr 1fr 1fr</code>,或者填写<code>auto-fit</code>和<code>auto-fill</code>关键词</li><li>参数二：为需要重复的值（可以为一个列表值或符合值）,如<code>grid-template-rows: repeat(3, 1fr 200px)</code>就等于<code>grid-template-rows: 1fr 200px 1fr 200px</code></li></ul><p>当第一个参数使用关键词时，会更加多变。</p><h4 id="auto-fill"><a href="#auto-fill" class="headerlink" title="auto-fill"></a>auto-fill</h4><p>在一行中尽可能的创建更多的列。只要能容纳新的列，就会自动创建隐式列，代码如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 50fr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e7c98c<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item2</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a21eee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e690dd<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item4</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #a7b7c7<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item5</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #23cccc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.item6</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #5fddc3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>grid cell 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从图中可以看出多创建了两个列(数量不是固定的)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01c1c0d1231e432c8c30207c6f518d06~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01c1c0d1231e432c8c30207c6f518d06~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h4 id="auto-fit"><a href="#auto-fit" class="headerlink" title="auto-fit"></a>auto-fit</h4><p>根据当前已有的项目创建列，如果容器还有剩余空间，则将剩余空间均分给现有的列，自动变宽填满整个容器。当容器没有可用空间时另起一行，我们把上面的代码改一下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时候，就不会创建更多的列，而是让每列平分剩余空间</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540f0ff9c7074b4fbf99d8a88d661258~tplv-k3u1fbpfcp-watermark.image" class="lazyload placeholder" data-srcset="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540f0ff9c7074b4fbf99d8a88d661258~tplv-k3u1fbpfcp-watermark.image" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h3 id="minmax-MIN-MAX"><a href="#minmax-MIN-MAX" class="headerlink" title="minmax(MIN, MAX)"></a>minmax(MIN, MAX)</h3><p>输出一个范围值，定义一个大于或等于<code>MIN</code>且小于或等于<code>MAX</code>的值的尺寸范围</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a></li><li><a href="https://juejin.cn/book/7161370789680250917">https://juejin.cn/book/7161370789680250917</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex实现几种经典布局</title>
      <link href="/2020/07/19/qian-duan/css/3.flex-shi-xian-ji-chong-jing-dian-bu-ju/"/>
      <url>/2020/07/19/qian-duan/css/3.flex-shi-xian-ji-chong-jing-dian-bu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><p>使用以下的核心代码，控制多行(多列)、单行(单列)的元素水平垂直居中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token comment">/* 这一行用于多行或多列的水平垂直居中，如果是单行单列可以去掉 */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面效果如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #f97897<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>多行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a very very very very very very very long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h2><p><img src="https://i.postimg.cc/1tnFfySr/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/1tnFfySr/image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>以下是浏览器中的效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.cards</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #009788<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #009788<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1024px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token property">gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 300px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">figure</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #b1dfdb<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px 4px 0 0<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">figure img</span> <span class="token punctuation">&#123;</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16 / 9<span class="token punctuation">;</span>    <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">object-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px 4px 0 0<span class="token punctuation">;</span>    <span class="token property">mix-blend-mode</span><span class="token punctuation">:</span> multiply<span class="token punctuation">;</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale3d</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.2s ease-in-out<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card:hover img</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale3d</span><span class="token punctuation">(</span>1.01<span class="token punctuation">,</span> 1.02<span class="token punctuation">,</span> 1.1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card > *:not(figure, button)</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 1rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 500<span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -0.02em<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card p</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.625<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #467570<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card button</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 18px 8px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0.865em<span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #009888<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.275s<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> none 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.card button:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #095c53<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 1px 1px 0 <span class="token function">rgb</span><span class="token punctuation">(</span>0 0 0 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cards<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://loremflickr.com/640/480?random=1<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Bandwidth responsive web design.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      Twitter stock equity vesting period learning curve launch party pitch      innovator series A financing churn rate handshake.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Read more<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://loremflickr.com/640/480?random=3<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Social media accelerator.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">contenteditable</span><span class="token punctuation">></span></span>      Churn rate non-disclosure agreement buyer focus ecosystem iPad.(Please      click on me to add content！)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Read more<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://loremflickr.com/640/480?random=2<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Marketing iPad angel investor.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      Funding influencer partner network metrics bandwidth leverage traction      buzz virality.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Read more<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="等分列布局"><a href="#等分列布局" class="headerlink" title="等分列布局"></a>等分列布局</h2><p>常常用在移动端的 Footer Nav 中<br>主要是通过一下的代码实现等分列。默认情况下设置<code>flex:1</code>的 flex 项目在收缩的时候，<br>其宽度不会小于最小内容尺寸<code>min-content</code>，如果要改变这点，<br>则需要显式设置<code>min-width | min-inline-size | min-heigh| min-block-size</code>为 0，来覆盖<code>min-content</code>。<br>但是因为设置了<code>flex: 1(主要是里面的flex-grow: 1)</code>，它会让 flex 项目按照扩展因子自动分配剩余空间</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* 同 flex: 1 1 0%; */</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>复制以下代码到浏览器查看效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.device</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #e23455<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #e23455<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer .item</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* 同 flex: 1 1 0%; */</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>device<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我的xxxxxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局由以下几个部分组成</p><ul><li>页头 <header></li><li>页脚 <footer></li><li>主内容 <article></li><li>左侧边栏 <aside></li><li>右侧边栏 <aside></li></ul><p>它需要当 css 未加载时<code>主内容</code>要位于两个边栏之前显示，也就是内容优先，所以可以用到<code>order: -1</code>来控制主内容在 flex 布局中的排序</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.home-page</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e289e2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 100%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">aside:nth-of-type(1)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #dd3<span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">article</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">aside:nth-of-type(2)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #aeee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #d43d<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 内容列 --></span>      a very long text    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>右侧内容栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sticky-footer-布局"><a href="#sticky-footer-布局" class="headerlink" title="sticky-footer 布局"></a>sticky-footer 布局</h2><p>该布局就是内容高度不够时，内容自动填充，footer 位于底部。但是当内容超过当前视口高度，则 footer 和内容也会随之滚动。</p><p>具体效果请看一下代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.home-page</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">header,  footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">main</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 0 auto<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token comment">/* flex: 1 1 auto; */</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>a long text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础</title>
      <link href="/2020/07/14/qian-duan/css/1.css-ji-chu/"/>
      <url>/2020/07/14/qian-duan/css/1.css-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>在 css 中，有两种盒模型：</p><ol><li>标准盒模型(<code>box-sizing: content-box</code>)：</li></ol><p>这是我们熟悉的符合 W3C 标准的盒子模型</p><p>尺寸计算公式：<br>width &#x3D; 内容的宽度<br>height &#x3D; 内容的高度</p><p>不包含<code>border</code>,<code>padding</code></p><ol start="2"><li>IE 盒模型(<code>box-sizing: border-box</code>):</li></ol><p>这种模型更适合制作宽度固定的布局。</p><p>尺寸计算公式：<br>width &#x3D; border + padding + 内容的宽度<br>height &#x3D; border + padding + 内容的高度</p><h2 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h2><table><thead><tr><th><strong>选择器</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>通配符选择器</td><td><code>* &#123; &#125;</code></td></tr><tr><td>类选择器</td><td><code>.box&#123; &#125;</code></td></tr><tr><td>id 选择器</td><td><code>#app &#123; &#125;</code></td></tr><tr><td>标签选择器</td><td><code>p&#123; &#125;</code></td></tr><tr><td>标签属性选择器</td><td><code>p[title]&#123; &#125;</code></td></tr><tr><td>伪类选择器</td><td><code>p:first-child&#123; &#125;</code></td></tr><tr><td>伪元素选择器</td><td><code>p::first-line&#123; &#125;</code></td></tr><tr><td>后代选择器(可以是 article 后任意层级的 p 标签)</td><td><code>article p &#123; &#125;</code></td></tr><tr><td>子代选择器(只能匹配 article 下一级的 p 标签)</td><td><code>article &gt; p &#123; &#125; </code></td></tr><tr><td>相邻兄弟选择器</td><td><code>h1 + p &#123; &#125;</code></td></tr><tr><td>通用兄弟选择器</td><td><code>h1 ~ p &#123; &#125;</code></td></tr></tbody></table><h2 id="权重的五个等级及其权重"><a href="#权重的五个等级及其权重" class="headerlink" title="权重的五个等级及其权重"></a>权重的五个等级及其权重</h2><ul><li><p>!important; +∞</p></li><li><p>行内样式; 1000</p></li><li><p>ID 选择器, 权重:100;</p></li><li><p>class,属性选择器和伪类选择器，权重:10;<br>属性选择器指的是:根据元素的属性及属性值来选择元素，比如<code>button[type]</code>属性等。<br>伪类选择器: <code>:active</code> <code>:focus</code>等选项.</p></li><li><p>标签选择器和伪元素选择器，权重:1;<br>伪元素选择器： :before :after</p></li></ul><p>等级关系:<br><strong>!important&gt;行内样式&gt;ID 选择器 &gt; 类选择器 | 属性选择器 | 伪类选择器 &gt; 元素选择器</strong></p><h2 id="如何判断选择器的优先级"><a href="#如何判断选择器的优先级" class="headerlink" title="如何判断选择器的优先级"></a>如何判断选择器的优先级</h2><table><thead><tr><th>选择器</th><th>ID</th><th>类</th><th>元素</th><th>优先级</th></tr></thead><tbody><tr><td>h1</td><td>0</td><td>0</td><td>1</td><td>0-0-1</td></tr><tr><td>h1 + p::first-letter</td><td>0</td><td>0</td><td>3</td><td>0-0-3</td></tr><tr><td>li &gt; a[href*&#x3D;”en-US”] &gt; .inline-warning</td><td>0</td><td>2</td><td>2</td><td>0-2-2</td></tr><tr><td>#identifier</td><td>1</td><td>0</td><td>0</td><td>1-0-0</td></tr><tr><td>button:not(#mainBtn, .cta)</td><td>1</td><td>0</td><td>1</td><td>1-0-1</td></tr></tbody></table><h2 id="Web-坐标轴-CSS-坐标系统"><a href="#Web-坐标轴-CSS-坐标系统" class="headerlink" title="Web 坐标轴(CSS 坐标系统)"></a>Web 坐标轴(CSS 坐标系统)</h2><p>web 坐标轴不同于数学上的坐标轴，web 坐标轴的默认原点是<strong>给定上下文的左上角</strong>,就是元素盒子的左上角。它们分别为以下三种:</p><ul><li>x 轴(水平方向) 向右为<strong>正值</strong>，向左为<strong>负值</strong></li><li>y 轴(垂直方向) 向下为<strong>正值</strong>，向上为<strong>负值</strong></li><li>z 轴(用于给定位元素控制层叠顺序，即 position 属性为非<code>static</code>的元素),使用<code>z-index</code>控制元素的层叠顺序,值越大，层级越靠前(类似于 ps 的图层)</li></ul><h2 id="css-浮动-Float-以及其工作原理"><a href="#css-浮动-Float-以及其工作原理" class="headerlink" title="css 浮动(Float)以及其工作原理"></a>css 浮动(Float)以及其工作原理</h2><ul><li>浮动元素从网页的正常流中移出，但是保留了部分流动性。会影响其他元素的定位(比如文字会围绕着浮动元素)。这一点和绝对定位(absolute)不同，absolute 元素完全脱离的文档流</li><li>如果浮动元素的父元素只包含浮动元素，那么该父元素的高度会坍塌为 0，我们可以通过清除从浮动元素后到父元素关闭前之间的浮动来修复这个问题(<code>clear: both | left | right</code>)。如， 给父元素加伪类</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把浮动元素的父元素属性设置为<code>overflow: auto | hidden</code>,会使其内部形成 <strong>BFC</strong> , 并且父元素会扩张自己，使其能够包围它的子元素</li></ul><h2 id="CSS-盒模型中的四种布局模式"><a href="#CSS-盒模型中的四种布局模式" class="headerlink" title="CSS 盒模型中的四种布局模式"></a>CSS 盒模型中的四种布局模式</h2><h3 id="IFC（Inline-Formatting-Contexts，行内格式化上下文）"><a href="#IFC（Inline-Formatting-Contexts，行内格式化上下文）" class="headerlink" title="IFC（Inline Formatting Contexts，行内格式化上下文）"></a>IFC（Inline Formatting Contexts，行内格式化上下文）</h3><p>IFC(Inline Formatting Contexts)直译为”内联格式化上下文”，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding&#x2F;margin 影响)<br>IFC 中的 line box 一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与与 line box 之间，使得 line box 宽度缩短。 同个 ifc 下的多个 line box 高度会不同。 IFC 中时不可能有块级元素的，当插入块级元素时（如 p 中插入 div）会产生两个匿名块与 div 分隔开，即产生两个 IFC，每个 IFC 对外表现为块级元素，与 div 垂直排列。<br>那么 IFC 一般有什么用呢？</p><p>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</p><p>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</p><h3 id="BFC（Block-Formatting-Contexts，块级格式化上下文）"><a href="#BFC（Block-Formatting-Contexts，块级格式化上下文）" class="headerlink" title="BFC（Block Formatting Contexts，块级格式化上下文）"></a>BFC（Block Formatting Contexts，块级格式化上下文）</h3><p>BFC 是一种属性，它会影响元素的定位以及与其兄弟元素之间的互相作用。 中文常译为 <strong>块级格式化上下文</strong> 。是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。 在进行盒子元素布局的时候，BFC 提供了一个环境，在这个环境中按照一定规则进行布局不会影响到其它环境中的布局。比如浮动元素会形成 BFC，浮动元素内部子元素的主要受该浮动元素影响，两个浮动元素之间是互不影响的。 也就是说，如果一个元素符合了成为 BFC 的条件，该元素内部元素的布局和定位就和外部元素互不影响(除非内部的盒子建立了新的 BFC)，是一个隔离了的独立容器。（在 CSS3 中，BFC 叫做 Flow Root）</p><h4 id="形成条件"><a href="#形成条件" class="headerlink" title="形成条件"></a>形成条件</h4><ol><li>浮动元素，float 除 none 以外的值；</li><li>绝对定位元素，position（absolute，fixed）；</li><li>display 为以下其中之一的值 inline-blocks，table-cells，table-captions；</li><li>overflow 除了 visible 以外的值（hidden，auto，scroll）</li></ol><p>参考:<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN</a></p><h3 id="FFC（Flex-Formatting-Contexts，弹性格式化上下文）"><a href="#FFC（Flex-Formatting-Contexts，弹性格式化上下文）" class="headerlink" title="FFC（Flex Formatting Contexts，弹性格式化上下文）"></a>FFC（Flex Formatting Contexts，弹性格式化上下文）</h3><p>用于排列弹性盒子，其中弹性盒子具有更灵活的布局方式，可以通过指定伸缩比例、对齐方式等属性来调整布局。</p><h3 id="GFC（Grid-Formatting-Contexts，网格格式化上下文）"><a href="#GFC（Grid-Formatting-Contexts，网格格式化上下文）" class="headerlink" title="GFC（Grid Formatting Contexts，网格格式化上下文）"></a>GFC（Grid Formatting Contexts，网格格式化上下文）</h3><p>用于排列网格盒子，其中网格盒子具有二维的排列方式，可以通过指定行列数、单元格大小、对齐方式等属性来调整布局。</p><h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><p>在正常开发中，UI&#x2F;UX 给出的都是一个具体设计稿，都是<code>px</code>尺寸的。那么无论是下面那种适配方案，<strong>其核心都是需要根据设计稿上的元素占设计稿的比例</strong>。<br>比如常见的 750 设计稿(通常是指以 iPhone 6&#x2F;7&#x2F;8 为基准的设计稿),它的屏幕宽度为 <code>750px(像素)</code>，屏幕高度为 <code>1334px(像素)</code>。<br>那么我们可以选择一个可以让我们在后面填写元素尺寸时比较好计算的 <code>750px / 7.5 = 100px</code> 。也就是说，我们将屏幕的宽度分成了<code>7.5份</code>，每一份占<code>100px</code>。</p><p>如果使用<code>rem</code>布局，那么需要在根元素设置<code>font-size</code>,表示我们的<code>1em</code>为 100px</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>后面，我们通过设计稿绘制页面的时候，如果遇到需要绘制一个 div 为 200px * 200px ，内部字体为 16px 的，那么我们只需要根据<code>设计稿上元素的尺寸 / 100 </code>就可以得到各种元素所占屏幕的比例，来完成在各种不同移动端设备下的适配</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.16em<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>媒体查询可用于响应式网站样式，也可针对不同型号手机的尺寸写不同的样式</li><li><a href="https://blog.csdn.net/lvyang251314/article/details/82798858">通过 rem 布局</a></li><li>通过 vw&#x2F;vh 布局移动端 css</li></ul><h2 id="px、em、rem-区别"><a href="#px、em、rem-区别" class="headerlink" title="px、em、rem 区别"></a>px、em、rem 区别</h2><ol><li>px 是固定的像素，一旦设置了就无法因为适应页面大小而改变</li><li>em 和 rem 相对于 px 更具有灵活性，它们是相对长度单位，即长度不固定，适合响应式布局</li><li>em 是相对其父元素来设置字体大小的，一般都是以 body 的 font-size 为基准。这样会有一个问题，进行任何元素设置，<br>都可能需要知道他父元素的大小。</li><li>rem 是相对于根元素 html 的<code>font-size</code>；</li></ol><h3 id="em-相对于父元素"><a href="#em-相对于父元素" class="headerlink" title="em 相对于父元素"></a>em 相对于父元素</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  父元素div  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    子元素p    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>孙元素span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 7.5em<span class="token punctuation">;</span> <span class="token comment">/* 300px */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 7.5em<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span> <span class="token comment">/* 20px */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 7.5em<span class="token punctuation">;</span> <span class="token comment">/* 150px */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 7.5em<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 2px blue<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">span</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 6em<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px red<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rem-相对于更元素-html。"><a href="#rem-相对于更元素-html。" class="headerlink" title="rem 相对于更元素 html。"></a>rem 相对于更元素 html。</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  父元素div  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    子元素p    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>孙元素span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span> <span class="token comment">/* 40px */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span> <span class="token comment">/* 200px */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span> <span class="token comment">/* 20px */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10rem<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10rem<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px blue<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">span</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 7rem<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 6rem<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid 2px red<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果设计中使用了非标准的字体，你该如何去实现？"><a href="#如果设计中使用了非标准的字体，你该如何去实现？" class="headerlink" title="如果设计中使用了非标准的字体，你该如何去实现？"></a>如果设计中使用了非标准的字体，你该如何去实现？</h2><ol><li>用图片代替</li><li>web fonts 在线字库，如<a href="https://fonts.google.com/">Google Webfonts</a>，<a href="http://www.chinaz.com/free/2012/0815/269267.shtml">Typekit</a> 等等；</li></ol><h2 id="浏览器如何判断元素是否匹配某个-CSS-选择器？"><a href="#浏览器如何判断元素是否匹配某个-CSS-选择器？" class="headerlink" title="浏览器如何判断元素是否匹配某个 CSS 选择器？"></a><a href="https://www.zhihu.com/question/24959507">浏览器如何判断元素是否匹配某个 CSS 选择器？</a></h2><p>从后往前判断。</p><p>浏览器先产生一个元素集合，这个集合往往由最后一个部分的索引产生（如果没有索引就是所有元素的集合）。<br>然后向上匹配，如果不符合上一个部分，就把元素从集合中删除，直到真个选择器都匹配完，还在集合中的元素就匹配这个选择器了。</p><p>举个例子，有选择器：<code>body.ready #wrapper &gt; .lol233</code></p><p>先把所有 class 中有 lol233 的元素拿出来组成一个集合，然后上一层，对每一个集合中的元素，如果元素的 parent id 不为 #wrapper 则把元素从集合中删去。 再向上，从这个元素的父元素开始向上找，没有找到一个 tagName 为 body 且 class 中有 ready 的元素，就把原来的元素从集合中删去。</p><p>至此这个选择器匹配结束，所有还在集合中的元素满足。</p><p>大体就是这样，不过浏览器还会有一些奇怪的优化。</p><p>为什么从后往前匹配因为效率和文档流的解析方向。效率不必说，找元素的父亲和之前的兄弟比遍历所有儿子快而且方便。关于文档流的解析方向，是因为现在的 CSS，一个元素只要确定了这个元素在文档流之前出现过的所有元素，就能确定他的匹配情况。应用在即使 html 没有载入完成，浏览器也能根据已经载入的这一部分信息完全确定出现过的元素的属性。为什么是用集合主要也还是效率。基于 CSS Rule 数量远远小于元素数量的假设和索引的运用，遍历每一条 CSS Rule 通过集合筛选，比遍历每一个元素再遍历每一条 Rule 匹配要快得多。</p><h2 id="伪元素-pseudo-elements-及其用途"><a href="#伪元素-pseudo-elements-及其用途" class="headerlink" title="伪元素 (pseudo-elements) 及其用途"></a><a href="https://www.jianshu.com/p/9086114e07d4">伪元素 (pseudo-elements) 及其用途</a></h2><h2 id="inline-和-inline-block-的区别"><a href="#inline-和-inline-block-的区别" class="headerlink" title="inline 和 inline-block 的区别"></a>inline 和 inline-block 的区别</h2><ul><li>inline(行内元素): 无法设置宽高,不独占一行, 竖直方向的 margin(margin-top、margin-bottom)不生效。</li><li>inline-block(行内块元素): 可以设置宽高，不独占一行</li></ul><h2 id="relative、fixed、absolute、static、sticky-元素的区别"><a href="#relative、fixed、absolute、static、sticky-元素的区别" class="headerlink" title="relative、fixed、absolute、static、sticky 元素的区别"></a>relative、fixed、absolute、static、sticky 元素的区别</h2><table><thead><tr><th></th><th>relative</th><th>fixed</th><th>absolute</th><th>static</th><th>sticky</th></tr></thead><tbody><tr><td>含义</td><td>相对定位</td><td>固定定位</td><td>绝对定位</td><td>静态定位</td><td>相对定位</td></tr><tr><td>是否脱离正常文档流</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否还占用正常文档流的位置</td><td>是</td><td>否</td><td>否</td><td>-</td><td>是</td></tr><tr><td>相对于什么定位</td><td>元素本身在正常文档流的位置</td><td>相对于浏览器窗口</td><td>相对于 static 定位以外的第一个父元素左上角 border 与 padding 交界处定位</td><td>-</td><td>相对它的最近滚动祖先（当该祖先的 overflow 是 hidden, scroll, auto, 或 overlay 时） 和 最近块级祖先，包括 table-related 元素，基于 top, right, bottom, 和 left 的值进行偏移。</td></tr></tbody></table><h2 id="响应式和自适应的区别"><a href="#响应式和自适应的区别" class="headerlink" title="响应式和自适应的区别"></a>响应式和自适应的区别</h2><p>响应式和自适应都是为了解决不同设备上的适配问题，但它们的实现方式有所不同。</p><p><strong>响应式（Responsive Design） &#x3D; 所有设备的代码是一样的</strong><br>比如使用弹性网格布局（Flexible Grid Layout）：通过使用弹性布局和百分比来设计网格系统，使网格布局能够适应不同的屏幕尺寸。</p><p><strong>自适应（Adaptive Design）&#x3D; 不同设备的代码是不一样的</strong></p><p>使用<code>@media</code>规则定义不同屏幕尺寸下的样式，比如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自适应设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token comment">/* 默认样式 */</span>      <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 在窗口宽度小于等于600px时的样式 */</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>          <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 在窗口宽度大于600px且小于等于1200px时的样式 */</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>          <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 在窗口宽度大于1200px时的样式 */</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1201px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>          <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>自适应设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一段自适应设计的示例文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="translate-和-absolute-position，或反之的理由？为什么？"><a href="#translate-和-absolute-position，或反之的理由？为什么？" class="headerlink" title="translate() 和 absolute position，或反之的理由？为什么？"></a>translate() 和 absolute position，或反之的理由？为什么？</h2><p>通过 absolute 定位属性实现的移动，通过 translate 也可以实现，两者结合使用可以实现元素的居中。</p><p><strong>1. 文档流上的差异：</strong></p><p>absolute 会脱离文档流，而 translate 不会脱离文档流</p><p><strong>2. 基点上的差异：</strong></p><p>absolute 是基于第一个非 static 父元素的左上角 border 与 padding 交界处，而 translate 是子元素整体平移，没有所谓的基点而言，当然通过 transform-origin 改变旋转的基准点？</p><p><strong>3. 视图属性上的差异：</strong></p><p>可以看出使用 translate 的例子的 offsetTop 和 offsetLeft 的数值与没有产生位移的元素没有然后区别，无论位移多少这两个数值都是固定不变的。</p><p>而使用相对定位的例子 offsetTop 和 offsetLeft 的数值则根据位移的长度发生了改变。</p><p><strong>4. 动画表现上的差异：</strong></p><p>使用绝对定位的动画效果会受制于利用像素(px)为单位进行位移，而使用 translate 函数的动画则可以不受像素的影响，以更小的单位进行位移。</p><p>另外，绝对定位的动画效果完全使用 <strong>CPU</strong> 进行计算，而使用 translate 函数的动画则是利用 <strong>GPU</strong>，因此在视觉上使用 translate 函数的动画可以有比绝对定位动画有更高的帧数。</p><h2 id="css3-动画"><a href="#css3-动画" class="headerlink" title="css3 动画"></a><a href="https://www.w3school.com.cn/css3/css3_animation.asp">css3 动画</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> first</span> <span class="token punctuation">&#123;</span>  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> first 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex基础属性</title>
      <link href="/2020/07/14/qian-duan/css/2.flex-ji-chu/"/>
      <url>/2020/07/14/qian-duan/css/2.flex-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="以下所有代码的示例都在仓库"><a href="#以下所有代码的示例都在仓库" class="headerlink" title="以下所有代码的示例都在仓库"></a>以下所有代码的示例都在<a href="https://github.com/SaebaRyoo/Demos/tree/main/html-css-demo/Flex-demo">仓库</a></h2><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">基本概念</a></h2><p>flex 是弹性布局，任何一个容器都可以指定为 flex 布局。只需要设置<code>display: flex</code>即可。在设为 flex 布局后，子元素的<code>float</code>,<code>clear</code>,<code>vertical-align</code>属性会失效</p><h2 id="应用在容器上的属性"><a href="#应用在容器上的属性" class="headerlink" title="应用在容器上的属性"></a>应用在容器上的属性</h2><h3 id="1-flex-direction-设置项目的主轴"><a href="#1-flex-direction-设置项目的主轴" class="headerlink" title="1. flex-direction 设置项目的主轴"></a>1. flex-direction 设置项目的主轴</h3><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-flex-wrap-设置项目是否换行"><a href="#2-flex-wrap-设置项目是否换行" class="headerlink" title="2. flex-wrap 设置项目是否换行"></a>2. flex-wrap 设置项目是否换行</h3><ul><li>nowrap(默认值): 不换行</li><li>wrap: 换行</li><li>wrap-reverse: 换行，第一行在下方</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-flex-flow-以上两个的简写"><a href="#3-flex-flow-以上两个的简写" class="headerlink" title="3. flex-flow 以上两个的简写"></a>3. flex-flow 以上两个的简写</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row  nowrap。  .container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-justify-content-设置项目在主轴上的对齐方式"><a href="#4-justify-content-设置项目在主轴上的对齐方式" class="headerlink" title="4. justify-content 设置项目在主轴上的对齐方式"></a>4. justify-content 设置项目在主轴上的对齐方式</h3><ul><li>flex-start: 在主轴的开始位置按顺序排序</li><li>flex-end: 在主轴的结束位置按顺序排序</li><li>center: 项目集中在主轴的中间</li><li>space-between: 两边对齐，项目之间的间隔相等</li><li>space-around: 每个项目两侧的间隔相等，所以，项目和项目之间的间隔比项目与边框的间隔大一倍</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-align-items-设置所有项目在交叉轴上的位置"><a href="#5-align-items-设置所有项目在交叉轴上的位置" class="headerlink" title="5. align-items 设置所有项目在交叉轴上的位置"></a>5. align-items 设置所有项目在交叉轴上的位置</h3><ul><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-align-content-用来分配交叉轴方向的剩余空间-表现行为和-justify-content-属性一致，除了多出一个-stretch"><a href="#6-align-content-用来分配交叉轴方向的剩余空间-表现行为和-justify-content-属性一致，除了多出一个-stretch" class="headerlink" title="6. align-content 用来分配交叉轴方向的剩余空间 表现行为和 justify-content 属性一致，除了多出一个 stretch."></a>6. align-content 用来分配交叉轴方向的剩余空间 表现行为和 justify-content 属性一致，除了多出一个 stretch.</h3><ul><li>stretch（默认值）：轴线占满整个交叉轴。</li><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li></ul><p><strong>如果 flex 项目未显式设置<code>height</code>或<code>block-size</code>时，除了设置 stretch 属性会拉伸 flex 项目，设置为其他属性时会改变 flex 项目的高度为内容最大高度</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around |    stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用在项目上的属性"><a href="#应用在项目上的属性" class="headerlink" title="应用在项目上的属性"></a>应用在项目上的属性</h2><h3 id="1-order-属性-定义项目的排列顺序，数值越小，月考勤，默认为-0（不推荐使用，性能损耗大）"><a href="#1-order-属性-定义项目的排列顺序，数值越小，月考勤，默认为-0（不推荐使用，性能损耗大）" class="headerlink" title="1. order 属性 定义项目的排列顺序，数值越小，月考勤，默认为 0（不推荐使用，性能损耗大）"></a>1. order 属性 定义项目的排列顺序，数值越小，月考勤，默认为 0（不推荐使用，性能损耗大）</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-flex-grow-定义项目的放大比例，默认为-0。即存在剩余空间也不放大。"><a href="#2-flex-grow-定义项目的放大比例，默认为-0。即存在剩余空间也不放大。" class="headerlink" title="2. flex-grow 定义项目的放大比例，默认为 0。即存在剩余空间也不放大。"></a>2. flex-grow 定义项目的放大比例，默认为 0。即存在剩余空间也不放大。</h3><p>在一个 flex 容器内，如果给项目设置了 flex-grow,那么会每个设置了 flex-grow 的项目都会多分到: <strong>(剩余空间宽度&#x2F;flex-grow 总数) * 当前项目 flex-grow 数</strong><br>假设容器宽度为 600px,有三个项目 width 都为 100px, 后两个分别设置了以下属性，那么最后计算出来的宽度就是<br>item1: 100px,item2:200px, item3: 300px;</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item2</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item3</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-flex-shrink"><a href="#3-flex-shrink" class="headerlink" title="3. flex-shrink"></a>3. flex-shrink</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义项目的缩小比例，默认为 1，即如果容器空间不足，容器内的项目缩小。<br>但是 flex-shrink 会组织 flex 项目缩小为 0。所以继续缩小会按照<code>min-content</code>的大小计算。<br>这就是为什么显式设置<code>flex:1</code>不一定能让所有 flex 项目宽度相等的主要原因之一。所以有一个小技巧就是<br>要实现等分列布局效果时，显示的在 flex 项目上设置<code>min-width:0</code>，避免内容不等长，造成列不等分</p><h3 id="4-flex-basis"><a href="#4-flex-basis" class="headerlink" title="4. flex-basis"></a>4. flex-basis</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length> | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认值时 auto ，用于给项目设置一个初始化的尺寸(理想的尺寸)。之所以说是理想的尺寸，是因为根据浏览器会<br>根据 <code>content ➜ width ➜ flex-basis</code> 来决定用哪个值来初始化 Flex 项目的假设主尺寸。如果 Flex 项目显式设置了 <code>flex-basis</code> 属性，则会忽略 <code>width</code> 和 <code>content</code> 。但最终浏览器计算出来的 Flex 项目主尺寸（计算后的 flex-basis 属性的值）会受到 CSS 的 <code>min-*</code> 和 <code>max-*</code> 属性值的限制，其中 <code>min-*</code> 用来设置 Flex 项目的下限值，<code>max-*</code>用来设置 Flex 项目的上限值 。</p><h3 id="5-flex-建议优先使用-flex-属性，而不是单独写三个分离的属性-该属性是-flex-grow-flex-shrink-flex-basis-的简写，默认值是0-1-auto，后两个属性可选"><a href="#5-flex-建议优先使用-flex-属性，而不是单独写三个分离的属性-该属性是-flex-grow-flex-shrink-flex-basis-的简写，默认值是0-1-auto，后两个属性可选" class="headerlink" title="5. flex(建议优先使用 flex 属性，而不是单独写三个分离的属性) 该属性是 flex-grow, flex-shrink, flex-basis 的简写，默认值是0 1 auto，后两个属性可选"></a>5. flex(建议优先使用 flex 属性，而不是单独写三个分离的属性) 该属性是 flex-grow, flex-shrink, flex-basis 的简写，默认值是<code>0 1 auto</code>，后两个属性可选</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt; <span class="token string">"flex-grow"</span> > &lt; <span class="token string">"flex-shrink"</span> >? || &lt; <span class="token string">"flex-basis"</span> >]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-align-self"><a href="#6-align-self" class="headerlink" title="6. align-self"></a>6. align-self</h3><p>该属性可用于设置单个项目与其他项目不同的对齐方式，会覆盖 align-items 属性，默认值为 auto(继承容器的 align-items 属性，如果父元素没设值则为 stretch)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础</title>
      <link href="/2020/07/11/qian-duan/html/1.ji-chu/"/>
      <url>/2020/07/11/qian-duan/html/1.ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="DOCTYPE-文档类型-的作用是什么"><a href="#DOCTYPE-文档类型-的作用是什么" class="headerlink" title="DOCTYPE(文档类型)的作用是什么?"></a>DOCTYPE(文档类型)的作用是什么?</h2><p>DTD(document type definition, 文档类型定义) 是一系列的语法规则，用来定义 XML 或者(X)HTML 的文件类型。浏览器通过它来判断文档类型,并执行文件合法性的检验，并决定使用何种协议来解析，以及切换浏览器模式(标准模式或者混杂模式)</p><h2 id="文档的混杂模式-quirks-mode-和标准模式-standards-mode"><a href="#文档的混杂模式-quirks-mode-和标准模式-standards-mode" class="headerlink" title="文档的混杂模式(quirks mode)和标准模式(standards mode)"></a><a href="https://github.com/lxnxbnq/blog/issues/16">文档的混杂模式(quirks mode)和标准模式(standards mode)</a></h2><h2 id="使用-data-属性的好处是什么？"><a href="#使用-data-属性的好处是什么？" class="headerlink" title="使用 data- 属性的好处是什么？"></a>使用 data- 属性的好处是什么？</h2><p>可以存储一些不需要显示在浏览器上的额外信息，比如一片文章，并且你想要的存储一些额外的信息。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>electriccars<span class="token punctuation">"</span></span> <span class="token attr-name">data-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且可以通过 dataset 来获取一个元素中的所有 data-信息</p><pre class="line-numbers language-none"><code class="language-none">var article &#x3D; document.querySelector(&#39;#electriccars&#39;);article.dataset.columns &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="如果将-HTML5-看做一个开放平台，那它的构建模块有哪些？"><a href="#如果将-HTML5-看做一个开放平台，那它的构建模块有哪些？" class="headerlink" title="如果将 HTML5 看做一个开放平台，那它的构建模块有哪些？"></a>如果将 HTML5 看做一个开放平台，那它的构建模块有哪些？</h2><p>标签及属性、地理位置(Geolocation)、画布(canvas)、视频(video)、音频(audio)、拖放(drag)、<a href="https://www.zhangxinxu.com/wordpress/2011/12/html5%E6%89%A9%E5%B1%95-%E5%BE%AE%E6%95%B0%E6%8D%AE-%E4%B8%B0%E5%AF%8C%E7%BD%91%E9%A1%B5%E6%91%98%E8%A6%81/#comments">微数据</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache">应用缓存</a>、Web 存储、web workers、<a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/Using_server-sent_events">服务器发送事件</a></p><h2 id="cookie、sessionStorage、localStorage、indexedDB-的区别"><a href="#cookie、sessionStorage、localStorage、indexedDB-的区别" class="headerlink" title="cookie、sessionStorage、localStorage、indexedDB 的区别"></a>cookie、sessionStorage、localStorage、indexedDB 的区别</h2><table><thead><tr><th></th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr></thead><tbody><tr><td>请求方式</td><td>cookie 始终在同源的 http 请求中被携带</td><td>请求中不主动携带</td><td>请求中不主动携带</td></tr><tr><td>数据大小</td><td>4K(4 * 1024 Byte)</td><td>5M(5 _ 1024 _ 1024)</td><td>5M</td></tr><tr><td>数据有效期</td><td>只在设置 cookie 过期时间之前有效</td><td>仅在当前浏览器窗口关闭前有效</td><td>永久存储</td></tr><tr><td>作用域</td><td>所有同源窗口中共享</td><td>所有同源窗口中共享</td><td>不在不同的浏览器窗口中共享，即使是同一个页面</td></tr></tbody></table><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB">indexedDB</a></p><h2 id="、-、-的区别"><a href="#、-、-的区别" class="headerlink" title="&lt;script&gt;、&lt;script defer&gt; 、&lt;script async &gt; 的区别"></a><code>&lt;script&gt;</code>、<code>&lt;script defer&gt;</code> 、<code>&lt;script async &gt;</code> 的区别</h2><p><img src="/../../assets/script%E6%A0%87%E7%AD%BE%E5%8C%BA%E5%88%AB.png" class="lazyload placeholder" data-srcset="/../../assets/script%E6%A0%87%E7%AD%BE%E5%8C%BA%E5%88%AB.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>通过上图可知，在解析 HTML 时遇上 script 标签</p><ol><li>当为 <strong><code>&lt;script/&gt;</code></strong> 时，渲染进程会停止 html 解析并下载 script 标签的 content 然后执行，在这个过程中阻塞解析</li><li>当为 <strong><code>&lt;script defer/&gt;</code></strong> 时，渲染进程不会停止 html 解析，而是并行下载 script，然后等到 html 解析完成后，<strong>DOMContentLoaded</strong> 事件触发之前执行</li><li>当为 <strong><code>&lt;script async/&gt;</code></strong> 时，并行下载 script，然后执行 script 脚本，并阻塞 html 解析</li></ol><h2 id="为什么通常推荐将-CSS-放置在-之间，而将-JS-放置在-之前？你知道有哪些例外吗？"><a href="#为什么通常推荐将-CSS-放置在-之间，而将-JS-放置在-之前？你知道有哪些例外吗？" class="headerlink" title="为什么通常推荐将 CSS &lt;link&gt; 放置在 &lt;head&gt;&lt;/head&gt; 之间，而将 JS &lt;script&gt; 放置在 &lt;/body&gt; 之前？你知道有哪些例外吗？"></a>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</h2><p>把 <strong><code>&lt;link&gt;</code></strong> 标签放在 <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 之间是规范要求的内容。<br>此外，这种做法可以让页面逐步呈现，提高了用户体验。<br>将样式表放在文档底部附近，会使许多浏览器（包括 IE）不能逐步呈现页面。<br>一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p><p>把 <strong><code>&lt;script&gt;</code></strong> 标签恰好放在 <strong><code>&lt;/body&gt;</code></strong> 之前</p><p>脚本在下载和执行期间会阻止 HTML 解析。把 <strong><code>&lt;script&gt;</code></strong> 标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。</p><p>例外情况是当你的脚本里包含<code>document.write()</code>时。但是现在，<code>document.write()</code>不推荐使用。<br>同时，将 <strong><code>&lt;script&gt;</code></strong> 标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档（document）被解析。<br>比较好的做法是，<code>&lt;script&gt;</code> 使用 <strong>defer</strong> 属性，放在 <strong><code>&lt;head&gt;</code></strong> 中</p><h2 id="什么是渐进式渲染（progressive-rendering）？"><a href="#什么是渐进式渲染（progressive-rendering）？" class="headerlink" title="什么是渐进式渲染（progressive rendering）？"></a>什么是渐进式渲染（progressive rendering）？</h2><p>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</p><p>在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。</p><p>例如:</p><ol><li>图片懒加载: 页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript 将加载并显示图像。</li><li>确定显示内容的优先级（分层次渲染）: 为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容，然后可以使用延迟加载脚本或监听 DOMContentLoaded&#x2F;load 事件加载其他资源和内容。</li><li>异步加载 HTML 片段——当页面通过后台渲染时，把 HTML 拆分，通过异步请求，分块发送给浏览器。更多相关细节可以在<a href="https://tech.ebayinc.com/engineering/async-fragments-rediscovering-progressive-html-rendering-with-marko/">这里</a>找到。</li></ol><h2 id="HTML-和-XHTML-有什么区别？"><a href="#HTML-和-XHTML-有什么区别？" class="headerlink" title="HTML 和 XHTML 有什么区别？"></a>HTML 和 XHTML 有什么区别？</h2><p>XHTML 是当前 HTML 版的继承者。HTML 语法要求比较松散，这样对网页编写者来说，比较方便，但对于机器来说，语言的语法越松散，处理起来就越困难，对于传统的计算机来说，还有能力兼容松散语法，但对于许多其他设备，比如手机，难度就比较大。因此产生了语法要求更加严格的 XHTML。</p><h2 id="HMTL5-新标签"><a href="#HMTL5-新标签" class="headerlink" title="HMTL5 新标签"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list">HMTL5 新标签</a></h2><h2 id="iframe-的使用"><a href="#iframe-的使用" class="headerlink" title="iframe 的使用"></a>iframe 的使用</h2><ol><li><a href="https://segmentfault.com/a/1190000004502619">https://segmentfault.com/a/1190000004502619</a></li><li><a href="https://www.zhihu.com/question/20653055">https://www.zhihu.com/question/20653055</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs#1.基于grpc的微服务(一)</title>
      <link href="/2020/04/03/hou-duan/nestjs/nestjs-1.ji-yu-grpc-de-wei-fu-wu-yi/"/>
      <url>/2020/04/03/hou-duan/nestjs/nestjs-1.ji-yu-grpc-de-wei-fu-wu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p><a href="https://cloud.tencent.com/developer/article/1877057">微服务的优缺点</a></p><p>这篇文章只是讲了比较基础的 demo</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>首先需要安装 nestjs 的命令行工具<br><code>npm i -g @nestjs/cli</code></p><p>然后使用 nest 命令创建一个项目<br><code>nest new micro-service-demo</code></p><p>安装微服务相关库，<code>yarn add -S @grpc/grpc-js @grpc/proto-loader     @nestjs/microservices</code></p><p>这个时候是一个标准的项目开发模式。但是，我们开发微服务则需要将一个功能比较多的服务拆分。所以，可以通过 nestjs 自带的 <strong><a href="https://docs.nestjs.com/cli/monorepo#monorepo-mode">Monorepo mode</a></strong> 来开发</p><p>通过<code>nest g app api-gateway &amp; nest g app auth-service &amp; nest g app order-service &amp; nest g app product-service</code>来生成对应的服务</p><p>然后在<code>package.json</code>中的<code>scripts</code>中添加上对应的启动方式</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"start:order"</span><span class="token operator">:</span> <span class="token string">"nest start order-service --watch"</span><span class="token punctuation">,</span>  <span class="token property">"start:product"</span><span class="token operator">:</span> <span class="token string">"nest start product-service --watch"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中:</p><ul><li>api-gateway: 为 api 网关，作用是作为代理，连接各个微服务，为 client 提供接口</li><li>auth: 登录以及认证</li><li>order: 订单服务</li><li>product: 产品服务</li></ul><p>我们这里暂时不做复杂功能，只实现 order 微服务和 product 微服务。并在 api-gateway 中使用 grpc 的方式访问 order 服务，order 的 service 再访问 product 微服务。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="proto-文件"><a href="#proto-文件" class="headerlink" title="proto 文件"></a>proto 文件</h3><p>在根目录创建<code>protos</code>目录，该目录用于定义 proto 文件，它定义程序中需要处理的结构化数据<br>首先是创建<code>order.proto</code>文件</p><pre class="line-numbers language-none"><code class="language-none">syntax &#x3D; &quot;proto3&quot;;package order;service OrderService &#123;    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);&#125;message CreateOrderRequest &#123;    int32 productId &#x3D; 1;    int32 quantity &#x3D; 2;    int32 userId &#x3D; 3;&#125;message CreateOrderResponse &#123;    int32 status &#x3D; 1;    repeated string error &#x3D; 2;    int32 id &#x3D; 3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是<code>product.proto</code></p><pre class="line-numbers language-none"><code class="language-none">syntax &#x3D; &quot;proto3&quot;;package product;message DecreaseStockRequest &#123;int32 id &#x3D; 1;int32 orderId &#x3D; 2;&#125;message DecreaseStockResponse &#123;int32 status &#x3D; 1;repeated string error &#x3D; 2;&#125;service ProductService &#123;rpc DecreaseStock(DecreaseStockRequest) returns (DecreaseStockResponse);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建微服务"><a href="#创建微服务" class="headerlink" title="创建微服务"></a>创建微服务</h3><p>首先我们先安装<code>yarn add ts-proto</code>,该库用于将我们的<code>proto</code>文件转化成强类型的 <strong>TS</strong> 文件</p><p>然后在 <code>package.json</code>中的<code>scripts</code>中添加如下命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"proto:all"</span><span class="token operator">:</span> <span class="token string">"protoc --plugin=./node_modules/.bin/protoc-gen-ts_proto --ts_proto_out=./protos/pbs ./protos/**.proto --ts_proto_opt=nestJs=true --ts_proto_opt=fileSuffix=.pb --ts_proto_opt=outputIndex=true"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体的参数意思可以参考<a href="https://github.com/stephenh/ts-proto#supported-options">这里</a></p><p>运行命令后会在<code>protos</code>中生成出一个<code>pbs</code>目录，里面包含了相关的 ts 文件<br>(TODO: 这里的后续可以通过 Nestjs 中的 lib 将这些文件单独提出到公共库中)</p><p>然后再创建<code>order.client.options.ts</code>，用于生成微服务相关的配置</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ClientOptions<span class="token punctuation">,</span> Transport <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">ORDER_PACKAGE_NAME</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./order.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> process <span class="token keyword">from</span> <span class="token string">"process"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> orderClient<span class="token operator">:</span> ClientOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  transport<span class="token operator">:</span> Transport<span class="token punctuation">.</span><span class="token constant">GRPC</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token constant">ORDER_PACKAGE_NAME</span><span class="token punctuation">,</span>    protoPath<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"./protos/pbs/index.order.proto"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"localhost:50001"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改位于<code>order-service</code>目录中的<code>main</code>文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NestFactory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/core"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrderServiceModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./order-service.module"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MicroserviceOptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> orderClient <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.client.options"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createMicroservice</span><span class="token generic class-name"><span class="token operator">&lt;</span>MicroserviceOptions<span class="token operator">></span></span></span><span class="token punctuation">(</span>    OrderServiceModule<span class="token punctuation">,</span>    orderClient  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>order-service/order-service.module</code>中导入 product 微服务</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Module <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrderServiceController <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./order-service.controller"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrderServiceService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./order-service.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ClientsModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">PRODUCT_SERVICE_NAME</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/product.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> productClient <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/product.client.options"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    ClientsModule<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">,</span>        <span class="token operator">...</span>productClient<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>OrderServiceController<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>OrderServiceService<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>order-service/order-service.controller</code>文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrderServiceService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./order-service.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  CreateOrderResponse<span class="token punctuation">,</span>  <span class="token constant">ORDER_SERVICE_NAME</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GrpcMethod <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceController</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> orderServiceService<span class="token operator">:</span> OrderServiceService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">GrpcMethod</span></span><span class="token punctuation">(</span><span class="token constant">ORDER_SERVICE_NAME</span><span class="token punctuation">)</span>  <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>CreateOrderResponse<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderServiceService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>order-service/order-service.service</code>文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Inject<span class="token punctuation">,</span> Injectable<span class="token punctuation">,</span> OnModuleInit <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CreateOrderResponse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  <span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">,</span>  ProductServiceClient<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/product.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ClientGrpc <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> firstValueFrom <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceService</span> <span class="token keyword">implements</span> <span class="token class-name">OnModuleInit</span> <span class="token punctuation">&#123;</span>  productServiceClient<span class="token operator">:</span> ProductServiceClient<span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">)</span>  <span class="token keyword">readonly</span> clientGrpc<span class="token operator">:</span> ClientGrpc<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">onModuleInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>productServiceClient <span class="token operator">=</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>clientGrpc<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>productId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>CreateOrderResponse<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO: 调用product 微服务 rpc, 完成库存变化</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> orderId<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>productServiceClient<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        error<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// const stock =</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      status<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>      error<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再按照上面的步骤修改修改一下<code>product-service</code>中的 main.ts</p><p>然后是修改<code>product-service.controller</code>文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ProductServiceService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./product-service.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  DecreaseStockResponse<span class="token punctuation">,</span>  <span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/product.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GrpcMethod <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceController</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> productServiceService<span class="token operator">:</span> ProductServiceService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">GrpcMethod</span></span><span class="token punctuation">(</span><span class="token constant">PRODUCT_SERVICE_NAME</span><span class="token punctuation">)</span>  <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>DecreaseStockResponse<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>productServiceService<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是修改<code>product-service.service.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DecreaseStockResponse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/product.pb"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>DecreaseStockResponse<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>      error<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是在<code>api-gateway</code>中的<code>module</code>文件注册 order 微服务即可</p><p><code>api-gateway.module.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Module <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ApiGatewayController <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./api-gateway.controller"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ApiGatewayService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./api-gateway.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ClientsModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/microservices"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">ORDER_SERVICE_NAME</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.pb"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> orderClient <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.client.options"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    ClientsModule<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token constant">ORDER_SERVICE_NAME</span><span class="token punctuation">,</span>        <span class="token operator">...</span>orderClient<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>ApiGatewayController<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span>ApiGatewayService<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ApiGatewayModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>api-gateway.controller</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@nestjs/common"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ApiGatewayService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./api-gateway.service"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CreateOrderResponse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../../protos/order.pb"</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ApiGatewayController</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> apiGatewayService<span class="token operator">:</span> ApiGatewayService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>  <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>CreateOrderResponse<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      productId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      quantity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiGatewayService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，一个简单的微服务就搭建完成了</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>接着就是启动 api-gateway 服务、order 服务、product 服务</p><p>在命令行输入<code>curl -X POST http://localhost:3000/order</code><br>然后输出<code>&#123;&quot;status&quot;:200,&quot;id&quot;:1&#125;%</code>即表示成功</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://stackoverflow.com/questions/47704968/protoc-command-not-found-linux">protoc: command not found (Linux)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API with Nestjs#1 Controllers, 路由和模块(module)结构</title>
      <link href="/2020/04/02/hou-duan/nestjs/api-with-nestjs-1/"/>
      <url>/2020/04/02/hou-duan/nestjs/api-with-nestjs-1/</url>
      
        <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>Nestjs 是一个用来构建 Node 引用的框架。与其他一些比较灵活的框架如：<strong>Express</strong>、<strong>Koa</strong>相比，我们需要遵循它的编程规范。当然，不同的框架好处是不一样的，<br>灵活的好处就是可以定制化，但是需要花费更多的时间和精力去架构。而规范化可以迫使我们遵循良好的实践，使我们的应用在整体上保持一致性。</p><p>NestJS 默认使用 Express.js 作为其底层框架。关于 Express 可以看作者的<a href="https://wanago.io/2018/12/03/typescript-express-tutorial-routing-controllers-middleware/">TypeScript Express</a></p><p>重要的一点是<a href="https://docs.nestjs.com/">NestJS 的文档</a>十分全面，你会从中受益。在这里，我们试图对知识进行分类整理，但有时也会链接到官方文档。我们还提到 Express 框架，以突出使用 NestJS 的优势。为了更好地理解本文，对 Express 有一定的经验可能会有帮助，但不是必需的。</p><blockquote><p>如果你想要探究 Nodejs 的核心，我推荐查看<a href="https://wanago.io/2019/02/11/node-js-typescript-modules-file-system/">Node.js TypeScript series</a>。它覆盖了例如，<code>stream</code>,<code>event loop</code>,<code>多线程</code>和<code>使用worker threads实现多线程编程</code>的主题。此外，了解如何在没有任何框架（如 Express 和 NestJS）的情况下创建 API，可以让我们更加欣赏这些框架的优势。</p></blockquote><h2 id="Getting-started-with-NestJS"><a href="#Getting-started-with-NestJS" class="headerlink" title="Getting started with NestJS"></a>Getting started with NestJS</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码(二)-FiberNode</title>
      <link href="/2020/01/01/qian-duan/react/2.react-yuan-ma-er-fibernode/"/>
      <url>/2020/01/01/qian-duan/react/2.react-yuan-ma-er-fibernode/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO:"></a>TODO:</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码(一)-JSX</title>
      <link href="/2020/01/01/qian-duan/react/1.react-yuan-ma-yi-jsx/"/>
      <url>/2020/01/01/qian-duan/react/1.react-yuan-ma-yi-jsx/</url>
      
        <content type="html"><![CDATA[<p>TODO:</p><p>学习React源码的前提就是知道jsx，在react中并不是直接操作真实dom，而是通过jsx的语法，然后经过babel将jsx编译为ReactElement</p><p>所以最初的流程就是 jsx -&gt; babel -&gt; ReactElement。</p><p>以代码的形式看就如下<br>jsx</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">        hello world          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">I'm </span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">26</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过babel转换后的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>  age<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>    <span class="token string">"div"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"container"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"hello world"</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"I'm "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React 在<code>packages/react/src/ReactElement.js</code> 中实现了<code>createElement</code>方法。</p><p>该方法会在运行时执行<code>createElement(type, config, children)</code>返回一个ReactElement，其结构如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span> symbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'react.element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// This tag allows us to uniquely identify this as a React Element</span>  $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>  <span class="token comment">// Built-in properties that belong on the element</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>  <span class="token literal-property property">key</span><span class="token operator">:</span> key<span class="token punctuation">,</span>  <span class="token literal-property property">ref</span><span class="token operator">:</span> ref<span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> props<span class="token punctuation">,</span>  <span class="token comment">// Record the component responsible for creating this element.</span>  <span class="token literal-property property">_owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，比较重要的就是</p><ul><li>$$typeof  : 唯一标识，表示是否为ReactElement,在后续的逻辑中会用到</li><li>type      : 表示的是当前的ReactElement类型，如果当前Element是一个宿主元素div,那么type就是’div’ string类型，如果是一个函数，那么久表示函数本身</li><li>key       : 这个属性就是在diff是优化用的</li><li>props<ul><li>children : 子节点</li><li>…其他的 : className、styles、ref …</li></ul></li></ul><p>到这里，对react的jsx、ReactElement就有了一定的了解了。不过，react作为一个前端框架，它和jquery直接操作DOM不同，它是基于状态驱动的。</p><p><code>jsx变化 -&gt; ReactElement更新 -&gt; reconciler、renderer -&gt; 调用宿主API(DOM或其他平台) -&gt; 显示真实DOM</code><br>可当前<code>ReactElement</code>这种结构</p><ol><li>并不能表达节点与节点之间的关系，它只知道子节点</li><li>属性太少，无法表达节点的状态，比如一个函数组件需要和当前节点的上下文绑定，它就无法做到。</li></ol><p>所以React 实现了一种新的结构<code>FiberNode</code>,这也是React中的虚拟DOM实现。它的特点如下:</p><ul><li><p>介于<code>ReactElement</code>和真实DOM之间: <code>jsx变化 -&gt; ReactElement更新 -&gt; FiberNode -&gt; reconciler、renderer -&gt; 调用宿主API(DOM或其他平台) -&gt; 显示真实DOM</code></p></li><li><p>能够表达节点之间的关系</p></li><li><p>方便拓展（它既是数据存储单元，又是工作单元-&gt; workLoop工作循环）</p></li></ul><p>在下一节会讲解reconciler</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过Hexo +  Github Pages部署react项目</title>
      <link href="/2019/01/11/kai-fa-wen-ti-ji-lu/ru-he-tong-guo-hexo-bu-shu-react-xiang-mu/"/>
      <url>/2019/01/11/kai-fa-wen-ti-ji-lu/ru-he-tong-guo-hexo-bu-shu-react-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>我们都知道 hexo 是一个静态博客框架，它配合 github pages 可以部署个人博客，但是 hexo 会默认编译<code>source</code>目录下所有文件，<br>而我们自己的 react 项目打包出来以后已经是编译后的文件了。所以我们需要让 hexo 跳过编译我们指定的文件</p><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><p>hexo 也给我们提供了一个参数<code>skip_render</code>, 用于跳过指定文件的编译，直接复制到 public 中。</p><p>那么，我们需要做的就是在<code>source</code>目录下创建一个新项目<code>source/your-project</code></p><p>然后在根目录的<code>_config.yml</code>中有一个<code>skip_render</code>字段，我们只需要按照以下来配置即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> your<span class="token punctuation">-</span>project/<span class="token important">**/*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就可以将打包的项目放入到<code>source/your-project</code>中去，我们以打包一个 react 项目为例，可能包含以下的文件</p><ul><li>your-project<ul><li>index.html</li><li>imgs<ul><li>a.png</li><li>b.svg</li></ul></li><li>assets<ul><li>index-03c73ac2-baad1081.js</li><li>index-b4e46d6f-92026574.js</li><li>index-bf437fc1-230805f9.js</li><li>index-e60f790f.js</li><li>index-e63df4eb.css</li></ul></li></ul></li></ul><p>这里需要注意的是，如果你没有在你的构建工具中去做设置的话，一般情况下打包出来的<code>index.html</code>里面对应的资源文件的引用都是绝对路径，比如<code>&lt;script type=&quot;module&quot; crossorigin src=&quot;/assets/index-e60f790f.js&quot;&gt;&lt;/script&gt;</code></p><p>但是部署到 github pages 中需要相对路径，所以需要改成这样<code>&lt;script type=&quot;module&quot; crossorigin src=&quot;./assets/index-e60f790f.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="项目路由修改"><a href="#项目路由修改" class="headerlink" title="项目路由修改"></a>项目路由修改</h2><p>正常到这里就结束了，但是如果项目中使用了路由管理，那么就需要修改项目中对应的路由前缀，我们以<code>react-router</code>为例,需要添加上你在<code>source</code>目录下创建的项目的目录名。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token string">'/your-project'</span><span class="token punctuation">,</span>  element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token string">'/your-project/preview'</span><span class="token punctuation">,</span>  element<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Preview</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 github pages 中是按照你创建的那个目录为路由的。所以最终到线上的访问地址就是<code>xxx.github.io/your-project</code>。但是如果不在<code>react-router</code>中给路由加上前缀，你到线上访问<code>xxx.github.io/your-project</code>就会因为无法找到对应的资源而报 404。</p><p>最后我们直接运行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>就可以完成发布了，然后就可以到线上访问你的 react 项目了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于一些个人展示小项目来说，白嫖服务器太爽了。既减少了购买服务器的开支，又省的自己配置 web 服务器</p>]]></content>
      
      
      <categories>
          
          <category> 开发问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
